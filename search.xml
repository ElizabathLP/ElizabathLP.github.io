<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES-Mapping和聚合查询</title>
      <link href="/posts/a64dc9af/"/>
      <url>/posts/a64dc9af/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Mapping和聚合查询"><a href="#Mapping和聚合查询" class="headerlink" title="Mapping和聚合查询"></a>Mapping和聚合查询</h2><h2 id="1-Mapping"><a href="#1-Mapping" class="headerlink" title="1. Mapping"></a>1. Mapping</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>mapping 就是 ES 数据字段 field 的 type 元数据，ES在创建索引的时候，dynamic-mapping 会自动的为不同的数据制定相应的 mapping，mapping 中包含了字段的类型、搜索方式（<code>exact value</code> 或者 <code>full text</code>）、分词器等。</p><h3 id="查看-mapping"><a href="#查看-mapping" class="headerlink" title="查看 mapping"></a>查看 mapping</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_mapping</span><br></pre></td></tr></table></figure><h3 id="Dunamic-mapping"><a href="#Dunamic-mapping" class="headerlink" title="Dunamic mapping"></a>Dunamic mapping</h3><ol><li>“ElasticSearch”: text/keyword</li><li>123456: long</li><li>123.123: double</li><li>true false: boolean</li><li>2020-05-20: date</li></ol><blockquote><p>为啥 price是 long类型而不是 integer？因为ES 的mapping type是由JSON分析器检测数据类型，而JSON 没有隐式类型转换（integer =&gt; long  or  float =&gt; double）,所以 dynamic-mapping 会西安则一个比较宽的数据类型。</p></blockquote><h3 id="搜索方式"><a href="#搜索方式" class="headerlink" title="搜索方式"></a>搜索方式</h3><ul><li>exact value 精确搜索：在倒排索引过程中，分词器会将 field作为一个整体创建到索引中。</li><li>full text 全文检索：分词、近义词同义词、混淆词、大小写、词性、过滤、时态转换等（normaliztion）\</li></ul><h3 id="ES-数据类型"><a href="#ES-数据类型" class="headerlink" title="ES 数据类型"></a>ES 数据类型</h3><h4 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h4><ol><li><p>数字类型：</p><ol><li>long, integer, short, byte, double, float, half_float, scaled_float</li><li>在满足需求的情况下，尽可能选择范围小的数据类型</li></ol></li><li><p>字符串：string</p><ol><li><p>keyword：适用于索引结构化的字段，可以用于过滤、排序、聚合。keywoed类型的字段只能通过精确值（exact value）搜索到。ID 应该用 keyword</p></li><li><p>text: 当一个字段要被全文搜索的，比如 Email内容、产品描述、这些字段应该使用 text 类型。设置 text 类型以后，字段内容会被分析，在生成倒排索引以前，字符串会被解析器分成一个一个词项。text 类型的字段不用于排序，很少用于聚合。</p><blockquote><p>ES不会为 text创建索引的原因：字段数据会占用大量堆空间，尤其是加载高基数 text 字段时。字段数据一旦加载到堆中，就在该段的生命周期内保持在那里。同样，加载字段数据是一个昂贵的过程，可能导致用户遇到延迟问题。这也就是默认情况下禁用字段数据的原因。</p></blockquote><p>有时，在同一字段中同时具有全文本（text）和关键字（keyword）版本会很有用：一个用于全文本搜索，另一个用于聚合和排序。</p></li></ol></li><li><p>date（时间类型）: exact value</p></li><li><p>布尔类型：boolean</p></li><li><p>binary（二进制）：binary</p></li><li><p>range （区间类型）：integer_range、float_range、long_range、double_range、date_range</p></li></ol><h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><ol><li>Object：用于单个JSON对象</li><li>Nested: 用于JSON数组对象</li></ol><h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><ol><li>Geo-point: 纬度/经度积分</li><li>Geo-shape: 用于多边形等复杂形状</li></ol><h4 id="特有类型"><a href="#特有类型" class="headerlink" title="特有类型"></a>特有类型</h4><ol><li>IP地址：ip用于 IPv4 和 IPv6 地址</li><li>Completion：提供自动完成建议</li><li>Token_count: 计算字符串中令牌的数量</li><li>Murmur3: 在索引时计算值的哈希并将其存储在索引中</li><li>Annotated-text: 索引包含特殊标记的文本（通常用于标识命名实体）</li><li>Percolator: 接受来自 query-dsl 的查询</li><li>Join: 为统一索引内的文档定义父/子关系</li><li>Rank fearures: 记录数字功能以提高查询时的点击率。</li><li>Dense vector：记录浮点值的密集向量</li><li>Sparse vector: 记录浮点值的稀疏向量</li><li>Search-as-you-type: 针对查询优化的文本字段，以实现按需输入的完成</li><li>Alias: 为现有字段定义别名。</li><li>Flattened: 允许将整个JSON对象索引为单个字段。</li><li>Shape：shape对于任意笛卡尔几何。</li><li>Histogram: histogram用于百分位数聚合的预聚合数值。</li><li>Constant keyword：keyword当所有文档都具有相同值时的情况的专业化。</li></ol><h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h3><p>在 ElasticSearch中，数组不需要专用的字段数据类型。默认情况下，任何字段都可以包含零个或多个值，但是，数组中的所有值都必须具有相同的数据类型。</p><h3 id="ES7-新增"><a href="#ES7-新增" class="headerlink" title="ES7 新增"></a>ES7 新增</h3><ol><li>Date_nanos: date plus 纳秒</li><li>Fratures</li><li>Vactor</li></ol><h3 id="手工创建-mapping"><a href="#手工创建-mapping" class="headerlink" title="手工创建 mapping"></a>手工创建 mapping</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /product</span><br><span class="line">&#123;</span><br><span class="line">  "mappings":&#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "field": &#123;</span><br><span class="line">        "mapping_parameter": "parameter_value"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapping-parameters"><a href="#Mapping-parameters" class="headerlink" title="Mapping parameters"></a>Mapping parameters</h3><ol><li><p>index: 是否对当前字段创建索引，默认 true，如果不创建索引，该字段不会通过索引被搜索到，但是仍然会在 source 元数据中展示</p></li><li><p>analyzer: 指定分析器（character filter、tokenizer、Token filters）</p></li><li><p>boost: 对当前字段相关度的评分权重，默认 1</p></li><li><p>coerce：是否允许强制类型转换 true “1” =&gt; 1   false “1” =&lt; 1</p></li><li><p>copy_to:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"field": &#123;</span><br><span class="line">  "type": "text",</span><br><span class="line">  "copy_to": "other_field_name"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>doc_values: 为了提升排序和聚合效率，默认为 true，如果确定不需要对字段进行排序或聚合，也不需要通过脚本访问字段值，则可以禁用doc值节省磁盘空间（不支持 text 和 annotated_text）</p></li><li><p>dynamic: 控制是否可以动态添加新字段</p><ol><li>true 新检测到的字段将添加到映射中（默认）</li><li>false 新检测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但仍会出现在_source返回的匹配项中。这些字段不会添加到映射中，必须显式添加新字段</li><li>strict 如果检测到新字段，则会引发异常并拒绝文档。必须将新字段显示添加到映射中。</li></ol></li><li><p>eager_global_ordinals：用于聚合的字段上，优化聚合性能。</p><blockquote><p>frozen indices (冻结索引)：有些索引的使用率很高，会被保存在内存中，有些使用率特别低，宁愿在使用的时候再重新创建，在使用完毕丢弃数据，Forzen indices 的数据命中频率小，不适用于高搜索负载，数据不会被保存在内存中，堆空间占用比普通索引少的多，Forzen indices 是只读的，请求可能是秒级或者分钟级。eager_global_ordinals 不适用于 Frozen indices    </p></blockquote></li><li><p>enable：是否创建倒排索引，可以对字段操作，也可以对索引操作，如果不创建索引，仍然可以检索并在 _source 元数据中展示，谨慎使用，该状态无法更改。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">  "enabled": false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">  "session_data": &#123;</span><br><span class="line">      "type": "object",</span><br><span class="line">      "enabled": false</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fielddata: 查询时内存数据结构，在首次用当前字段聚合、排序或者在脚本中使用时，需要字段为 fielddata 数据结构，并且创建倒排索引保存到堆中</p></li><li><p>fields: 给 field 创建多字段，用于不同目的（全文检索或者聚合分析排序）</p></li><li><p>format：格式化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"date": &#123;</span><br><span class="line">  "type": "date",</span><br><span class="line">  "format": "yyyy-MM-dd"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ignore_above: 超出长度将被忽略</p></li><li><p>ignore_malformed: 忽略类型错误</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "number_one": &#123;</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "ignore_malformed": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "number_two": &#123;</span><br><span class="line">        "type": "integer"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "text": "Some text value",</span><br><span class="line">  "number_one": "foo"</span><br><span class="line">&#125;</span><br><span class="line">// 虽然有异常，但是不抛出</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "text": "Some text value",</span><br><span class="line">  "number_two": "foo"</span><br><span class="line">&#125;</span><br><span class="line">// 有异常：数据格式不对</span><br></pre></td></tr></table></figure></li><li><p>index_options: 控制将哪些信息添加到反向索引中以进行搜索和突出显示。仅用于text 字段</p></li><li><p>index_phrases: 提升exact_value 查询速递，但是要消耗更多磁盘空间</p></li><li><p>index_prefixes: 前缀搜索</p><ol><li><p>min_chars: 前缀最小长度，&gt;0, 默认2 （包含）</p></li><li><p>max_chars: 前缀最大长度, &lt;20，默认5 （包含）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"index_prefixes": &#123;</span><br><span class="line">  "min_chars": 1,</span><br><span class="line">  "max_chars": 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>meta: 附加元数据</p></li><li><p>normalizer</p></li><li><p>norms: 是否禁用评分（在 filter 和聚合字段上应该禁用）</p></li><li><p>null_value: 为 null值设置默认值</p><blockquote><p>“null_value”: “NULL”</p></blockquote></li><li><p>position_increment_gap</p></li><li><p>proterties: 除了 mapping 还可用于 objet 的属性设置</p></li><li><p>search_analyzer: 设置单独的查询时分析器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "analysis": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "autocomplete_filter": &#123;</span><br><span class="line">          "type": "edge_ngram",</span><br><span class="line">          "min_gram": 1,</span><br><span class="line">          "max_gram": 20</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "analyzer": &#123;</span><br><span class="line">        "autocomplete": &#123;</span><br><span class="line">          "type": "custom",</span><br><span class="line">          "tokenizer": "standard",</span><br><span class="line">          "filter": [</span><br><span class="line">            "lowercase",</span><br><span class="line">            "autocomplete_filter"</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "text": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "autocomplete",</span><br><span class="line">        "search_analyzer": "standard"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "text": "Quick Brown Fox"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "text": &#123;</span><br><span class="line">        "query": "Quick Bar",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>similarity: 为字段设置相关度算法，支持 BM25、 classic ( TF-IDF )、boolean</p></li><li><p>store: 设置字段是否仅查询</p></li><li><p>term_vector</p></li></ol><h2 id="2-聚合查询"><a href="#2-聚合查询" class="headerlink" title="2. 聚合查询"></a>2. 聚合查询</h2><h3 id="bucket-和-metirc"><a href="#bucket-和-metirc" class="headerlink" title="bucket 和 metirc:"></a>bucket 和 metirc:</h3><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">aggs</span>: &#123;</span><br><span class="line">  code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><ol><li>以 tag 维度每个产品的数量，即每个标签</li><li>在的基础上增加筛选条件: 统计价格大于 1999 的数据</li></ol><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><ul><li>价格大于 1999 的 每个 tag 产品的平均价格</li></ul><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><p>按照千元机： 1000以下 中端机： 2000-3000 高端机：3000 以上分组聚合，分别计算数量</p>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Curator使用教程（转载）</title>
      <link href="/posts/bb75348e/"/>
      <url>/posts/bb75348e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Zookeeper客户端Curator使用详解"><a href="#Zookeeper客户端Curator使用详解" class="headerlink" title="Zookeeper客户端Curator使用详解"></a>Zookeeper客户端Curator使用详解</h1><blockquote><p>本文转载自 <a href="http://www.throwable.club/2018/12/16/zookeeper-curator-usage/" target="_blank" rel="noopener">http://www.throwable.club/2018/12/16/zookeeper-curator-usage/</a></p><p>著作权归原作者所有</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Curator是Netflix公司开源的一套zookeeper客户端框架，解决了很多Zookeeper客户端非常底层的细节开发工作，包括连接重连、反复注册Watcher和NodeExistsException异常等等。Patrixck Hunt（Zookeeper）以一句“Guava is to Java that Curator to Zookeeper”给Curator予高度评价。</p><h3 id="引子和趣闻："><a href="#引子和趣闻：" class="headerlink" title="引子和趣闻："></a>引子和趣闻：</h3><p>Zookeeper名字的由来是比较有趣的，下面的片段摘抄自《从PAXOS到ZOOKEEPER分布式一致性原理与实践》一书：</p><p>Zookeeper最早起源于雅虎的研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型的系统需要依赖一个类似的系统进行分布式协调，但是这些系统往往存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架。在立项初期，考虑到很多项目都是用动物的名字来命名的(例如著名的Pig项目)，雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家Raghu Ramakrishnan开玩笑说：再这样下去，我们这儿就变成动物园了。此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了，而Zookeeper正好用来进行分布式环境的协调——于是，Zookeeper的名字由此诞生了。</p><p>Curator无疑是Zookeeper客户端中的瑞士军刀，它译作”馆长”或者’‘管理者’’，不知道是不是开发小组有意而为之，笔者猜测有可能这样命名的原因是说明Curator就是Zookeeper的馆长(脑洞有点大：Curator就是动物园的园长)。</p><p>Curator包含了几个包：</p><ul><li><strong>curator-framework</strong>：对zookeeper的底层api的一些封装。</li><li><strong>curator-client</strong>：提供一些客户端的操作，例如重试策略等。</li><li><strong>curator-recipes</strong>：封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式计数器、分布式Barrier等。</li></ul><p>Maven依赖(使用curator的版本：2.12.0，对应Zookeeper的版本为：3.4.x，<strong>如果跨版本会有兼容性问题，很有可能导致节点操作失败</strong>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Curator的基本Api"><a href="#Curator的基本Api" class="headerlink" title="Curator的基本Api"></a>Curator的基本Api</h2><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><ol><li><p>使用静态工程方法创建客户端</p><p>一个例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">CuratorFramework client =</span><br><span class="line">CuratorFrameworkFactory.newClient(</span><br><span class="line">connectionInfo,</span><br><span class="line"><span class="number">5000</span>,</span><br><span class="line"><span class="number">3000</span>,</span><br><span class="line">retryPolicy);</span><br></pre></td></tr></table></figure><p>newClient静态工厂方法包含四个主要参数：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>connectionString</td><td>服务器列表，格式host1:port1,host2:port2,…</td></tr><tr><td>retryPolicy</td><td>重试策略,内建有四种重试策略,也可以自行实现RetryPolicy接口</td></tr><tr><td>sessionTimeoutMs</td><td>会话超时时间，单位毫秒，默认60000ms</td></tr><tr><td>connectionTimeoutMs</td><td>连接创建超时时间，单位毫秒，默认60000ms</td></tr></tbody></table></li><li><p>使用Fluent风格的Api创建会话</p><p>核心参数变为流式设置，一个列子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">CuratorFramework client =</span><br><span class="line">    CuratorFrameworkFactory.builder()</span><br><span class="line">    .connectString(connectionInfo)</span><br><span class="line">    .sessionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">    .connectionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">    .retryPolicy(retryPolicy)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建包含隔离命名空间的会话</p><p>为了实现不同的Zookeeper业务之间的隔离，需要为每个业务分配一个独立的命名空间（<strong>NameSpace</strong>），即指定一个Zookeeper的根路径（官方术语：<strong><em>为Zookeeper添加“Chroot”特性</em></strong>）。例如（下面的例子）当客户端指定了独立命名空间为“/base”，那么该客户端对Zookeeper上的数据节点的操作都是基于该目录进行的。通过设置Chroot可以将客户端应用与Zookeeper服务端的一课子树相对应，在多个应用共用一个Zookeeper集群的场景下，这对于实现不同应用之间的相互隔离十分有意义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">CuratorFramework client =</span><br><span class="line">CuratorFrameworkFactory.builder()</span><br><span class="line">.connectString(connectionInfo)</span><br><span class="line">.sessionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">.connectionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">.retryPolicy(retryPolicy)</span><br><span class="line">.namespace(<span class="string">"base"</span>)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><p>当创建会话成功，得到client的实例然后可以直接调用其start( )方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.start();</span><br></pre></td></tr></table></figure><h3 id="数据节点操作"><a href="#数据节点操作" class="headerlink" title="数据节点操作"></a>数据节点操作</h3><h4 id="创建数据节点"><a href="#创建数据节点" class="headerlink" title="创建数据节点"></a>创建数据节点</h4><p><strong>Zookeeper的节点创建模式</strong>：</p><ul><li>PERSISTENT：持久化</li><li>PERSISTENT_SEQUENTIAL：持久化并且带序列号</li><li>EPHEMERAL：临时</li><li>EPHEMERAL_SEQUENTIAL：临时并且带序列号</li></ul><p><strong>创建一个节点，初始内容为空</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.create().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意：如果没有设置节点属性，节点创建模式默认为持久化节点，内容默认为空</p><p><strong>创建一个节点，附带初始化内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.create().forPath(<span class="string">"path"</span>,<span class="string">"init"</span>.getBytes());</span><br></pre></td></tr></table></figure><p><strong>创建一个节点，指定创建模式（临时节点），内容为空</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p><strong>创建一个节点，指定创建模式（临时节点），附带初始化内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">"path"</span>,<span class="string">"init"</span>.getBytes());</span><br></pre></td></tr></table></figure><p><strong>创建一个节点，指定创建模式（临时节点），附带初始化内容，并且自动递归创建父节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client.create()</span><br><span class="line">      .creatingParentContainersIfNeeded()</span><br><span class="line">      .withMode(CreateMode.EPHEMERAL)</span><br><span class="line">      .forPath(<span class="string">"path"</span>,<span class="string">"init"</span>.getBytes());</span><br></pre></td></tr></table></figure><p>这个creatingParentContainersIfNeeded()接口非常有用，因为一般情况开发人员在创建一个子节点必须判断它的父节点是否存在，如果不存在直接创建会抛出NoNodeException，使用creatingParentContainersIfNeeded()之后Curator能够自动递归创建所有所需的父节点。</p><h4 id="删除数据节点"><a href="#删除数据节点" class="headerlink" title="删除数据节点"></a>删除数据节点</h4><p><strong>删除一个节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意，此方法只能删除<strong>叶子节点</strong>，否则会抛出异常。</p><p><strong>删除一个节点，并且递归删除其所有的子节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().deletingChildrenIfNeeded().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p><strong>删除一个节点，强制指定版本进行删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().withVersion(<span class="number">10086</span>).forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p><strong>删除一个节点，强制保证删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().guaranteed().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>guaranteed()接口是一个保障措施，只要客户端会话有效，那么Curator会在后台持续进行删除操作，直到删除节点成功。</p><p><strong>注意：</strong>上面的多个流式接口是可以自由组合的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.delete().guaranteed().deletingChildrenIfNeeded().withVersion(<span class="number">10086</span>).forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><h4 id="读取数据节点数据"><a href="#读取数据节点数据" class="headerlink" title="读取数据节点数据"></a>读取数据节点数据</h4><p><strong>读取一个节点的数据内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.getData().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意，此方法返的返回值是byte[ ];</p><p><strong>读取一个节点的数据内容，同时获取到该节点的stat</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">client.getData().storingStatIn(stat).forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><h4 id="更新数据节点数据"><a href="#更新数据节点数据" class="headerlink" title="更新数据节点数据"></a>更新数据节点数据</h4><p><strong>更新一个节点的数据内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.setData().forPath(<span class="string">"path"</span>,<span class="string">"data"</span>.getBytes());</span><br></pre></td></tr></table></figure><p>注意：该接口会返回一个Stat实例</p><p><strong>更新一个节点的数据内容，强制指定版本进行更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.setData().withVersion(<span class="number">10086</span>).forPath(<span class="string">"path"</span>,<span class="string">"data"</span>.getBytes());</span><br></pre></td></tr></table></figure><h4 id="检查节点是否存在"><a href="#检查节点是否存在" class="headerlink" title="检查节点是否存在"></a>检查节点是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.checkExists().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意：该方法返回一个Stat实例，用于检查ZNode是否存在的操作. 可以调用额外的方法(监控或者后台处理)并在最后调用<code>forPath()</code>指定要操作的ZNode</p><h4 id="获取某个节点的所有子节点路径"><a href="#获取某个节点的所有子节点路径" class="headerlink" title="获取某个节点的所有子节点路径"></a>获取某个节点的所有子节点路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.getChildren().forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意：该方法的返回值为List,获得ZNode的子节点Path列表。 可以调用额外的方法(监控、后台处理或者获取状态watch, background or get stat) 并在最后调用forPath()指定要操作的父ZNode</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>CuratorFramework的实例包含inTransaction( )接口方法，调用此方法开启一个ZooKeeper事务. 可以复合create, setData, check, and/or delete 等操作然后调用commit()作为一个原子操作提交。一个例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">client.inTransaction().check().forPath(<span class="string">"path"</span>)</span><br><span class="line">      .and()</span><br><span class="line">      .create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">"path"</span>,<span class="string">"data"</span>.getBytes())</span><br><span class="line">      .and()</span><br><span class="line">      .setData().withVersion(<span class="number">10086</span>).forPath(<span class="string">"path"</span>,<span class="string">"data2"</span>.getBytes())</span><br><span class="line">      .and()</span><br><span class="line">      .commit();</span><br></pre></td></tr></table></figure><h4 id="异步接口"><a href="#异步接口" class="headerlink" title="异步接口"></a>异步接口</h4><p>上面提到的创建、删除、更新、读取等方法都是同步的，Curator提供异步接口，引入了<strong>BackgroundCallback</strong>接口用于处理异步接口调用之后服务端返回的结果信息。<strong>BackgroundCallback</strong>接口中一个重要的回调值为CuratorEvent，里面包含事件类型、响应吗和节点的详细信息。</p><p><strong>CuratorEventType</strong></p><table><thead><tr><th align="center">事件类型</th><th align="center">对应CuratorFramework实例的方法</th></tr></thead><tbody><tr><td align="center">CREATE</td><td align="center">#create()</td></tr><tr><td align="center">DELETE</td><td align="center">#delete()</td></tr><tr><td align="center">EXISTS</td><td align="center">#checkExists()</td></tr><tr><td align="center">GET_DATA</td><td align="center">#getData()</td></tr><tr><td align="center">SET_DATA</td><td align="center">#setData()</td></tr><tr><td align="center">CHILDREN</td><td align="center">#getChildren()</td></tr><tr><td align="center">SYNC</td><td align="center">#sync(String,Object)</td></tr><tr><td align="center">GET_ACL</td><td align="center">#getACL()</td></tr><tr><td align="center">SET_ACL</td><td align="center">#setACL()</td></tr><tr><td align="center">WATCHED</td><td align="center">#Watcher(Watcher)</td></tr><tr><td align="center">CLOSING</td><td align="center">#close()</td></tr></tbody></table><p><strong>响应码(#getResultCode())</strong></p><table><thead><tr><th align="center">响应码</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">OK，即调用成功</td></tr><tr><td align="center">-4</td><td align="center">ConnectionLoss，即客户端与服务端断开连接</td></tr><tr><td align="center">-110</td><td align="center">NodeExists，即节点已经存在</td></tr><tr><td align="center">-112</td><td align="center">SessionExpired，即会话过期</td></tr></tbody></table><p>一个异步创建节点的例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Executor executor = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">client.create()</span><br><span class="line">      .creatingParentsIfNeeded()</span><br><span class="line">      .withMode(CreateMode.EPHEMERAL)</span><br><span class="line">      .inBackground((curatorFramework, curatorEvent) -&gt; &#123;      System.out.println(String.format(<span class="string">"eventType:%s,resultCode:%s"</span>,curatorEvent.getType(),curatorEvent.getResultCode()));</span><br><span class="line">      &#125;,executor)</span><br><span class="line">      .forPath(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>注意：如果#inBackground()方法不指定executor，那么会默认使用Curator的EventThread去进行异步处理。</p><h2 id="Curator食谱-高级特性"><a href="#Curator食谱-高级特性" class="headerlink" title="Curator食谱(高级特性)"></a>Curator食谱(高级特性)</h2><p><strong>提醒：首先你必须添加curator-recipes依赖，下文仅仅对recipes一些特性的使用进行解释和举例，不打算进行源码级别的探讨</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重要提醒：强烈推荐使用ConnectionStateListener监控连接的状态，当连接状态为LOST，curator-recipes下的所有Api将会失效或者过期，尽管后面所有的例子都没有使用到ConnectionStateListener。</strong></p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>Zookeeper原生支持通过注册Watcher来进行事件监听，但是开发者需要反复注册(Watcher只能单次注册单次使用)。Cache是Curator中对事件监听的包装，可以看作是对事件监听的本地缓存视图，能够自动为开发者处理反复注册监听。Curator提供了三种Watcher(Cache)来监听结点的变化。</p><h4 id="Path-Cache"><a href="#Path-Cache" class="headerlink" title="Path Cache"></a>Path Cache</h4><p>Path Cache用来监控一个ZNode的子节点. 当一个子节点增加， 更新，删除时， Path Cache会改变它的状态， 会包含最新的子节点， 子节点的数据和状态，而状态的更变将通过PathChildrenCacheListener通知。</p><p>实际使用时会涉及到四个类：</p><ul><li>PathChildrenCache</li><li>PathChildrenCacheEvent</li><li>PathChildrenCacheListener</li><li>ChildData</li></ul><p>通过下面的构造函数创建Path Cache:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PathChildrenCache</span><span class="params">(CuratorFramework client, String path, <span class="keyword">boolean</span> cacheData)</span></span></span><br></pre></td></tr></table></figure><p>想使用cache，必须调用它的<code>start</code>方法，使用完后调用<code>close</code>方法。 可以设置StartMode来实现启动的模式，</p><p>StartMode有下面几种：</p><ol><li>NORMAL：正常初始化。</li><li>BUILD_INITIAL_CACHE：在调用<code>start()</code>之前会调用<code>rebuild()</code>。</li><li>POST_INITIALIZED_EVENT： 当Cache初始化数据后发送一个PathChildrenCacheEvent.Type#INITIALIZED事件</li></ol><p><code>public void addListener(PathChildrenCacheListener listener)</code>可以增加listener监听缓存的变化。</p><p><code>getCurrentData()</code>方法返回一个<code>List&lt;ChildData&gt;</code>对象，可以遍历所有的子节点。</p><p><strong>设置/更新、移除其实是使用client (CuratorFramework)来操作, 不通过PathChildrenCache操作：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathCacheDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/pathCache"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">PathChildrenCache cache = <span class="keyword">new</span> PathChildrenCache(client, PATH, <span class="keyword">true</span>);</span><br><span class="line">cache.start();</span><br><span class="line">PathChildrenCacheListener cacheListener = (client1, event) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"事件类型："</span> + event.getType());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != event.getData()) &#123;</span><br><span class="line">System.out.println(<span class="string">"节点数据："</span> + event.getData().getPath() + <span class="string">" = "</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">cache.getListenable().addListener(cacheListener);</span><br><span class="line">client.create().creatingParentsIfNeeded().forPath(<span class="string">"/example/pathCache/test01"</span>, <span class="string">"01"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">client.create().creatingParentsIfNeeded().forPath(<span class="string">"/example/pathCache/test02"</span>, <span class="string">"02"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">client.setData().forPath(<span class="string">"/example/pathCache/test01"</span>, <span class="string">"01_V2"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (ChildData data : cache.getCurrentData()) &#123;</span><br><span class="line">System.out.println(<span class="string">"getCurrentData:"</span> + data.getPath() + <span class="string">" = "</span> + <span class="keyword">new</span> String(data.getData()));</span><br><span class="line">&#125;</span><br><span class="line">client.delete().forPath(<span class="string">"/example/pathCache/test01"</span>);</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">client.delete().forPath(<span class="string">"/example/pathCache/test02"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">cache.close();</span><br><span class="line">client.close();</span><br><span class="line">System.out.println(<span class="string">"OK!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果new PathChildrenCache(client, PATH, true)中的参数cacheData值设置为false，则示例中的event.getData().getData()、data.getData()将返回null，cache将不会缓存节点数据。</p><p><strong>注意：</strong>示例中的Thread.sleep(10)可以注释掉，但是注释后事件监听的触发次数会不全，这可能与PathCache的实现原理有关，不能太过频繁的触发事件！</p><h4 id="Node-Cache"><a href="#Node-Cache" class="headerlink" title="Node Cache"></a>Node Cache</h4><p>Node Cache与Path Cache类似，Node Cache只是监听某一个特定的节点。它涉及到下面的三个类：</p><ul><li><code>NodeCache</code> - Node Cache实现类</li><li><code>NodeCacheListener</code> - 节点监听器</li><li><code>ChildData</code> - 节点数据</li></ul><p><strong>注意：</strong>使用cache，依然要调用它的<code>start()</code>方法，使用完后调用<code>close()</code>方法。</p><p>getCurrentData()将得到节点当前的状态，通过它的状态可以得到当前的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeCacheDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/cache"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">client.create().creatingParentsIfNeeded().forPath(PATH);</span><br><span class="line"><span class="keyword">final</span> NodeCache cache = <span class="keyword">new</span> NodeCache(client, PATH);</span><br><span class="line">NodeCacheListener listener = () -&gt; &#123;</span><br><span class="line">ChildData data = cache.getCurrentData();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != data) &#123;</span><br><span class="line">System.out.println(<span class="string">"节点数据："</span> + <span class="keyword">new</span> String(cache.getCurrentData().getData()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"节点被删除!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">cache.getListenable().addListener(listener);</span><br><span class="line">cache.start();</span><br><span class="line">client.setData().forPath(PATH, <span class="string">"01"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">client.setData().forPath(PATH, <span class="string">"02"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">client.delete().deletingChildrenIfNeeded().forPath(PATH);</span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">2</span>);</span><br><span class="line">cache.close();</span><br><span class="line">client.close();</span><br><span class="line">System.out.println(<span class="string">"OK!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>示例中的Thread.sleep(10)可以注释，但是注释后事件监听的触发次数会不全，这可能与NodeCache的实现原理有关，不能太过频繁的触发事件！</p><p><strong>注意：</strong>NodeCache只能监听一个节点的状态变化。</p><h4 id="Tree-Cache"><a href="#Tree-Cache" class="headerlink" title="Tree Cache"></a>Tree Cache</h4><p>Tree Cache可以监控整个树上的所有节点，类似于PathCache和NodeCache的组合，主要涉及到下面四个类：</p><ul><li>TreeCache - Tree Cache实现类</li><li>TreeCacheListener - 监听器类</li><li>TreeCacheEvent - 触发的事件类</li><li>ChildData - 节点数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeCacheDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/cache"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">client.create().creatingParentsIfNeeded().forPath(PATH);</span><br><span class="line">TreeCache cache = <span class="keyword">new</span> TreeCache(client, PATH);</span><br><span class="line">TreeCacheListener listener = (client1, event) -&gt;</span><br><span class="line">System.out.println(<span class="string">"事件类型："</span> + event.getType() +</span><br><span class="line"><span class="string">" | 路径："</span> + (<span class="keyword">null</span> != event.getData() ? event.getData().getPath() : <span class="keyword">null</span>));</span><br><span class="line">cache.getListenable().addListener(listener);</span><br><span class="line">cache.start();</span><br><span class="line">client.setData().forPath(PATH, <span class="string">"01"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">client.setData().forPath(PATH, <span class="string">"02"</span>.getBytes());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">client.delete().deletingChildrenIfNeeded().forPath(PATH);</span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">2</span>);</span><br><span class="line">cache.close();</span><br><span class="line">client.close();</span><br><span class="line">System.out.println(<span class="string">"OK!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在此示例中没有使用Thread.sleep(10)，但是事件触发次数也是正常的。</p><p><strong>注意：</strong>TreeCache在初始化(调用<code>start()</code>方法)的时候会回调<code>TreeCacheListener</code>实例一个事TreeCacheEvent，而回调的TreeCacheEvent对象的Type为INITIALIZED，ChildData为null，此时<code>event.getData().getPath()</code>很有可能导致空指针异常，这里应该主动处理并避免这种情况。</p><h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><p>在分布式计算中， <strong>leader elections</strong>是很重要的一个功能， 这个选举过程是这样子的： 指派一个进程作为组织者，将任务分发给各节点。 在任务开始前， 哪个节点都不知道谁是leader(领导者)或者coordinator(协调者). 当选举算法开始执行后， 每个节点最终会得到一个唯一的节点作为任务leader. 除此之外， 选举还经常会发生在leader意外宕机的情况下，新的leader要被选举出来。</p><p>在zookeeper集群中，leader负责写操作，然后通过Zab协议实现follower的同步，leader或者follower都可以处理读操作。</p><p>Curator 有两种leader选举的recipe,分别是<strong>LeaderSelector</strong>和<strong>LeaderLatch</strong>。</p><p>前者是所有存活的客户端不间断的轮流做Leader，大同社会。后者是一旦选举出Leader，除非有客户端挂掉重新触发选举，否则不会交出领导权。某党?</p><h4 id="LeaderLatch"><a href="#LeaderLatch" class="headerlink" title="LeaderLatch"></a>LeaderLatch</h4><p>LeaderLatch有两个构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaderLatch</span><span class="params">(CuratorFramework client, String latchPath)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaderLatch</span><span class="params">(CuratorFramework client, String latchPath,  String id)</span></span></span><br></pre></td></tr></table></figure><p>LeaderLatch的启动：</p><p><strong>leaderLatch.start( );</strong></p><p>一旦启动，LeaderLatch会和其它使用相同latch path的其它LeaderLatch交涉，然后其中一个最终会被选举为leader，可以通过<code>hasLeadership</code>方法查看LeaderLatch实例是否leader：</p><p><strong>leaderLatch.hasLeadership( );</strong> //返回true说明当前实例是leader</p><p>类似JDK的CountDownLatch， LeaderLatch在请求成为leadership会block(阻塞)，一旦不使用LeaderLatch了，必须调用<code>close</code>方法。 如果它是leader,会释放leadership， 其它的参与者将会选举一个leader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,EOFException</span></span><br><span class="line"><span class="function"><span class="comment">/*Causes the current thread to wait until this instance acquires leadership</span></span></span><br><span class="line"><span class="function"><span class="comment">unless the thread is interrupted or closed.*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout,TimeUnit unit)</span><span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><p><strong>异常处理：</strong> LeaderLatch实例可以增加ConnectionStateListener来监听网络连接问题。 当 SUSPENDED 或 LOST 时, leader不再认为自己还是leader。当LOST后连接重连后RECONNECTED,LeaderLatch会删除先前的ZNode然后重新创建一个。LeaderLatch用户必须考虑导致leadership丢失的连接问题。 强烈推荐你使用ConnectionStateListener。</p><p>一个LeaderLatch的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderLatchDemo</span> <span class="keyword">extends</span> <span class="title">BaseConnectionInfo</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> String PATH = <span class="string">"/francis/leader"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLIENT_QTY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;CuratorFramework&gt; clients = Lists.newArrayList();</span><br><span class="line">List&lt;LeaderLatch&gt; examples = Lists.newArrayList();</span><br><span class="line">TestingServer server=<span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CLIENT_QTY; i++) &#123;</span><br><span class="line">CuratorFramework client</span><br><span class="line">= CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">20000</span>, <span class="number">3</span>));</span><br><span class="line">clients.add(client);</span><br><span class="line">LeaderLatch latch = <span class="keyword">new</span> LeaderLatch(client, PATH, <span class="string">"Client #"</span> + i);</span><br><span class="line">latch.addListener(<span class="keyword">new</span> LeaderLatchListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"I am Leader"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"I am not Leader"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">examples.add(latch);</span><br><span class="line">client.start();</span><br><span class="line">latch.start();</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">LeaderLatch currentLeader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (LeaderLatch latch : examples) &#123;</span><br><span class="line"><span class="keyword">if</span> (latch.hasLeadership()) &#123;</span><br><span class="line">currentLeader = latch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"current leader is "</span> + currentLeader.getId());</span><br><span class="line">System.out.println(<span class="string">"release the leader "</span> + currentLeader.getId());</span><br><span class="line">currentLeader.close();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (LeaderLatch latch : examples) &#123;</span><br><span class="line"><span class="keyword">if</span> (latch.hasLeadership()) &#123;</span><br><span class="line">currentLeader = latch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"current leader is "</span> + currentLeader.getId());</span><br><span class="line">System.out.println(<span class="string">"release the leader "</span> + currentLeader.getId());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (LeaderLatch latch : examples) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != latch.getState())</span><br><span class="line">CloseableUtils.closeQuietly(latch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (CuratorFramework client : clients) &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以添加test module的依赖方便进行测试，不需要启动真实的zookeeper服务端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们创建了10个LeaderLatch，启动后它们中的一个会被选举为leader。 因为选举会花费一些时间，start后并不能马上就得到leader。<br>通过<code>hasLeadership</code>查看自己是否是leader， 如果是的话返回true。<br>可以通过<code>.getLeader().getId()</code>可以得到当前的leader的ID。<br>只能通过<code>close</code>释放当前的领导权。<br><code>await</code>是一个阻塞方法， 尝试获取leader地位，但是未必能上位。</p><h4 id="LeaderSelector"><a href="#LeaderSelector" class="headerlink" title="LeaderSelector"></a>LeaderSelector</h4><p>LeaderSelector使用的时候主要涉及下面几个类：</p><ul><li>LeaderSelector</li><li>LeaderSelectorListener</li><li>LeaderSelectorListenerAdapter</li><li>CancelLeadershipException</li></ul><p>核心类是LeaderSelector，它的构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaderSelector</span><span class="params">(CuratorFramework client, String mutexPath,LeaderSelectorListener listener)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaderSelector</span><span class="params">(CuratorFramework client, String mutexPath, ThreadFactory threadFactory, Executor executor, LeaderSelectorListener listener)</span></span></span><br></pre></td></tr></table></figure><p>类似LeaderLatch,LeaderSelector必须<code>start</code>: <code>leaderSelector.start();</code> 一旦启动，当实例取得领导权时你的listener的<code>takeLeadership()</code>方法被调用。而takeLeadership()方法只有领导权被释放时才返回。 当你不再使用LeaderSelector实例时，应该调用它的close方法。</p><p><strong>异常处理</strong> LeaderSelectorListener类继承ConnectionStateListener。LeaderSelector必须小心连接状态的改变。如果实例成为leader, 它应该响应SUSPENDED 或 LOST。 当 SUSPENDED 状态出现时， 实例必须假定在重新连接成功之前它可能不再是leader了。 如果LOST状态出现， 实例不再是leader， takeLeadership方法返回。</p><p><strong>重要</strong>: 推荐处理方式是当收到SUSPENDED 或 LOST时抛出CancelLeadershipException异常.。这会导致LeaderSelector实例中断并取消执行takeLeadership方法的异常.。这非常重要， 你必须考虑扩展LeaderSelectorListenerAdapter. LeaderSelectorListenerAdapter提供了推荐的处理逻辑。</p><p>下面的一个例子摘抄自官方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderSelectorAdapter</span> <span class="keyword">extends</span> <span class="title">LeaderSelectorListenerAdapter</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LeaderSelector leaderSelector;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger leaderCount = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaderSelectorAdapter</span><span class="params">(CuratorFramework client, String path, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">leaderSelector = <span class="keyword">new</span> LeaderSelector(client, path, <span class="keyword">this</span>);</span><br><span class="line">leaderSelector.autoRequeue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">leaderSelector.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">leaderSelector.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeLeadership</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> waitSeconds = (<span class="keyword">int</span>) (<span class="number">5</span> * Math.random()) + <span class="number">1</span>;</span><br><span class="line">System.out.println(name + <span class="string">" is now the leader. Waiting "</span> + waitSeconds + <span class="string">" seconds..."</span>);</span><br><span class="line">System.out.println(name + <span class="string">" has been leader "</span> + leaderCount.getAndIncrement() + <span class="string">" time(s) before."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(TimeUnit.SECONDS.toMillis(waitSeconds));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.err.println(name + <span class="string">" was interrupted."</span>);</span><br><span class="line">Thread.currentThread().interrupt();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">" relinquishing leadership.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在takeLeadership进行任务的分配等等，并且不要返回，如果你想要要此实例一直是leader的话可以加一个死循环。调用 <code>leaderSelector.autoRequeue();</code>保证在此实例释放领导权之后还可能获得领导权。 在这里我们使用AtomicInteger来记录此client获得领导权的次数， 它是”fair”， 每个client有平等的机会获得领导权。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderSelectorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> String PATH = <span class="string">"/francis/leader"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLIENT_QTY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;CuratorFramework&gt; clients = Lists.newArrayList();</span><br><span class="line">List&lt;LeaderSelectorAdapter&gt; examples = Lists.newArrayList();</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CLIENT_QTY; i++) &#123;</span><br><span class="line">CuratorFramework client</span><br><span class="line">= CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">20000</span>, <span class="number">3</span>));</span><br><span class="line">clients.add(client);</span><br><span class="line">LeaderSelectorAdapter selectorAdapter = <span class="keyword">new</span> LeaderSelectorAdapter(client, PATH, <span class="string">"Client #"</span> + i);</span><br><span class="line">examples.add(selectorAdapter);</span><br><span class="line">client.start();</span><br><span class="line">selectorAdapter.start();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Press enter/return to quit\n"</span>);</span><br><span class="line"><span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)).readLine();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Shutting down..."</span>);</span><br><span class="line"><span class="keyword">for</span> (LeaderSelectorAdapter exampleClient : examples) &#123;</span><br><span class="line">CloseableUtils.closeQuietly(exampleClient);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (CuratorFramework client : clients) &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">&#125;</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比可知，LeaderLatch必须调用<code>close()</code>方法才会释放领导权，而对于LeaderSelector，通过<code>LeaderSelectorListener</code>可以对领导权进行控制， 在适当的时候释放领导权，这样每个节点都有可能获得领导权。从而，LeaderSelector具有更好的灵活性和可控性，建议有LeaderElection应用场景下优先使用LeaderSelector。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><strong>提醒：</strong></p><p>1.推荐使用ConnectionStateListener监控连接的状态，因为当连接LOST时你不再拥有锁</p><p>2.分布式的锁全局同步， 这意味着任何一个时间点不会有两个客户端都拥有相同的锁。</p><h4 id="可重入共享锁—Shared-Reentrant-Lock"><a href="#可重入共享锁—Shared-Reentrant-Lock" class="headerlink" title="可重入共享锁—Shared Reentrant Lock"></a>可重入共享锁—Shared Reentrant Lock</h4><p><strong>Shared意味着锁是全局可见的</strong>， 客户端都可以请求锁。 Reentrant和JDK的ReentrantLock类似，即可重入， 意味着同一个客户端在拥有锁的同时，可以多次获取，不会被阻塞。 它是由类<code>InterProcessMutex</code>来实现。 它的构造函数为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMutex</span><span class="params">(CuratorFramework client, String path)</span></span></span><br></pre></td></tr></table></figure><p>通过<code>acquire()</code>获得锁，并提供超时机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Acquire the mutex - blocking until it's available. Note: the same thread can call acquire</span></span><br><span class="line"><span class="function">re-entrantly. Each call to acquire must be balanced by a call to <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time,TimeUnit unit)</span></span></span><br><span class="line"><span class="function">Acquire the mutex - blocks until it's available or the given time expires. Note: the same thread can call acquire re-entrantly. Each call to acquire that returns <span class="keyword">true</span> must be balanced by a call to <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">time - time to wait</span></span><br><span class="line"><span class="function">unit - time unit</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function"><span class="keyword">true</span> <span class="keyword">if</span> the mutex was acquired, <span class="keyword">false</span> <span class="keyword">if</span> not</span></span><br></pre></td></tr></table></figure><p>通过<code>release()</code>方法释放锁。 InterProcessMutex 实例可以重用。</p><p><strong>Revoking</strong> ZooKeeper recipes wiki定义了可协商的撤销机制。 为了撤销mutex, 调用下面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRevocable</span><span class="params">(RevocationListener&lt;T&gt; listener)</span></span></span><br><span class="line"><span class="function">将锁设为可撤销的. 当别的进程或线程想让你释放锁时Listener会被调用。</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">listener - the listener</span></span><br></pre></td></tr></table></figure><p>如果你请求撤销当前的锁， 调用<code>attemptRevoke()</code>方法,注意锁释放时<code>RevocationListener</code>将会回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">attemptRevoke</span><span class="params">(CuratorFramework client,String path)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">Utility to mark a lock <span class="keyword">for</span> revocation. Assuming that the lock has been registered</span></span><br><span class="line"><span class="function">with a RevocationListener, it will get called and the lock should be released. Note,</span></span><br><span class="line"><span class="function">however, that revocation is cooperative.</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">client - the client</span></span><br><span class="line"><span class="function">path - the path of the lock - usually from something like InterProcessMutex.<span class="title">getParticipantNodes</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p><strong>二次提醒：错误处理</strong> 还是强烈推荐你使用<code>ConnectionStateListener</code>处理连接状态的改变。 当连接LOST时你不再拥有锁。</p><p>首先让我们创建一个模拟的共享资源， 这个资源期望只能单线程的访问，否则会有并发问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeLimitedResource</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean inUse = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">// 真实环境中我们会在这里访问/维护一个共享的资源</span></span><br><span class="line"><span class="comment">//这个例子在使用锁的情况下不会非法并发异常IllegalStateException</span></span><br><span class="line"><span class="comment">//但是在无锁的情况由于sleep了一段时间，很容易抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (!inUse.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Needs to be used by one client at a time"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">3</span> * Math.random()));</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">inUse.set(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个<code>InterProcessMutexDemo</code>类， 它负责请求锁， 使用资源，释放锁这样一个完整的访问过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterProcessMutexDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> InterProcessMutex lock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FakeLimitedResource resource;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String clientName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMutexDemo</span><span class="params">(CuratorFramework client, String lockPath, FakeLimitedResource resource, String clientName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resource = resource;</span><br><span class="line"><span class="keyword">this</span>.clientName = clientName;</span><br><span class="line"><span class="keyword">this</span>.lock = <span class="keyword">new</span> InterProcessMutex(client, lockPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!lock.acquire(time, unit)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(clientName + <span class="string">" could not acquire the lock"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(clientName + <span class="string">" get the lock"</span>);</span><br><span class="line">resource.use(); <span class="comment">//access resource exclusively</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(clientName + <span class="string">" releasing the lock"</span>);</span><br><span class="line">lock.release(); <span class="comment">// always release the lock in a finally block</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPETITIONS = QTY * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/locks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> FakeLimitedResource resource = <span class="keyword">new</span> FakeLimitedResource();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">final</span> TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">Callable&lt;Void&gt; task = <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.start();</span><br><span class="line"><span class="keyword">final</span> InterProcessMutexDemo example = <span class="keyword">new</span> InterProcessMutexDemo(client, PATH, resource, <span class="string">"Client "</span> + index);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; REPETITIONS; ++j) &#123;</span><br><span class="line">example.doWork(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码也很简单，生成10个client， 每个client重复执行10次 请求锁–访问资源–释放锁的过程。每个client都在独立的线程中。 结果可以看到，锁是随机的被每个实例排他性的使用。</p><p>既然是可重用的，你可以在一个线程中多次调用<code>acquire()</code>,在线程拥有锁时它总是返回true。</p><p><strong>你不应该在多个线程中用同一个<code>InterProcessMutex</code></strong>， 你可以在每个线程中都生成一个新的InterProcessMutex实例，它们的path都一样，这样它们可以共享同一个锁。</p><h4 id="不可重入共享锁—Shared-Lock"><a href="#不可重入共享锁—Shared-Lock" class="headerlink" title="不可重入共享锁—Shared Lock"></a>不可重入共享锁—Shared Lock</h4><p>这个锁和上面的<code>InterProcessMutex</code>相比，就是少了Reentrant的功能，也就意味着它不能在同一个线程中重入。这个类是<code>InterProcessSemaphoreMutex</code>,使用方法和<code>InterProcessMutex</code>类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterProcessSemaphoreMutexDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> InterProcessSemaphoreMutex lock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FakeLimitedResource resource;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String clientName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessSemaphoreMutexDemo</span><span class="params">(CuratorFramework client, String lockPath, FakeLimitedResource resource, String clientName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resource = resource;</span><br><span class="line"><span class="keyword">this</span>.clientName = clientName;</span><br><span class="line"><span class="keyword">this</span>.lock = <span class="keyword">new</span> InterProcessSemaphoreMutex(client, lockPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!lock.acquire(time, unit))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(clientName + <span class="string">" 不能得到互斥锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(clientName + <span class="string">" 已获取到互斥锁"</span>);</span><br><span class="line"><span class="keyword">if</span> (!lock.acquire(time, unit))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(clientName + <span class="string">" 不能得到互斥锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(clientName + <span class="string">" 再次获取到互斥锁"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(clientName + <span class="string">" get the lock"</span>);</span><br><span class="line">resource.use(); <span class="comment">//access resource exclusively</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(clientName + <span class="string">" releasing the lock"</span>);</span><br><span class="line">lock.release(); <span class="comment">// always release the lock in a finally block</span></span><br><span class="line">lock.release(); <span class="comment">// 获取锁几次 释放锁也要几次</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPETITIONS = QTY * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/locks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> FakeLimitedResource resource = <span class="keyword">new</span> FakeLimitedResource();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">final</span> TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">Callable&lt;Void&gt; task = <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.start();</span><br><span class="line"><span class="keyword">final</span> InterProcessSemaphoreMutexDemo example = <span class="keyword">new</span> InterProcessSemaphoreMutexDemo(client, PATH, resource, <span class="string">"Client "</span> + index);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; REPETITIONS; ++j) &#123;</span><br><span class="line">example.doWork(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现，有且只有一个client成功获取第一个锁(第一个<code>acquire()</code>方法返回true)，然后它自己阻塞在第二个<code>acquire()</code>方法，获取第二个锁超时；其他所有的客户端都阻塞在第一个<code>acquire()</code>方法超时并且抛出异常。</p><p>这样也就验证了<code>InterProcessSemaphoreMutex</code>实现的锁是不可重入的。</p><h4 id="可重入读写锁—Shared-Reentrant-Read-Write-Lock"><a href="#可重入读写锁—Shared-Reentrant-Read-Write-Lock" class="headerlink" title="可重入读写锁—Shared Reentrant Read Write Lock"></a>可重入读写锁—Shared Reentrant Read Write Lock</h4><p>类似JDK的<strong>ReentrantReadWriteLock</strong>。一个读写锁管理一对相关的锁。一个负责读操作，另外一个负责写操作。读操作在写锁没被使用时可同时由多个进程使用，而写锁在使用时不允许读(阻塞)。</p><p>此锁是可重入的。<strong>一个拥有写锁的线程可重入读锁，但是读锁却不能进入写锁</strong>。这也意味着<strong>写锁可以降级成读锁， 比如请求写锁 —&gt;请求读锁—&gt;释放读锁 —-&gt;释放写锁</strong>。从读锁升级成写锁是不行的。</p><p>可重入读写锁主要由两个类实现：<code>InterProcessReadWriteLock</code>、<code>InterProcessMutex</code>。使用时首先创建一个<code>InterProcessReadWriteLock</code>实例，然后再根据你的需求得到读锁或者写锁，读写锁的类型是<code>InterProcessMutex</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InterProcessReadWriteLock lock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InterProcessMutex readLock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InterProcessMutex writeLock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FakeLimitedResource resource;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String clientName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLockDemo</span><span class="params">(CuratorFramework client, String lockPath, FakeLimitedResource resource, String clientName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resource = resource;</span><br><span class="line"><span class="keyword">this</span>.clientName = clientName;</span><br><span class="line">lock = <span class="keyword">new</span> InterProcessReadWriteLock(client, lockPath);</span><br><span class="line">readLock = lock.readLock();</span><br><span class="line">writeLock = lock.writeLock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 注意只能先得到写锁再得到读锁，不能反过来！！！</span></span><br><span class="line"><span class="keyword">if</span> (!writeLock.acquire(time, unit)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(clientName + <span class="string">" 不能得到写锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(clientName + <span class="string">" 已得到写锁"</span>);</span><br><span class="line"><span class="keyword">if</span> (!readLock.acquire(time, unit)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(clientName + <span class="string">" 不能得到读锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(clientName + <span class="string">" 已得到读锁"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resource.use(); <span class="comment">// 使用资源</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(clientName + <span class="string">" 释放读写锁"</span>);</span><br><span class="line">readLock.release();</span><br><span class="line">writeLock.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPETITIONS = QTY ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/locks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> FakeLimitedResource resource = <span class="keyword">new</span> FakeLimitedResource();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">final</span> TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">Callable&lt;Void&gt; task = <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.start();</span><br><span class="line"><span class="keyword">final</span> ReentrantReadWriteLockDemo example = <span class="keyword">new</span> ReentrantReadWriteLockDemo(client, PATH, resource, <span class="string">"Client "</span> + index);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; REPETITIONS; ++j) &#123;</span><br><span class="line">example.doWork(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号量—Shared-Semaphore"><a href="#信号量—Shared-Semaphore" class="headerlink" title="信号量—Shared Semaphore"></a>信号量—Shared Semaphore</h4><p>一个计数的信号量类似JDK的Semaphore。 JDK中Semaphore维护的一组许可(<strong>permits</strong>)，而Curator中称之为租约(<strong>Lease</strong>)。 有两种方式可以决定semaphore的最大租约数。第一种方式是用户给定path并且指定最大LeaseSize。第二种方式用户给定path并且使用<code>SharedCountReader</code>类。<strong>如果不使用SharedCountReader, 必须保证所有实例在多进程中使用相同的(最大)租约数量,否则有可能出现A进程中的实例持有最大租约数量为10，但是在B进程中持有的最大租约数量为20，此时租约的意义就失效了。</strong></p><p>这次调用<code>acquire()</code>会返回一个租约对象。 客户端必须在finally中close这些租约对象，否则这些租约会丢失掉。 但是， 但是，如果客户端session由于某种原因比如crash丢掉， 那么这些客户端持有的租约会自动close， 这样其它客户端可以继续使用这些租约。 租约还可以通过下面的方式返还：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnAll</span><span class="params">(Collection&lt;Lease&gt; leases)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLease</span><span class="params">(Lease lease)</span></span></span><br></pre></td></tr></table></figure><p>注意你可以一次性请求多个租约，如果Semaphore当前的租约不够，则请求线程会被阻塞。 同时还提供了超时的重载方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Lease <span class="title">acquire</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;Lease&gt; <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> qty)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Lease <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;Lease&gt; <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> qty, <span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br></pre></td></tr></table></figure><p>Shared Semaphore使用的主要类包括下面几个：</p><ul><li><code>InterProcessSemaphoreV2</code></li><li><code>Lease</code></li><li><code>SharedCountReader</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterProcessSemaphoreDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LEASE = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/locks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">FakeLimitedResource resource = <span class="keyword">new</span> FakeLimitedResource();</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line"></span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line"></span><br><span class="line">InterProcessSemaphoreV2 semaphore = <span class="keyword">new</span> InterProcessSemaphoreV2(client, PATH, MAX_LEASE);</span><br><span class="line">Collection&lt;Lease&gt; leases = semaphore.acquire(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"get "</span> + leases.size() + <span class="string">" leases"</span>);</span><br><span class="line">Lease lease = semaphore.acquire();</span><br><span class="line">System.out.println(<span class="string">"get another lease"</span>);</span><br><span class="line"></span><br><span class="line">resource.use();</span><br><span class="line"></span><br><span class="line">Collection&lt;Lease&gt; leases2 = semaphore.acquire(<span class="number">5</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(<span class="string">"Should timeout and acquire return "</span> + leases2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"return one lease"</span>);</span><br><span class="line">semaphore.returnLease(lease);</span><br><span class="line">System.out.println(<span class="string">"return another 5 leases"</span>);</span><br><span class="line">semaphore.returnAll(leases);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们先获得了5个租约， 最后我们把它还给了semaphore。 接着请求了一个租约，因为semaphore还有5个租约，所以请求可以满足，返回一个租约，还剩4个租约。 然后再请求一个租约，因为租约不够，<strong>阻塞到超时，还是没能满足，返回结果为null(租约不足会阻塞到超时，然后返回null，不会主动抛出异常；如果不设置超时时间，会一致阻塞)。</strong></p><p>上面说讲的锁都是公平锁(fair)。 总ZooKeeper的角度看， 每个客户端都按照请求的顺序获得锁，不存在非公平的抢占的情况。</p><h4 id="多共享锁对象-—Multi-Shared-Lock"><a href="#多共享锁对象-—Multi-Shared-Lock" class="headerlink" title="多共享锁对象 —Multi Shared Lock"></a>多共享锁对象 —Multi Shared Lock</h4><p>Multi Shared Lock是一个锁的容器。 当调用<code>acquire()</code>， 所有的锁都会被<code>acquire()</code>，如果请求失败，所有的锁都会被release。 同样调用release时所有的锁都被release(<strong>失败被忽略</strong>)。 基本上，它就是组锁的代表，在它上面的请求释放操作都会传递给它包含的所有的锁。</p><p>主要涉及两个类：</p><ul><li><code>InterProcessMultiLock</code></li><li><code>InterProcessLock</code></li></ul><p>它的构造函数需要包含的锁的集合，或者一组ZooKeeper的path。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMultiLock</span><span class="params">(List&lt;InterProcessLock&gt; locks)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMultiLock</span><span class="params">(CuratorFramework client, List&lt;String&gt; paths)</span></span></span><br></pre></td></tr></table></figure><p>用法和Shared Lock相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiSharedLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH1 = <span class="string">"/examples/locks1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH2 = <span class="string">"/examples/locks2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">FakeLimitedResource resource = <span class="keyword">new</span> FakeLimitedResource();</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line"></span><br><span class="line">InterProcessLock lock1 = <span class="keyword">new</span> InterProcessMutex(client, PATH1);</span><br><span class="line">InterProcessLock lock2 = <span class="keyword">new</span> InterProcessSemaphoreMutex(client, PATH2);</span><br><span class="line"></span><br><span class="line">InterProcessMultiLock lock = <span class="keyword">new</span> InterProcessMultiLock(Arrays.asList(lock1, lock2));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lock.acquire(<span class="number">10</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"could not acquire the lock"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"has got all lock"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"has got lock1: "</span> + lock1.isAcquiredInThisProcess());</span><br><span class="line">System.out.println(<span class="string">"has got lock2: "</span> + lock2.isAcquiredInThisProcess());</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resource.use(); <span class="comment">//access resource exclusively</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"releasing the lock"</span>);</span><br><span class="line">lock.release(); <span class="comment">// always release the lock in a finally block</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"has got lock1: "</span> + lock1.isAcquiredInThisProcess());</span><br><span class="line">System.out.println(<span class="string">"has got lock2: "</span> + lock2.isAcquiredInThisProcess());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个<code>InterProcessMultiLock</code>， 包含一个重入锁和一个非重入锁。 调用<code>acquire()</code>后可以看到线程同时拥有了这两个锁。 调用<code>release()</code>看到这两个锁都被释放了。</p><p><strong>最后再重申一次， 强烈推荐使用ConnectionStateListener监控连接的状态，当连接状态为LOST，锁将会丢失。</strong></p><h3 id="分布式计数器"><a href="#分布式计数器" class="headerlink" title="分布式计数器"></a>分布式计数器</h3><p>顾名思义，计数器是用来计数的, 利用ZooKeeper可以实现一个集群共享的计数器。 只要使用相同的path就可以得到最新的计数器值， 这是由ZooKeeper的一致性保证的。Curator有两个计数器， 一个是用int来计数(<code>SharedCount</code>)，一个用long来计数(<code>DistributedAtomicLong</code>)。</p><h4 id="分布式int计数器—SharedCount"><a href="#分布式int计数器—SharedCount" class="headerlink" title="分布式int计数器—SharedCount"></a>分布式int计数器—SharedCount</h4><p>这个类使用int类型来计数。 主要涉及三个类。</p><ul><li>SharedCount</li><li>SharedCountReader</li><li>SharedCountListener</li></ul><p><code>SharedCount</code>代表计数器， 可以为它增加一个<code>SharedCountListener</code>，当计数器改变时此Listener可以监听到改变的事件，而<code>SharedCountReader</code>可以读取到最新的值， 包括字面值和带版本信息的值VersionedValue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedCounterDemo</span> <span class="keyword">implements</span> <span class="title">SharedCountListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">SharedCounterDemo example = <span class="keyword">new</span> SharedCounterDemo();</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line"></span><br><span class="line">SharedCount baseCount = <span class="keyword">new</span> SharedCount(client, PATH, <span class="number">0</span>);</span><br><span class="line">baseCount.addListener(example);</span><br><span class="line">baseCount.start();</span><br><span class="line"></span><br><span class="line">List&lt;SharedCount&gt; examples = Lists.newArrayList();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> SharedCount count = <span class="keyword">new</span> SharedCount(client, PATH, <span class="number">0</span>);</span><br><span class="line">examples.add(count);</span><br><span class="line">Callable&lt;Void&gt; task = () -&gt; &#123;</span><br><span class="line">count.start();</span><br><span class="line">Thread.sleep(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">System.out.println(<span class="string">"Increment:"</span> + count.trySetCount(count.getVersionedValue(), count.getCount() + rand.nextInt(<span class="number">10</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line">examples.get(i).close();</span><br><span class="line">&#125;</span><br><span class="line">baseCount.close();</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework arg0, ConnectionState arg1)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"State changed: "</span> + arg1.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countHasChanged</span><span class="params">(SharedCountReader sharedCount, <span class="keyword">int</span> newCount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Counter's value is changed to "</span> + newCount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>baseCount</code>来监听计数值(<code>addListener</code>方法来添加SharedCountListener )。 任意的SharedCount， 只要使用相同的path，都可以得到这个计数值。 然后我们使用5个线程为计数值增加一个10以内的随机数。相同的path的SharedCount对计数值进行更改，将会回调给<code>baseCount</code>的SharedCountListener。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count.trySetCount(count.getVersionedValue(), count.getCount() + rand.nextInt(10))</span><br></pre></td></tr></table></figure><p>这里我们使用<code>trySetCount</code>去设置计数器。 <strong>第一个参数提供当前的VersionedValue,如果期间其它client更新了此计数值， 你的更新可能不成功， 但是这时你的client更新了最新的值，所以失败了你可以尝试再更新一次。 而<code>setCount</code>是强制更新计数器的值</strong>。</p><p>注意计数器必须<code>start</code>,使用完之后必须调用<code>close</code>关闭它。</p><p>强烈推荐使用<code>ConnectionStateListener</code>。 在本例中<code>SharedCountListener</code>扩展<code>ConnectionStateListener</code>。</p><h4 id="分布式long计数器—DistributedAtomicLong"><a href="#分布式long计数器—DistributedAtomicLong" class="headerlink" title="分布式long计数器—DistributedAtomicLong"></a>分布式long计数器—DistributedAtomicLong</h4><p>再看一个Long类型的计数器。 除了计数的范围比<code>SharedCount</code>大了之外， 它首先尝试使用乐观锁的方式设置计数器， 如果不成功(比如期间计数器已经被其它client更新了)， 它使用<code>InterProcessMutex</code>方式来更新计数值。</p><p>可以从它的内部实现<code>DistributedAtomicValue.trySet()</code>中看出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AtomicValue&lt;<span class="keyword">byte</span>[]&gt;   trySet(MakeValue makeValue) <span class="keyword">throws</span> Exception</span><br><span class="line"> &#123;</span><br><span class="line">     MutableAtomicValue&lt;<span class="keyword">byte</span>[]&gt;  result = <span class="keyword">new</span> MutableAtomicValue&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">     tryOptimistic(result, makeValue);</span><br><span class="line">     <span class="keyword">if</span> ( !result.succeeded() &amp;&amp; (mutex != <span class="keyword">null</span>) )</span><br><span class="line">     &#123;</span><br><span class="line">         tryWithMutex(result, makeValue);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此计数器有一系列的操作：</p><ul><li>get(): 获取当前值</li><li>increment()： 加一</li><li>decrement(): 减一</li><li>add()： 增加特定的值</li><li>subtract(): 减去特定的值</li><li>trySet(): 尝试设置计数值</li><li>forceSet(): 强制设置计数值</li></ul><p>你<strong>必须</strong>检查返回结果的<code>succeeded()</code>， 它代表此操作是否成功。 如果操作成功， <code>preValue()</code>代表操作前的值， <code>postValue()</code>代表操作后的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedAtomicLongDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception </span>&#123;</span><br><span class="line">List&lt;DistributedAtomicLong&gt; examples = Lists.newArrayList();</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> DistributedAtomicLong count = <span class="keyword">new</span> DistributedAtomicLong(client, PATH, <span class="keyword">new</span> RetryNTimes(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">examples.add(count);</span><br><span class="line">Callable&lt;Void&gt; task = () -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AtomicValue&lt;Long&gt; value = count.increment();</span><br><span class="line">System.out.println(<span class="string">"succeed: "</span> + value.succeeded());</span><br><span class="line"><span class="keyword">if</span> (value.succeeded())</span><br><span class="line">System.out.println(<span class="string">"Increment: from "</span> + value.preValue() + <span class="string">" to "</span> + value.postValue());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式队列"><a href="#分布式队列" class="headerlink" title="分布式队列"></a>分布式队列</h3><p>使用Curator也可以简化Ephemeral Node (<strong>临时节点</strong>)的操作。Curator也提供ZK Recipe的分布式队列实现。 利用ZK的 PERSISTENTS_EQUENTIAL节点， 可以保证放入到队列中的项目是按照顺序排队的。 如果单一的消费者从队列中取数据， 那么它是先入先出的，这也是队列的特点。 如果你严格要求顺序，你就的使用单一的消费者，可以使用Leader选举只让Leader作为唯一的消费者。</p><p>但是， 根据Netflix的Curator作者所说， ZooKeeper真心不适合做Queue，或者说ZK没有实现一个好的Queue，详细内容可以看 <a href="https://cwiki.apache.org/confluence/display/CURATOR/TN4" target="_blank" rel="noopener">Tech Note 4</a>， 原因有五：</p><ol><li>ZK有1MB 的传输限制。 实践中ZNode必须相对较小，而队列包含成千上万的消息，非常的大。</li><li>如果有很多节点，ZK启动时相当的慢。 而使用queue会导致好多ZNode. 你需要显著增大 initLimit 和 syncLimit.</li><li>ZNode很大的时候很难清理。Netflix不得不创建了一个专门的程序做这事。</li><li>当很大量的包含成千上万的子节点的ZNode时， ZK的性能变得不好</li><li>ZK的数据库完全放在内存中。 大量的Queue意味着会占用很多的内存空间。</li></ol><p>尽管如此， Curator还是创建了各种Queue的实现。 如果Queue的数据量不太多，数据量不太大的情况下，酌情考虑，还是可以使用的。</p><h4 id="分布式队列—DistributedQueue"><a href="#分布式队列—DistributedQueue" class="headerlink" title="分布式队列—DistributedQueue"></a>分布式队列—DistributedQueue</h4><p>DistributedQueue是最普通的一种队列。 它设计以下四个类：</p><ul><li>QueueBuilder - 创建队列使用QueueBuilder,它也是其它队列的创建类</li><li>QueueConsumer - 队列中的消息消费者接口</li><li>QueueSerializer - 队列消息序列化和反序列化接口，提供了对队列中的对象的序列化和反序列化</li><li>DistributedQueue - 队列实现类</li></ul><p>QueueConsumer是消费者，它可以接收队列的数据。处理队列中的数据的代码逻辑可以放在QueueConsumer.consumeMessage()中。</p><p>正常情况下先将消息从队列中移除，再交给消费者消费。但这是两个步骤，不是原子的。可以调用Builder的lockPath()消费者加锁，当消费者消费数据时持有锁，这样其它消费者不能消费此消息。如果消费失败或者进程死掉，消息可以交给其它进程。这会带来一点性能的损失。最好还是单消费者模式使用队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework clientA = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">clientA.start();</span><br><span class="line">CuratorFramework clientB = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">clientB.start();</span><br><span class="line">DistributedQueue&lt;String&gt; queueA;</span><br><span class="line">QueueBuilder&lt;String&gt; builderA = QueueBuilder.builder(clientA, createQueueConsumer(<span class="string">"A"</span>), createQueueSerializer(), PATH);</span><br><span class="line">queueA = builderA.buildQueue();</span><br><span class="line">queueA.start();</span><br><span class="line"></span><br><span class="line">DistributedQueue&lt;String&gt; queueB;</span><br><span class="line">QueueBuilder&lt;String&gt; builderB = QueueBuilder.builder(clientB, createQueueConsumer(<span class="string">"B"</span>), createQueueSerializer(), PATH);</span><br><span class="line">queueB = builderB.buildQueue();</span><br><span class="line">queueB.start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">queueA.put(<span class="string">" test-A-"</span> + i);</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">queueB.put(<span class="string">" test-B-"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);<span class="comment">// 等待消息消费完成</span></span><br><span class="line">queueB.close();</span><br><span class="line">queueA.close();</span><br><span class="line">clientB.close();</span><br><span class="line">clientA.close();</span><br><span class="line">System.out.println(<span class="string">"OK!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列消息序列化实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueSerializer&lt;String&gt; <span class="title">createQueueSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueSerializer&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String item) &#123;</span><br><span class="line"><span class="keyword">return</span> item.getBytes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义队列消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueConsumer&lt;String&gt; <span class="title">createQueueConsumer</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueConsumer&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"连接状态改变: "</span> + newState.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"消费消息("</span> + name + <span class="string">"): "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中定义了两个分布式队列和两个消费者，因为PATH是相同的，会存在消费者抢占消费消息的情况。</p><h4 id="带Id的分布式队列—DistributedIdQueue"><a href="#带Id的分布式队列—DistributedIdQueue" class="headerlink" title="带Id的分布式队列—DistributedIdQueue"></a>带Id的分布式队列—DistributedIdQueue</h4><p>DistributedIdQueue和上面的队列类似，<strong>但是可以为队列中的每一个元素设置一个ID</strong>。 可以通过ID把队列中任意的元素移除。 它涉及几个类：</p><ul><li>QueueBuilder</li><li>QueueConsumer</li><li>QueueSerializer</li><li>DistributedQueue</li></ul><p>通过下面方法创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.buildIdQueue()</span><br></pre></td></tr></table></figure><p>放入元素时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.put(aMessage, messageId);</span><br></pre></td></tr></table></figure><p>移除元素时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int numberRemoved &#x3D; queue.remove(messageId);</span><br></pre></td></tr></table></figure><p>在这个例子中， 有些元素还没有被消费者消费前就移除了，这样消费者不会收到删除的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedIdQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">DistributedIdQueue&lt;String&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.getCuratorListenable().addListener((client1, event) -&gt; System.out.println(<span class="string">"CuratorEvent: "</span> + event.getType().name()));</span><br><span class="line"></span><br><span class="line">client.start();</span><br><span class="line">QueueConsumer&lt;String&gt; consumer = createQueueConsumer();</span><br><span class="line">QueueBuilder&lt;String&gt; builder = QueueBuilder.builder(client, consumer, createQueueSerializer(), PATH);</span><br><span class="line">queue = builder.buildIdQueue();</span><br><span class="line">queue.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">queue.put(<span class="string">" test-"</span> + i, <span class="string">"Id"</span> + i);</span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">15</span> * Math.random()));</span><br><span class="line">queue.remove(<span class="string">"Id"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(queue);</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueSerializer&lt;String&gt; <span class="title">createQueueSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueSerializer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String item) &#123;</span><br><span class="line"><span class="keyword">return</span> item.getBytes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueConsumer&lt;String&gt; <span class="title">createQueueConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueConsumer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"connection new state: "</span> + newState.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"consume one message: "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先级分布式队列—DistributedPriorityQueue"><a href="#优先级分布式队列—DistributedPriorityQueue" class="headerlink" title="优先级分布式队列—DistributedPriorityQueue"></a>优先级分布式队列—DistributedPriorityQueue</h4><p>优先级队列对队列中的元素按照优先级进行排序。 <strong>Priority越小， 元素越靠前， 越先被消费掉</strong>。 它涉及下面几个类：</p><ul><li>QueueBuilder</li><li>QueueConsumer</li><li>QueueSerializer</li><li>DistributedPriorityQueue</li></ul><p>通过builder.buildPriorityQueue(minItemsBeforeRefresh)方法创建。 当优先级队列得到元素增删消息时，它会暂停处理当前的元素队列，然后刷新队列。minItemsBeforeRefresh指定刷新前当前活动的队列的最小数量。 主要设置你的程序可以容忍的不排序的最小值。</p><p>放入队列时需要指定优先级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.put(aMessage, priority);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedPriorityQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">DistributedPriorityQueue&lt;String&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.getCuratorListenable().addListener((client1, event) -&gt; System.out.println(<span class="string">"CuratorEvent: "</span> + event.getType().name()));</span><br><span class="line"></span><br><span class="line">client.start();</span><br><span class="line">QueueConsumer&lt;String&gt; consumer = createQueueConsumer();</span><br><span class="line">QueueBuilder&lt;String&gt; builder = QueueBuilder.builder(client, consumer, createQueueSerializer(), PATH);</span><br><span class="line">queue = builder.buildPriorityQueue(<span class="number">0</span>);</span><br><span class="line">queue.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> priority = (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">"test-"</span> + i + <span class="string">" priority:"</span> + priority);</span><br><span class="line">queue.put(<span class="string">"test-"</span> + i, priority);</span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">50</span> * Math.random()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(queue);</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueSerializer&lt;String&gt; <span class="title">createQueueSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueSerializer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String item) &#123;</span><br><span class="line"><span class="keyword">return</span> item.getBytes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueConsumer&lt;String&gt; <span class="title">createQueueConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueConsumer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"connection new state: "</span> + newState.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"consume one message: "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候你可能会有错觉，优先级设置并没有起效。那是因为优先级是对于队列积压的元素而言，如果消费速度过快有可能出现在后一个元素入队操作之前前一个元素已经被消费，这种情况下DistributedPriorityQueue会退化为DistributedQueue。</p><h4 id="分布式延迟队列—DistributedDelayQueue"><a href="#分布式延迟队列—DistributedDelayQueue" class="headerlink" title="分布式延迟队列—DistributedDelayQueue"></a>分布式延迟队列—DistributedDelayQueue</h4><p>JDK中也有DelayQueue，不知道你是否熟悉。 DistributedDelayQueue也提供了类似的功能， 元素有个delay值， 消费者隔一段时间才能收到元素。 涉及到下面四个类。</p><ul><li>QueueBuilder</li><li>QueueConsumer</li><li>QueueSerializer</li><li>DistributedDelayQueue</li></ul><p>通过下面的语句创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueueBuilder&lt;MessageType&gt;    builder &#x3D; QueueBuilder.builder(client, consumer, serializer, path);</span><br><span class="line">... more builder method calls as needed ...</span><br><span class="line">DistributedDelayQueue&lt;MessageType&gt; queue &#x3D; builder.buildDelayQueue();</span><br></pre></td></tr></table></figure><p>放入元素时可以指定<code>delayUntilEpoch</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.put(aMessage, delayUntilEpoch);</span><br></pre></td></tr></table></figure><p>注意<code>delayUntilEpoch</code>不是离现在的一个时间间隔， 比如20毫秒，而是未来的一个时间戳，如 System.currentTimeMillis() + 10秒。 如果delayUntilEpoch的时间已经过去，消息会立刻被消费者接收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedDelayQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">DistributedDelayQueue&lt;String&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.getCuratorListenable().addListener((client1, event) -&gt; System.out.println(<span class="string">"CuratorEvent: "</span> + event.getType().name()));</span><br><span class="line"></span><br><span class="line">client.start();</span><br><span class="line">QueueConsumer&lt;String&gt; consumer = createQueueConsumer();</span><br><span class="line">QueueBuilder&lt;String&gt; builder = QueueBuilder.builder(client, consumer, createQueueSerializer(), PATH);</span><br><span class="line">queue = builder.buildDelayQueue();</span><br><span class="line">queue.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">queue.put(<span class="string">"test-"</span> + i, System.currentTimeMillis() + <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Date().getTime() + <span class="string">": already put all items"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(queue);</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueSerializer&lt;String&gt; <span class="title">createQueueSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueSerializer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String item) &#123;</span><br><span class="line"><span class="keyword">return</span> item.getBytes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> QueueConsumer&lt;String&gt; <span class="title">createQueueConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QueueConsumer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"connection new state: "</span> + newState.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Date().getTime() + <span class="string">": consume one message: "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleDistributedQueue"><a href="#SimpleDistributedQueue" class="headerlink" title="SimpleDistributedQueue"></a>SimpleDistributedQueue</h4><p>前面虽然实现了各种队列，但是你注意到没有，这些队列并没有实现类似JDK一样的接口。 <code>SimpleDistributedQueue</code>提供了和JDK基本一致的接口(但是没有实现Queue接口)。 创建很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDistributedQueue</span><span class="params">(CuratorFramework client,String path)</span></span></span><br></pre></td></tr></table></figure><p>增加元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean offer(byte[] data) throws Exception</span><br></pre></td></tr></table></figure><p>删除元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] take() <span class="keyword">throws</span> Exception</span><br></pre></td></tr></table></figure><p>另外还提供了其它方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] peek() <span class="keyword">throws</span> Exception</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] poll(<span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> Exception</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] poll() <span class="keyword">throws</span> Exception</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] remove() <span class="keyword">throws</span> Exception</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] element() <span class="keyword">throws</span> Exception</span><br></pre></td></tr></table></figure><p>没有<code>add</code>方法， 多了<code>take</code>方法。</p><p><code>take</code>方法在成功返回之前会被阻塞。 而<code>poll</code>方法在队列为空时直接返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDistributedQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/example/queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TestingServer server = <span class="keyword">new</span> TestingServer();</span><br><span class="line">CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">SimpleDistributedQueue queue;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.getCuratorListenable().addListener((client1, event) -&gt; System.out.println(<span class="string">"CuratorEvent: "</span> + event.getType().name()));</span><br><span class="line">client.start();</span><br><span class="line">queue = <span class="keyword">new</span> SimpleDistributedQueue(client, PATH);</span><br><span class="line">Producer producer = <span class="keyword">new</span> Producer(queue);</span><br><span class="line">Consumer consumer = <span class="keyword">new</span> Consumer(queue);</span><br><span class="line"><span class="keyword">new</span> Thread(producer, <span class="string">"producer"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(consumer, <span class="string">"consumer"</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">CloseableUtils.closeQuietly(client);</span><br><span class="line">CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SimpleDistributedQueue queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SimpleDistributedQueue queue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.queue = queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = queue.offer((<span class="string">"zjc-"</span> + i).getBytes());</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"发送一条消息成功："</span> + <span class="string">"zjc-"</span> + i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"发送一条消息失败："</span> + <span class="string">"zjc-"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SimpleDistributedQueue queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SimpleDistributedQueue queue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.queue = queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] datas = queue.take();</span><br><span class="line">System.out.println(<span class="string">"消费一条消息成功："</span> + <span class="keyword">new</span> String(datas, <span class="string">"UTF-8"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是实际上发送了100条消息，消费完第一条之后，后面的消息无法消费，目前没找到原因。查看一下官方文档推荐的demo使用下面几个Api：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Creating a SimpleDistributedQueue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDistributedQueue</span><span class="params">(CuratorFramework client,</span></span></span><br><span class="line"><span class="function"><span class="params">                              String path)</span></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">client - the client</span></span><br><span class="line"><span class="function">path - path to store queue nodes</span></span><br><span class="line"><span class="function">Add to the queue</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(<span class="keyword">byte</span>[] data)</span></span></span><br><span class="line"><span class="function">             <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">Inserts data into queue.</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">data - the data</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function"><span class="keyword">true</span> <span class="keyword">if</span> data was successfully added</span></span><br><span class="line"><span class="function">Take from the queue</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">take</span><span class="params">()</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">Removes the head of the queue and returns it, blocks until it succeeds.</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">The former head of the queue</span></span><br><span class="line"><span class="function">NOTE: see the Javadoc <span class="keyword">for</span> additional methods</span></span><br></pre></td></tr></table></figure><p>但是实际使用发现还是存在消费阻塞问题。</p><h3 id="分布式屏障—Barrier"><a href="#分布式屏障—Barrier" class="headerlink" title="分布式屏障—Barrier"></a>分布式屏障—Barrier</h3><p>分布式Barrier是这样一个类： 它会阻塞所有节点上的等待进程，直到某一个被满足， 然后所有的节点继续进行。</p><p>比如赛马比赛中， 等赛马陆续来到起跑线前。 一声令下，所有的赛马都飞奔而出。</p><h4 id="DistributedBarrier"><a href="#DistributedBarrier" class="headerlink" title="DistributedBarrier"></a>DistributedBarrier</h4><p><code>DistributedBarrier</code>类实现了栅栏的功能。 它的构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DistributedBarrier</span><span class="params">(CuratorFramework client, String barrierPath)</span></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">client - client</span></span><br><span class="line"><span class="function">barrierPath - path to use as the barrier</span></span><br></pre></td></tr></table></figure><p>首先你需要设置栅栏，它将阻塞在它上面等待的线程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setBarrier();</span><br></pre></td></tr></table></figure><p>然后需要阻塞的线程调用方法等待放行条件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void waitOnBarrier()</span><br></pre></td></tr></table></figure><p>当条件满足时，移除栅栏，所有等待的线程将继续执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeBarrier();</span><br></pre></td></tr></table></figure><p><strong>异常处理</strong> DistributedBarrier 会监控连接状态，当连接断掉时<code>waitOnBarrier()</code>方法会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedBarrierDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/barrier"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line">DistributedBarrier controlBarrier = <span class="keyword">new</span> DistributedBarrier(client, PATH);</span><br><span class="line">controlBarrier.setBarrier();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> DistributedBarrier barrier = <span class="keyword">new</span> DistributedBarrier(client, PATH);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">Callable&lt;Void&gt; task = () -&gt; &#123;</span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">3</span> * Math.random()));</span><br><span class="line">System.out.println(<span class="string">"Client #"</span> + index + <span class="string">" waits on Barrier"</span>);</span><br><span class="line">barrier.waitOnBarrier();</span><br><span class="line">System.out.println(<span class="string">"Client #"</span> + index + <span class="string">" begins"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">System.out.println(<span class="string">"all Barrier instances should wait the condition"</span>);</span><br><span class="line">controlBarrier.removeBarrier();</span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子创建了<code>controlBarrier</code>来设置栅栏和移除栅栏。 我们创建了5个线程，在此Barrier上等待。 最后移除栅栏后所有的线程才继续执行。</p><p>如果你开始不设置栅栏，所有的线程就不会阻塞住。</p><h4 id="双栅栏—DistributedDoubleBarrier"><a href="#双栅栏—DistributedDoubleBarrier" class="headerlink" title="双栅栏—DistributedDoubleBarrier"></a>双栅栏—DistributedDoubleBarrier</h4><p>双栅栏允许客户端在计算的开始和结束时同步。当足够的进程加入到双栅栏时，进程开始计算， 当计算完成时，离开栅栏。 双栅栏类是<code>DistributedDoubleBarrier</code>。 构造函数为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DistributedDoubleBarrier</span><span class="params">(CuratorFramework client,</span></span></span><br><span class="line"><span class="function"><span class="params">                                String barrierPath,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> memberQty)</span></span></span><br><span class="line"><span class="function">Creates the barrier abstraction. memberQty is the number of members in the barrier. When <span class="title">enter</span><span class="params">()</span> is called, it blocks until</span></span><br><span class="line"><span class="function">all members have entered. When <span class="title">leave</span><span class="params">()</span> is called, it blocks until all members have left.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">client - the client</span></span><br><span class="line"><span class="function">barrierPath - path to use</span></span><br><span class="line"><span class="function">memberQty - the number of members in the barrier</span></span><br></pre></td></tr></table></figure><p><code>memberQty</code>是成员数量，当<code>enter()</code>方法被调用时，成员被阻塞，直到所有的成员都调用了<code>enter()</code>。 当<code>leave()</code>方法被调用时，它也阻塞调用线程，直到所有的成员都调用了<code>leave()</code>。 就像百米赛跑比赛， 发令枪响， 所有的运动员开始跑，等所有的运动员跑过终点线，比赛才结束。</p><p>DistributedDoubleBarrier会监控连接状态，当连接断掉时<code>enter()</code>和<code>leave()</code>方法会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedDoubleBarrierDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"/examples/barrier"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> (TestingServer server = <span class="keyword">new</span> TestingServer()) &#123;</span><br><span class="line">CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">client.start();</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(QTY);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; ++i) &#123;</span><br><span class="line"><span class="keyword">final</span> DistributedDoubleBarrier barrier = <span class="keyword">new</span> DistributedDoubleBarrier(client, PATH, QTY);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">Callable&lt;Void&gt; task = () -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">3</span> * Math.random()));</span><br><span class="line">System.out.println(<span class="string">"Client #"</span> + index + <span class="string">" enters"</span>);</span><br><span class="line">barrier.enter();</span><br><span class="line">System.out.println(<span class="string">"Client #"</span> + index + <span class="string">" begins"</span>);</span><br><span class="line">Thread.sleep((<span class="keyword">long</span>) (<span class="number">3000</span> * Math.random()));</span><br><span class="line">barrier.leave();</span><br><span class="line">System.out.println(<span class="string">"Client #"</span> + index + <span class="string">" left"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service.shutdown();</span><br><span class="line">service.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Curator </tag>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Curator实现Zookeeper注册中心（官方文档翻译）</title>
      <link href="/posts/7de3e7aa/"/>
      <url>/posts/7de3e7aa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><h2 id="什么是服务发现？"><a href="#什么是服务发现？" class="headerlink" title="什么是服务发现？"></a>什么是服务发现？</h2><p>在SOA /分布式系统中，服务需要相互查找。 也就是说，Web服务可能需要找到缓存服务，等等。DNS可以用于此目的，但是对于不断变化的服务而言，它还远远不够灵活。 服务发现系统提供了以下机制：</p><ul><li>服务以记录其可用性</li><li>查找特定服务的单个实例</li><li>通知服务实例何时更改</li></ul><h2 id="Curator-服务发现"><a href="#Curator-服务发现" class="headerlink" title="Curator 服务发现"></a>Curator 服务发现</h2><h3 id="服务实例-ServiceInstance"><a href="#服务实例-ServiceInstance" class="headerlink" title="服务实例 ( ServiceInstance )"></a>服务实例 ( ServiceInstance )</h3><p>服务实例由类 <code>ServiceInstance</code> 表示。 <code>ServiceInstance</code> 具有名称，ID，地址，端口和/或SSL端口，以及可选的有效负载（用户定义）。 <code>ServiceInstance</code>通过以下方式序列化并存储在 <code>ZooKeeper</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">base path</span><br><span class="line">       |_______ service A name</span><br><span class="line">                    |__________ instance 1 id --&gt; (serialized ServiceInstance)</span><br><span class="line">                    |__________ instance 2 id --&gt; (serialized ServiceInstance)</span><br><span class="line">                    |__________ ...</span><br><span class="line">       |_______ service B name</span><br><span class="line">                    |__________ instance 1 id --&gt; (serialized ServiceInstance)</span><br><span class="line">                    |__________ instance 2 id --&gt; (serialized ServiceInstance)</span><br><span class="line">                    |__________ ...</span><br><span class="line">       |_______ ...</span><br></pre></td></tr></table></figure><h3 id="服务提供者（-ServiceProvider-）"><a href="#服务提供者（-ServiceProvider-）" class="headerlink" title="服务提供者（ ServiceProvider ）"></a>服务提供者（ ServiceProvider ）</h3><p>主要的抽象类是 <code>ServiceProvider</code> 。 它封装了特定命名服务的发现服务以及提供者策略。 提供者策略是一种用于为给定服务从一组实例中选择一个实例的方案。 共有三种捆绑策略：<code>Round Robin</code>，<code>Random</code>和<code>Sticky</code>（始终选择相同的策略）。</p><p>通过使用<code>ServiceProviderBuilder</code>分配<code>ServiceProvider</code>。 您可以从<code>ServiceDiscovery</code>获得<code>ServiceProviderBuilder</code>（请参见下文）。<code>ServiceProviderBuilder</code>允许您设置服务名称和其他几个可选值。</p><p>必须通过调用 <code>start()</code> 来启动<code>ServiceProvider</code>。 完成后，您应该调用 <code>close()</code>。 <code>ServiceProvider</code>中的唯一方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServiceInstance&lt;T&gt; <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                            <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">原文：Return an instance <span class="keyword">for</span> a single use. IMPORTANT: users should not hold on to the instance</span></span><br><span class="line"><span class="function">译文：返回一个实例供单次使用。 重要说明：用户不应坚持使用实例</span></span><br><span class="line"><span class="function">原文：returned. A fresh instance should always be retrieved.</span></span><br><span class="line"><span class="function">译文：returned. 应始终检索一个新实例。</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">原文：the instance to use</span></span><br><span class="line"><span class="function">译文：要使用的实例</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用<code>Curator 2.x（Zookeeper 3.4.x）</code>时，必须由应用程序缓存并重用服务提供者对象。 由于无法在<code>Zookeeper 3.4.x</code>中删除由服务提供者添加的内部<code>NamespaceWatcher</code>对象，因此为每个对相同服务的调用创建一个新的服务提供者最终将耗尽<code>JVM</code>的内存。</p><h3 id="服务发现（ServiceDiscovery）"><a href="#服务发现（ServiceDiscovery）" class="headerlink" title="服务发现（ServiceDiscovery）"></a>服务发现（ServiceDiscovery）</h3><p>为了分配 <code>ServiceProvider</code>，您必须具有 <code>ServiceDiscovery</code>。 它由 <code>ServiceDiscoveryBuilder</code> 创建。</p><p>您必须在对象上调用 <code>start()</code>，并在完成后调用 <code>close()</code>。</p><h3 id="实例稳定性（Instance-Stability）"><a href="#实例稳定性（Instance-Stability）" class="headerlink" title="实例稳定性（Instance Stability）"></a>实例稳定性（Instance Stability）</h3><p>如果特定实例发生<code>I/O</code>错误等，则应调用传入该实例的<code>ServiceProvider.noteError()</code>。 <code>ServiceProvider</code>将暂时认为有错误的实例为“关闭”。 关闭实例的阈值和超时是通过<code>DownInstancePolicy</code>设置的，可以将其传递给<code>ServiceProviderBuilder</code>（注意：如果未指定默认值，则使用默认的<code>DownInstancePolicy</code>）。</p><hr><h3 id="Low-Level-APIs"><a href="#Low-Level-APIs" class="headerlink" title="Low Level APIs"></a>Low Level APIs</h3><p>对于大多数目的，<code>ServiceProvider API</code> 就是您所需要的。 但是，对于更细粒度的控制，可以使用以下方法：</p><h4 id="注册-取消注册服务（Registering-Unregistering-Services）"><a href="#注册-取消注册服务（Registering-Unregistering-Services）" class="headerlink" title="注册/取消注册服务（Registering/Unregistering Services）"></a>注册/取消注册服务（Registering/Unregistering Services）</h4><p>通常，您将应用程序的服务描述符传递给<code>ServiceDiscovery</code>构造函数，它将自动注册/取消注册。 但是，如果您需要手动执行此操作，请使用以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(ServiceInstance&lt;T&gt; service)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">原文：Register/re-register/update a service instance</span></span><br><span class="line"><span class="function">译文：注册/重新注册/更新服务实例</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">原文：service - service to add</span></span><br><span class="line"><span class="function">译文：服务-要添加的服务</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterService</span><span class="params">(ServiceInstance&lt;T&gt; service)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">原文：Unregister/remove a service instance</span></span><br><span class="line"><span class="function">译文：取消注册/删除服务实例</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">service - the service</span></span><br></pre></td></tr></table></figure><h4 id="查询服务（Querying-for-Services）"><a href="#查询服务（Querying-for-Services）" class="headerlink" title="查询服务（Querying for Services）"></a>查询服务（Querying for Services）</h4><p>您可以查询所有服务名称，特定服务的所有实例或单个服务实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">queryForNames</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                              <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">原文：Return the names of all known services</span></span><br><span class="line"><span class="function">译文：返回所有已知服务的名称</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">原文：list of service names</span></span><br><span class="line"><span class="function">译文：服务名称列表</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;ServiceInstance&lt;T&gt;&gt; queryForInstances(String name)</span><br><span class="line">                                            <span class="keyword">throws</span> Exception</span><br><span class="line">原文：Return all known instances <span class="keyword">for</span> the given service</span><br><span class="line">译文：返回给定服务的所有已知实例</span><br><span class="line">Parameters:</span><br><span class="line">原文：name - name of the service</span><br><span class="line">译文：名称-服务名称</span><br><span class="line">Returns:</span><br><span class="line">原文：<span class="function">list of <span class="title">instances</span> <span class="params">(or an empty list)</span></span></span><br><span class="line"><span class="function">译文：实例列表（或空列表）</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServiceInstance&lt;T&gt; <span class="title">queryForInstance</span><span class="params">(String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         String id)</span></span></span><br><span class="line"><span class="function">                                 <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">原文：Return a service instance POJO</span></span><br><span class="line"><span class="function">译文：返回服务实例POJO</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">原文：name - name of the service</span></span><br><span class="line"><span class="function">译文：名称-服务名称</span></span><br><span class="line"><span class="function">原文：id - ID of the instance</span></span><br><span class="line"><span class="function">译文：id-实例的ID</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">原文：the instance or <span class="keyword">null</span> <span class="keyword">if</span> not found</span></span><br><span class="line"><span class="function">译文：实例；如果未找到，则为<span class="keyword">null</span></span></span><br></pre></td></tr></table></figure><h4 id="服务缓存（Service-Cache）"><a href="#服务缓存（Service-Cache）" class="headerlink" title="服务缓存（Service Cache）"></a>服务缓存（Service Cache）</h4><p>以上每个查询方法都直接调用<code>ZooKeeper</code>。 如果您不仅仅需要偶尔查询服务，还可以使用<code>ServiceCache</code>。 它将特定服务的实例列表缓存在内存中。 它使用监视程序来使列表保持最新。</p><p>您可以通过<code>ServiceDiscovery.serviceCacheBuilder()</code>返回的构建器分配<code>ServiceCache</code>。 必须通过调用<code>start()</code>来启动<code>ServiceCache</code>对象，完成后，您应该调用<code>close()</code>。 您可以通过调用以下命令获取服务的当前已知实例列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;ServiceInstance&lt;T&gt;&gt; getInstances()</span><br><span class="line">Return the current list of instances. NOTE: there is no guarantee of freshness. This is merely the last known list of instances. However, the list is updated via a ZooKeeper watcher so it should be fresh within a window of a second or two.</span><br><span class="line">返回当前实例列表。 注意：不能保证新鲜度。 这只是实例的最后已知列表。 但是，该列表是通过ZooKeeper监视程序更新的，因此应在一两秒钟的时间内刷新。</span><br></pre></td></tr></table></figure><p><code>ServiceCache</code>支持一个侦听器，当Watcher更新实例列表时，该侦听器会收到通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener for changes to a service cache</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceCacheListener</span> <span class="keyword">extends</span> <span class="title">ConnectionStateListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when the cache has changed (instances added/deleted, etc.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务发现Server（Service-Discovery-Server）"><a href="#服务发现Server（Service-Discovery-Server）" class="headerlink" title="服务发现Server（Service Discovery Server）"></a>服务发现Server（Service Discovery Server）</h1><h2 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h2><p><code>Curator Service Discovery</code>在<code>Maven Central</code>中以其自己的软件包提供：<code>curator-x-discovery-server</code></p><h2 id="简介（Description）"><a href="#简介（Description）" class="headerlink" title="简介（Description）"></a>简介（Description）</h2><p>服务发现服务器将非<code>Java</code>或旧版应用程序与<code>Curator Service Discovery</code>桥接。 它公开了<code>RESTful Web</code>服务以注册，删除，查询等服务。</p><p>服务发现服务器提供了<code>JAX-RS</code>组件，可以将其合并到您选择的容器（Tomcat，Jetty等）中。 您还可以选择任何<code>JAX-RS</code>提供程序（Jersey，RESTEasy等）。</p><h2 id="部署服务器（Deploying-the-Server）"><a href="#部署服务器（Deploying-the-Server）" class="headerlink" title="部署服务器（Deploying the Server）"></a>部署服务器（Deploying the Server）</h2><p>服务器必须与<code>JAX-RS</code>实现（Jersey等）和容器（Tomcat，Jetty等）结合使用。</p><p>需要注入几个单例：</p><ul><li>ServiceDiscovery</li><li>DiscoveryContext</li><li>JsonServiceInstanceMarshaller</li><li>JsonServiceInstancesMarshaller</li><li>JsonServiceNamesMarshaller</li></ul><p>另外，必须注入<code>JAX-RS Resource</code>类。 由于大多数<code>JAX-RS</code>实现的编写方式，您必须创建一个具体的类，以使用您的有效负载类型对此进行扩展。 具体的类应具有您要使用的基本路径。 因为<code>JAX-RS</code>实现可以为每个请求创建资源的新实例，所以您的具体类必须使用上下文解析器访问<code>DiscoveryContext</code>。 或者，如果您使用的是<code>IoC</code>框架，则可以通过这种方式访问它。</p><p>这是没有有效负载（即 <code>Void payload</code>）的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResource</span> <span class="keyword">extends</span> <span class="title">DiscoveryResource</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyResource</span><span class="params">(@Context ContextResolver&lt;DiscoveryContext&lt;Void&gt;&gt; resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// note: this may not work with all JAX-RS implementations</span></span><br><span class="line">    <span class="keyword">super</span>(resolver.getContext(DiscoveryContext<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>客户端必须进行适当的REST调用才能注册自己并发送定期心跳。 他们还可以通过REST调用找到服务：</p><h3 id="putService"><a href="#putService" class="headerlink" title="putService"></a>putService</h3><p><strong>Method:</strong> PUT<br><strong>Path:</strong> v1/service/{name}/{id}<br><strong>Request Entity:</strong> ServiceInstance<br><strong>Response Entity:</strong> n/a<br><strong>Description:</strong> {name} is the service name, {id} is the instance id. The request entity is a <em>ServiceInstance</em>. This method registers a service instance. If the ServiceType is STATIC, the instance is registered only for the pre-defined period (defined in the DiscoveryContext). STATIC services must call putService at least once per period. PERMANENT services are registered until they are manually deleted.</p><h3 id="removeService"><a href="#removeService" class="headerlink" title="removeService"></a>removeService</h3><p><strong>Method:</strong> DELETE<br><strong>Path:</strong> v1/service/{name}/{id}<br><strong>Request Entity:</strong> n/a<br><strong>Response Entity:</strong> n/a<br><strong>Description:</strong> {name} is the service name, {id} is the instance id. The specified service is deleted/unregistered.</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p><strong>Method:</strong> GET<br><strong>Path:</strong> v1/service/{name}/{id}<br><strong>Request Entity:</strong> n/a<br><strong>Response Entity:</strong> ServiceInstance<br><strong>Description:</strong> {name} is the service name, {id} is the instance id. Returns the complete <em>ServiceInstance</em> for the specified service. 404 is returned if not found.</p><h3 id="getAllNames"><a href="#getAllNames" class="headerlink" title="getAllNames"></a>getAllNames</h3><p><strong>Method:</strong> GET<br><strong>Path:</strong> v1/service<br><strong>Request Entity:</strong> n/a<br><strong>Response Entity:</strong> ServiceNames<br><strong>Description:</strong> Returns all currently registered service names.</p><h3 id="getAll"><a href="#getAll" class="headerlink" title="getAll"></a>getAll</h3><p><strong>Method:</strong> GET<br><strong>Path:</strong> v1/service/{name}<br><strong>Request Entity:</strong> n/a<br><strong>Response Entity:</strong> ServiceInstances<br><strong>Description:</strong> {name} is the service name. Returns all service instances for the named service.</p><h3 id="getAny"><a href="#getAny" class="headerlink" title="getAny"></a>getAny</h3><p><strong>Method:</strong> GET<br><strong>Path:</strong> v1/anyservice/{name}<br><strong>Request Entity:</strong> n/a<br><strong>Response Entity:</strong> ServiceInstance<br><strong>Description:</strong> {name} is the service name. Return a random instance from the given service or 404.</p><h3 id="JSON-specs"><a href="#JSON-specs" class="headerlink" title="JSON specs"></a>JSON specs</h3><p>The JSON specifications for the REST entities are documented here: <a href="https://git-wip-us.apache.org/repos/asf?p=curator.git;a=blob_plain;f=curator-x-discovery-server/README.txt;hb=HEAD" target="_blank" rel="noopener">https://git-wip-us.apache.org/repos/asf?p=curator.git;a=blob_plain;f=curator-x-discovery-server/README.txt;hb=HEAD</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> Curator </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中检查本地系统上的开放端口列表的方法</title>
      <link href="/posts/a10ff556/"/>
      <url>/posts/a10ff556/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Linux中检查本地系统上的开放端口列表的方法"><a href="#Linux中检查本地系统上的开放端口列表的方法" class="headerlink" title="Linux中检查本地系统上的开放端口列表的方法"></a>Linux中检查本地系统上的开放端口列表的方法</h1><p>在 Linux 中 如果想要查看本地系统上的开放端口，一般使用以下几种命令进行查看</p><p>本文转载自 <a href="https://linux.cn/" target="_blank" rel="noopener">Linux中国</a> 。原文链接：<a href="https://linux.cn/article-10736-1.html" target="_blank" rel="noopener">Linux中检查本地系统上的开放端口列表的方法</a></p><p>你可以使用以下四个命令来完成这个工作。这些命令是非常出名的并被 Linux 管理员广泛使用。</p><p><code>netstat</code>：netstat (“network statistics”) 是一个显示网络连接（进和出）相关信息命令行工具，例如：路由表, 伪装连接,多点传送成员和网络端口。</p><p><code>nmap</code>：Nmap (“Network Mapper”) 是一个网络探索与安全审计的开源工具。它旨在快速扫描大型网络。</p><p><code>ss</code>： ss 被用于转储套接字统计信息。它也可以类似 netstat 使用。相比其他工具它可以展示更多的TCP状态信息。</p><p><code>lsof</code>： lsof 是 List Open File 的缩写. 它用于输出被某个进程打开的所有文件。</p><h2 id="如何使用-Linux-命令-netstat-检查系统中的开放端口列表"><a href="#如何使用-Linux-命令-netstat-检查系统中的开放端口列表" class="headerlink" title="如何使用 Linux 命令 netstat 检查系统中的开放端口列表"></a>如何使用 Linux 命令 netstat 检查系统中的开放端口列表</h2><p>它可以列出所有的 tcp、udp 连接和所有的 unix 套接字连接。</p><p>它用于发现发现网络问题，确定网络连接数量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">netstat -tplugn</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:25              0.0.0.0:*               LISTEN      2038/master</span><br><span class="line">tcp        0      0 127.0.0.1:199           0.0.0.0:*               LISTEN      1396/snmpd</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1398/httpd</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1388/sshd</span><br><span class="line">tcp6       0      0 :::25                   :::*                    LISTEN      2038/master</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1388/sshd</span><br><span class="line">udp        0      0 0.0.0.0:39136           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:56130           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:40105           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:11584           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:30105           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:50656           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:1632            0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:28265           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:40764           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 10.90.56.21:123         0.0.0.0:*                           895/ntpd</span><br><span class="line">udp        0      0 127.0.0.1:123           0.0.0.0:*                           895/ntpd</span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           895/ntpd</span><br><span class="line">udp        0      0 0.0.0.0:53390           0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:161             0.0.0.0:*                           1396/snmpd</span><br><span class="line">udp6       0      0 :::123                  :::*                                895/ntpd</span><br><span class="line">IPv6/IPv4 Group Memberships</span><br><span class="line">Interface       RefCnt Group</span><br><span class="line">--------------- ------ ---------------------</span><br><span class="line">lo              1      224.0.0.1</span><br><span class="line">eth0            1      224.0.0.1</span><br><span class="line">lo              1      ff02::1</span><br><span class="line">lo              1      ff01::1</span><br><span class="line">eth0            1      ff02::1</span><br><span class="line">eth0            1      ff01::1</span><br></pre></td></tr></table></figure><p>也可以使用下边的命令来检查特定的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># netstat -tplugn | grep :22</span></span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1388/sshd</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1388/sshd</span><br></pre></td></tr></table></figure><h2 id="如何使用-Linux-命令-ss-检查系统中的开放端口列表？"><a href="#如何使用-Linux-命令-ss-检查系统中的开放端口列表？" class="headerlink" title="如何使用 Linux 命令 ss 检查系统中的开放端口列表？"></a>如何使用 Linux 命令 ss 检查系统中的开放端口列表？</h2><p><code>ss</code> 被用于转储套接字统计信息。它也可以显示类似 <code>netstat</code> 的信息。相比其他工具它可以展示更多的 TCP 状态信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ss -lntu</span></span><br><span class="line">Netid  State      Recv-Q Send-Q                     Local Address:Port                                    Peer Address:Port</span><br><span class="line">udp    UNCONN     0      0                                      *:39136                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:56130                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:40105                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:11584                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:30105                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:50656                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:1632                                               *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:28265                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:40764                                              *:*</span><br><span class="line">udp    UNCONN     0      0                            10.90.56.21:123                                                *:*</span><br><span class="line">udp    UNCONN     0      0                              127.0.0.1:123                                                *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:123                                                *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:53390                                              *:*</span><br><span class="line">udp    UNCONN     0      0                                      *:161                                                *:*</span><br><span class="line">udp    UNCONN     0      0                                     :::123                                               :::*</span><br><span class="line">tcp    LISTEN     0      100                                    *:25                                                 *:*</span><br><span class="line">tcp    LISTEN     0      128                            127.0.0.1:199                                                *:*</span><br><span class="line">tcp    LISTEN     0      128                                    *:80                                                 *:*</span><br><span class="line">tcp    LISTEN     0      128                                    *:22                                                 *:*</span><br><span class="line">tcp    LISTEN     0      100                                   :::25                                                :::*</span><br><span class="line">tcp    LISTEN     0      128                                   :::22                                                :::*</span><br></pre></td></tr></table></figure><p>也可以使用下面的命令检查特定的端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ss -lntu | grep <span class="string">':25'</span></span></span><br><span class="line">tcp    LISTEN     0      100       *:25                    *:*</span><br><span class="line">tcp    LISTEN     0      100      :::25                   :::*</span><br></pre></td></tr></table></figure><h2 id="如何使用-Linux-命令-nmap-检查系统中的开放端口列表？"><a href="#如何使用-Linux-命令-nmap-检查系统中的开放端口列表？" class="headerlink" title="如何使用 Linux 命令 nmap 检查系统中的开放端口列表？"></a>如何使用 Linux 命令 nmap 检查系统中的开放端口列表？</h2><p>虽然 <code>Nmap</code> 通常用于安全审计，但许多系统和网络管理员发现它对于日常工作也非常有用，例如网络资产清点、管理服务升级计划以及监控主机或服务正常运行时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTU -O localhost</span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2019-03-20 09:57 CDT</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.00028s latency).</span><br><span class="line">Other addresses for localhost (not scanned): 127.0.0.1</span><br><span class="line">Not shown: 1994 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">25/tcp  open  smtp</span><br><span class="line">80/tcp  open  http</span><br><span class="line">199/tcp open  smux</span><br><span class="line">123/udp open  ntp</span><br><span class="line">161/udp open  snmp</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.7 - 3.9</span><br><span class="line">Network Distance: 0 hops</span><br><span class="line">OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 1.93 seconds</span><br></pre></td></tr></table></figure><p>你也可以使用下面的命令检查特定的端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sTU -O localhost | grep 123</span><br><span class="line">123/udp open  ntp</span><br></pre></td></tr></table></figure><h2 id="如何使用-Linux-命令-lsof-检查系统中的开放端口列表？"><a href="#如何使用-Linux-命令-lsof-检查系统中的开放端口列表？" class="headerlink" title="如何使用 Linux 命令 lsof 检查系统中的开放端口列表？"></a>如何使用 Linux 命令 lsof 检查系统中的开放端口列表？</h2><p>它向你显示系统上打开的文件列表以及打开它们的进程。还会向你显示与文件相关的其他信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> lsof -i</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ntpd      895    ntp   16u  IPv4   18481      0t0  UDP *:ntp</span><br><span class="line">ntpd      895    ntp   17u  IPv6   18482      0t0  UDP *:ntp</span><br><span class="line">ntpd      895    ntp   18u  IPv4   18487      0t0  UDP localhost:ntp</span><br><span class="line">ntpd      895    ntp   20u  IPv4   23020      0t0  UDP CentOS7.2daygeek.com:ntp</span><br><span class="line">sshd     1388   root    3u  IPv4   20065      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd     1388   root    4u  IPv6   20067      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">snmpd    1396   root    6u  IPv4   22739      0t0  UDP *:snmp</span><br><span class="line">snmpd    1396   root    7u  IPv4   22729      0t0  UDP *:40105</span><br><span class="line">snmpd    1396   root    8u  IPv4   22730      0t0  UDP *:50656</span><br><span class="line">snmpd    1396   root    9u  IPv4   22731      0t0  UDP *:pammratc</span><br><span class="line">snmpd    1396   root   10u  IPv4   22732      0t0  UDP *:30105</span><br><span class="line">snmpd    1396   root   11u  IPv4   22733      0t0  UDP *:40764</span><br><span class="line">snmpd    1396   root   12u  IPv4   22734      0t0  UDP *:53390</span><br><span class="line">snmpd    1396   root   13u  IPv4   22735      0t0  UDP *:28265</span><br><span class="line">snmpd    1396   root   14u  IPv4   22736      0t0  UDP *:11584</span><br><span class="line">snmpd    1396   root   15u  IPv4   22737      0t0  UDP *:39136</span><br><span class="line">snmpd    1396   root   16u  IPv4   22738      0t0  UDP *:56130</span><br><span class="line">snmpd    1396   root   17u  IPv4   22740      0t0  TCP localhost:smux (LISTEN)</span><br><span class="line">httpd    1398   root    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">master   2038   root   13u  IPv4   21638      0t0  TCP *:smtp (LISTEN)</span><br><span class="line">master   2038   root   14u  IPv6   21639      0t0  TCP *:smtp (LISTEN)</span><br><span class="line">sshd     9052   root    3u  IPv4 1419955      0t0  TCP CentOS7.2daygeek.com:ssh-&gt;Ubuntu18-04.2daygeek.com:11408 (ESTABLISHED)</span><br><span class="line">httpd   13371 apache    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13372 apache    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13373 apache    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13374 apache    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13375 apache    3u  IPv4   20337      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure><p>也可以使用下面的命令检查特定的端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> lsof -i:80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">httpd    1398   root    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13371 apache    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13372 apache    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13373 apache    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13374 apache    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   13375 apache    3u  IPv4  20337      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 查询语法</title>
      <link href="/posts/ccf4c8c4/"/>
      <url>/posts/ccf4c8c4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ElasticSearch-查询语法"><a href="#ElasticSearch-查询语法" class="headerlink" title="ElasticSearch 查询语法"></a>ElasticSearch 查询语法</h1><h2 id="SearchTimeout"><a href="#SearchTimeout" class="headerlink" title="SearchTimeout"></a>SearchTimeout</h2><ol><li>设置： 默认没有 timeout ， 如果设置了 timeout ，那么会执行 timeout 机制</li><li>timeout 机制：假设用户查询结果有 1W 条数据，但是需要 10’’ 才能查询完毕，但是用户设置了 1s的 timeout, 那么不管当前一共查询到了多少数据，都会在 1s 后 ES 将停止查询，并返回当前数据。</li><li>用法：GET /_search?timeout=1s/ms/m</li></ol><h2 id="ES-常用查询"><a href="#ES-常用查询" class="headerlink" title="ES 常用查询"></a>ES 常用查询</h2><ol><li><p>Query String:</p><ol><li>查询所有：GET /product/_search</li><li>带参数：GET /product/_search?q=name:xiaomi</li><li>分页：GET /product/_search?from=0&amp;size=2&amp;sort=price:asc</li></ol></li><li><p>Query DSL:</p><ol><li><p>match_all: 匹配所有</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "match_all": &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>match： name 中包含  <code>nfc</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "match":&#123;</span><br><span class="line">      "name": "nfc"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sort: 按照价格倒序进行排序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match":&#123;</span><br><span class="line">      "name": "nfc"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "sort":[</span><br><span class="line">    &#123;</span><br><span class="line">      "price": "desc"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>multi_match: 根据多个字段查询一个关键词，name 和 desc 中包含 <code>nfc</code> 的doc</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "multi_match": &#123;</span><br><span class="line">      "query": "nfc",</span><br><span class="line">      "fields": ["name","desc"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "sort"[</span><br><span class="line">    &#123;</span><br><span class="line">      "price": "desc"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>_source 元数据：想要查询多个字段，例子中为只查询 <code>name</code> 和 <code>price</code> 字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "name": "nfc"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "_source": ["name","price"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页 （deep-paging）: 查询第一页 （每页两条数据）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_all": &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "from": 0,</span><br><span class="line">  "size": 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Full-text queries: 全文检索</p><ol><li><p>query-term: 不会被分词</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "name": "nfc"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>match 和 term 区别</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "name": "nfc phone" 这里因为没有分词，所以查询没有结果</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;"term": &#123;"name": "nfc"&#125;&#125;,</span><br><span class="line">        &#123;"term": &#123;"name": "phone"&#125;&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "terms": &#123;</span><br><span class="line">      "name": ["nfc","phone"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "name": "nfc phone"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全文检索</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "name": "xiaomi nfc zhineng phone"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证分词</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "standard",</span><br><span class="line">  "text": "xiaomi nfc zhineng phone"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="4"><li><p>Phrase search：短语搜索，和全文检索相反， <code>nfc phone</code> 会作为一个短语去检索</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_phrase": &#123;</span><br><span class="line">      "name": "nfc_phone"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Query and filter: 查询和过滤</p><ol><li><p>bool :  可以组合多个查询条件，bool 查询也是采用 <code>more_matches_is_better</code> 的机制，因此满足 <code>must</code> 和 <code>should</code> 子句的文档将会合并起来计算分值。</p><ul><li><p>must: 必须满足</p><p>子句（查询）必须出现在匹配的文档中，并将有助于得分。</p></li><li><p><strong>filter: 过滤器 不计算相关度分数，cache</strong> ※</p><p>子句（查询）必须出现在匹配的文档中，但是不像 <code>must</code> 查询的分数将被忽略。Filter 子句在 <code>filter</code> 上下文中执行，这意味着计分被忽略，并且子句被考虑用于缓存。</p></li><li><p>should：可能满足 or</p><p>子句（查询）应出现在匹配的文档中。</p></li><li><p><strong>must_not: 必须不满足 不计算相关度分数 not</strong></p><p>子句（查询）不得出现在匹配的文档中。子句在过滤器上下文中执行，这意味着计分被忽略，并且子句被视为用于缓存。由于忽略计分，0 因此将返回所有文档的分数。</p></li><li><p><strong>minimum_should_match</strong></p></li></ul></li><li><p>案例</p><ul><li><p>demo 案例</p><p>首先筛选 <code>name</code> 包含 <code>xiaomi phone</code> 并且价格大于 1999 的数据 （不排序）</p><p>然后搜索 <code>name</code> 包含 <code>xiaomi</code> 并且 <code>desc</code> 包含 <code>shouji</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "name": "xiaomi"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "desc": "shouji"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match_phrase": &#123;</span><br><span class="line">            "name": "xiaomi phone"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "price": &#123;</span><br><span class="line">              "gt": 1999</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bool 多条件 <code>name</code> 包含 <code>xiaomi</code> 不包含 <code>erji</code> 描述里包不包含 <code>nfc</code> 都可以，价钱要大于等于 4999</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "name": "xiaomi"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "must_not": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "name": "erji"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "should": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "desc": "nfc"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "price": &#123;</span><br><span class="line">              "gt": 4999</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>嵌套查询</p><ol><li><p>minimum_should_match: 参数指定 should 返回的文档必须匹配的子句的数量或百分比。如果 bool 查询包含至少一个 should 子句，而没有 must 或 filter 子句，则默认值为 1。 否则，默认值为 0</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "name": "nfc"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "should": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "price": &#123;</span><br><span class="line">              "gt": 1999</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "price": &#123;</span><br><span class="line">              "gt": 3999</span><br><span class="line">         &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      ],</span><br><span class="line">      "minimum_should_match": 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">          "should": [</span><br><span class="line">            &#123;</span><br><span class="line">              "range": &#123;</span><br><span class="line">                "price": &#123;</span><br><span class="line">                  "gt": 1999</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "range": &#123;</span><br><span class="line">                "price": &#123;</span><br><span class="line">                  "gt": 3999</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          "must": [</span><br><span class="line">            &#123;</span><br><span class="line">              "match": &#123;</span><br><span class="line">                "name": "nfc"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>Compound queries: 组合查询</p><ol><li><p>想要一台带 NFC 功能的 或者 小米的手机 但是不要耳机</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product </span><br><span class="line"><span class="keyword">WHERE</span> (<span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">"%xiaomi%"</span> <span class="keyword">OR</span> <span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">'%nfc%'</span>)</span><br><span class="line"><span class="keyword">AND</span> <span class="string">`name`</span> <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'%erji%'</span>;</span><br></pre></td></tr></table></figure><p>Query DSL 写法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "constant_score": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">          "should": [</span><br><span class="line">            &#123;</span><br><span class="line">              "term": &#123;</span><br><span class="line">                "name": "xiaomi"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "term": &#123;</span><br><span class="line">                "name": "nfc"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          "must_not": [</span><br><span class="line">            &#123;</span><br><span class="line">              "term": &#123;</span><br><span class="line">                "name": "erji"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "boost": 1.2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>搜索一台 xiaomi nfc phone 或者一台满足 是一台手机 并且 价格 小于等于 2999</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">'%xiaomi nfc phone%'</span></span><br><span class="line"><span class="keyword">OR</span> (</span><br><span class="line"><span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">'%erji%'</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="string">`price`</span> &gt; <span class="number">399</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="string">`price`</span> &lt;= <span class="number">999</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Query DSL 写法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "constant_score": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">          "should": [</span><br><span class="line">            &#123;</span><br><span class="line">              "match_phrase": &#123;</span><br><span class="line">                "name": "xiaomi nfc phone"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "bool": &#123;</span><br><span class="line">                "must": [</span><br><span class="line">                  &#123;</span><br><span class="line">                    "term": &#123;</span><br><span class="line">                      "name": "phone"</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    "range": &#123;</span><br><span class="line">                      "price": &#123;</span><br><span class="line">                        "lte": 2999</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Highlight Search</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /product/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_phrase": &#123;</span><br><span class="line">      "name": "nfc phone"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "highlight": &#123;</span><br><span class="line">    "fields": &#123;</span><br><span class="line">      "name": &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Deeping-paging-图解"><a href="#Deeping-paging-图解" class="headerlink" title="Deeping paging 图解"></a>Deeping paging 图解</h2><p><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20201124183336.png" alt=""></p><ol><li>解释：当你的数据超过1W，不要使用</li><li>返回结果不要超过1000个， 500个以下为宜</li><li>解决办法：<ol><li>尽量避免深度分页查询</li><li>使用 Scroll search （只能下一页，没办法上一页，不适合实时查询）</li></ol></li></ol><h2 id="Scroll-search-图解"><a href="#Scroll-search-图解" class="headerlink" title="Scroll search 图解"></a>Scroll search 图解</h2><p>​    解决 deep paging 问题</p><h2 id="filter-缓存原理：-图解"><a href="#filter-缓存原理：-图解" class="headerlink" title="filter 缓存原理： 图解"></a>filter 缓存原理： 图解</h2><p><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20201124183445.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch分布式文档系统</title>
      <link href="/posts/80f71596/"/>
      <url>/posts/80f71596/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ES-分布式文档系统"><a href="#ES-分布式文档系统" class="headerlink" title="ES 分布式文档系统"></a>ES 分布式文档系统</h1><h2 id="1-ES-如何实现高可用（生产环境均为一台机器一个节点）"><a href="#1-ES-如何实现高可用（生产环境均为一台机器一个节点）" class="headerlink" title="1. ES 如何实现高可用（生产环境均为一台机器一个节点）"></a>1. ES 如何实现高可用（生产环境均为一台机器一个节点）</h2><ol><li>ES 在分配单个索引的分片时会将每个分片尽可能分配到更多的节点上。但是，实际情况取决于集群拥有的分片和索引的数量以及他们的大小，不一定总是能均匀的分布</li><li>ES 不允许 Primary 和它的 Replica 放在同一个节点中，并且同一个节点不接受完全相同的两个 Replica</li><li>同一个节点允许多个索引的分片同时存在</li></ol><h2 id="2-容错机制"><a href="#2-容错机制" class="headerlink" title="2. 容错机制"></a>2. 容错机制</h2><ol><li><p>什么是容错</p><ol><li>傻x的代码你可以看懂，牛x的代码你也能看懂</li><li>只能看懂自己的代码，容错性低</li><li>PS： 各种情况（支持的情况越多，容错性越好）下，都能保证 work 正常运行</li><li>换到 ES 上就是，再局部出错异常的情况下，保证服务正常运行并且有自行恢复能力。</li></ol></li><li><p>ES-node</p><blockquote><p>两个配置： node.master 和 node.data</p><ol><li><p>node.master = true            node.data = true</p><p>这是ES 节点默认配置，即作为候选节点又作为数据节点，这样的节点一旦被选举为 Master，压力是比较大的，通常来说 Master 节点应该只承担较为轻量级的任务，比如创建删除索引，分片均衡等</p></li><li><p>node.master = true            node.data = false</p><p>只作为候选节点，不作为数据节点，可参选 Master 节点，当选后成为真正的 Master 节点</p></li><li><p>node.master = false            node.data = false</p><p>既不当候选节点，也不作为数据节点，那就是仅协调节点，负责负载均衡</p></li><li><p>node.master = false            node.data = data</p><p>不作为候选节点，但是作为数据节点，这样的节点主要负责数据存储和查询服务</p></li></ol></blockquote><ol><li><p>Master: 主节点，每个集群都有且只有一个</p><blockquote><p>尽量避免 Master 节点 <code>node.data = true</code></p></blockquote></li><li><p>voting: 投票节点</p><blockquote><p><code>node.voting_only = true</code> (仅投票节点，即使配置了 <code>data.master = true</code> ,也不会参选，但是仍然可以作为数据节点)</p></blockquote></li><li><p>coordinating: 协调节点</p><blockquote><p>每个节点都隐式的是一个协调节点，如果同时设置了 <code>data.master = false</code> 和 <code>data.data = false</code> ,那么这个节点将成为仅协调节点。</p></blockquote></li><li><p>Master-eligible node: 候选节点</p></li><li><p>Data node: 数据节点</p></li><li><p>Ingest node:</p></li><li><p>Machine learning node: 机器学习节点</p></li></ol></li></ol><h2 id="3-图解容错机制"><a href="#3-图解容错机制" class="headerlink" title="3. 图解容错机制"></a>3. 图解容错机制</h2><ol><li>第一步：Master 选举 （假如宕机节点是 Master ）</li><li>第二步：Replica 容错，新的（或者原有）Master 节点将丢失的 Primary 对应的某个副本提升为 Primary</li><li>第三步：Master 节点会尝试重启故障机</li><li>第四步：数据同步，Master会将宕机期间丢失的数据同步到重启机器对应的分片上去</li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ol><li>每台节点的 shard 数量越少，每个Shard 分配的CPU、内存和 IO 资源越多，单个 Shard 的性能越好，当一台机器一个 Shard 时，单个 Shard 性能最好。</li><li>稳定的 Master 节点对于集群健康非常重要！理论上讲，应该尽可能的减轻 Master 节点的压力，分片数量越多，Master 节点维护管理 Shard 的任务越重，并且节点可能就要承担更多的数据转发任务，可增加 “仅协调” 节点来缓解 Master 节点和Data 节点的压力，但是在集群中添加过多的仅协调节点会增加整个集群的负担，因为选择的主节点必须等待每个节点的集群状态更新确认。</li><li>反过来说，在相同资源分配相同的前提下，Shard 数量越少，单个Shard 的体积越大，查询性能越低，速度越慢，这个取舍应根据实际集群状况和结合应用场景等因素综合考虑。</li><li>数据节点和Master 节点一定要分开，集群规模越大，这样做的意义也就越大。</li><li>数据节点处理与数据相关的操作，例如 CRUD ，搜索和聚合。这些操作是 I/O ，内存和 CPU 密集型的，所以他们需要更高配置的服务器以及更高的带宽，并且集群的性能冗余非常重要。</li><li>由于投票节点不参与 Master 竞选，所以和真正的 Master 节点相比，他需要的内存和 CPU 较少。但是，所有候选节点以及仅投票节点都可能是数据节点，所以他们都需要快速稳定低延迟的网络。</li><li>高可用性（HA）集群至少需要三个主节点，其中至少两个不是仅投票节点。即使其中一个节点发生故障，这样的集群也将能够选举一个主节点。生产环境最好设置3台仅 Master 候选节点 (<code>node.master = true node.data = true</code>）</li><li>为了保证集群仍然可用，集群不能同时停止投票配置中的一半或更多节点。只要有一半以上的投票节点可用，集群仍然可以正常工作。这意味着，如果存在三个或四个主节点合格的节点，则群集可以容忍其中一个节点不可用。如果有两个或更少的主机资格节点，则他们必须都保持可用</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch集群安装，搭建以及简单的CURD</title>
      <link href="/posts/97a9c70e/"/>
      <url>/posts/97a9c70e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ES集群安装，搭建以及简单的CURD"><a href="#ES集群安装，搭建以及简单的CURD" class="headerlink" title="ES集群安装，搭建以及简单的CURD"></a>ES集群安装，搭建以及简单的CURD</h1><h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1. 安装环境"></a>1. 安装环境</h2><h3 id="1-安装ES"><a href="#1-安装ES" class="headerlink" title="1. 安装ES"></a>1. 安装ES</h3><blockquote><p>ES的开发模式和生产模式</p><ol><li>开发模式：默认配置（未配置发现设置），用于学习阶段</li><li>生产模式：会触发ES的引导检查，学习阶段不建议修改集群相关配置</li></ol></blockquote><ol><li><p>JDK -&gt; 依赖</p></li><li><p>下载 -&gt; elastic.co</p></li><li><p>启动 -&gt; ./elasticsearch -d</p><blockquote><p>-d 后台启动</p></blockquote></li><li><p>验证 -&gt; <a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a></p></li></ol><h3 id="2-安装Kibana"><a href="#2-安装Kibana" class="headerlink" title="2. 安装Kibana"></a>2. 安装Kibana</h3><blockquote><p>从6.0.0 版本开始，Kibana仅支持64位操作系统</p></blockquote><ol><li><p>下载：elastic.co</p></li><li><p>启动：依然是开箱即用</p><blockquote><p>Linux: ./kibana</p><p>Windows: ./kibana</p></blockquote></li><li><p>验证：<a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601/</a></p></li></ol><h2 id="2-集群健康值检查"><a href="#2-集群健康值检查" class="headerlink" title="2. 集群健康值检查"></a>2. 集群健康值检查</h2><h3 id="1-健康值检查"><a href="#1-健康值检查" class="headerlink" title="1. 健康值检查"></a>1. 健康值检查</h3><ol><li>_cat/health</li><li>_cluster/health</li></ol><h3 id="2-健康值状态"><a href="#2-健康值状态" class="headerlink" title="2. 健康值状态"></a>2. 健康值状态</h3><ol><li>Green：所有 Primary 和 Replica 均为 active ，集群健康</li><li>Yellow：至少一个 Replica 不可用，但所有 Primary 均为 active ，数据仍然可以保证其完整性</li><li>Red：至少有一个 Primary 为不可用状态，数据不完整，集群不可用</li></ol><h2 id="3-基本-CRUD"><a href="#3-基本-CRUD" class="headerlink" title="3. 基本 CRUD"></a>3. 基本 CRUD</h2><ol><li><p>创建索引：(索引全部小写）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /product?pretty</span><br></pre></td></tr></table></figure></li><li><p>查询索引：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /product</span><br></pre></td></tr></table></figure></li><li><p>删除索引：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /product?pretty</span><br></pre></td></tr></table></figure></li><li><p>插入数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PUT /product/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "xiaomi phone",</span><br><span class="line">    "desc" :  "shouji zhong de zhandouji",</span><br><span class="line">    "price" :  3999,</span><br><span class="line">    "tags": [ "xingjiabi", "fashao", "buka" ]</span><br><span class="line">&#125;</span><br><span class="line">PUT /product/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "xiaomi nfc phone",</span><br><span class="line">    "desc" :  "zhichi quangongneng nfc,shouji zhong de jianjiji",</span><br><span class="line">    "price" :  4999,</span><br><span class="line">    "tags": [ "xingjiabi", "fashao", "gongjiaoka" ]</span><br><span class="line">&#125;</span><br><span class="line">PUT /product/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "nfc phone",</span><br><span class="line">    "desc" :  "shouji zhong de hongzhaji",</span><br><span class="line">    "price" :  2999,</span><br><span class="line">    "tags": [ "xingjiabi", "fashao", "menjinka" ]</span><br><span class="line">&#125;</span><br><span class="line">PUT /product/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "xiaomi erji",</span><br><span class="line">    "desc" :  "erji zhong de huangmenji",</span><br><span class="line">    "price" :  999,</span><br><span class="line">    "tags": [ "low", "bufangshui", "yinzhicha" ]</span><br><span class="line">&#125;</span><br><span class="line">PUT /product/_doc/5</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "hongmi erji",</span><br><span class="line">    "desc" :  "erji zhong de kendeji",</span><br><span class="line">    "price" :  399,</span><br><span class="line">    "tags": [ "lowbee", "xuhangduan", "zhiliangx" ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新数据：</p><ol><li><p>全量替换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /product/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "xiaomi phone",</span><br><span class="line">    "desc" :  "shouji zhong de zhandouji",</span><br><span class="line">    "price" :  13999,</span><br><span class="line">    "tags": [ "xingjiabi", "fashao", "buka" ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定字段更新</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /product/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  "doc":&#123;</span><br><span class="line">    "price":123456</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /product/_doc/1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch核心概念</title>
      <link href="/posts/8f9d7b23/"/>
      <url>/posts/8f9d7b23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Elasticsearch-核心概念"><a href="#Elasticsearch-核心概念" class="headerlink" title="Elasticsearch 核心概念"></a>Elasticsearch 核心概念</h1><h2 id="1-什么是搜索"><a href="#1-什么是搜索" class="headerlink" title="1. 什么是搜索"></a>1. 什么是搜索</h2><p>百度、垂直搜索（站内搜索）</p><p>搜索：通过一个关键词或一段描述，得到你想要的（相关度高）的结果</p><h2 id="2-如何实现搜索功能"><a href="#2-如何实现搜索功能" class="headerlink" title="2. 如何实现搜索功能"></a>2. 如何实现搜索功能</h2><p>关系型数据库：性能差、不可靠、结果不准确（相关度低）</p><h2 id="3-倒排索引、Lucene-和全文检索"><a href="#3-倒排索引、Lucene-和全文检索" class="headerlink" title="3.倒排索引、Lucene 和全文检索"></a>3.倒排索引、Lucene 和全文检索</h2><h3 id="1-倒排索引的数据结构"><a href="#1-倒排索引的数据结构" class="headerlink" title="#1. 倒排索引的数据结构"></a>#1. 倒排索引的数据结构</h3><ol><li>包含这个关键词的 <code>document list</code></li><li>关键词在每个doc中出现的次数 <code>TF term frequency</code></li><li>关键词在整个索引中出现的次数 <code>IDF inverse doc frequency</code></li><li>关键词在当前doc中出现的次数</li><li>每个doc 的长度，越长相关度越低</li><li>包含这个关键词的所有doc 的平均长度</li></ol><h3 id="2-Lucene"><a href="#2-Lucene" class="headerlink" title="#2. Lucene:"></a>#2. Lucene:</h3><p>jar包，帮我们创建倒排索引，提供了复杂的API</p><h3 id="3-如果用-Lucene-做集群实现搜索，会有那些问题"><a href="#3-如果用-Lucene-做集群实现搜索，会有那些问题" class="headerlink" title="#3. 如果用 Lucene 做集群实现搜索，会有那些问题"></a>#3. 如果用 Lucene 做集群实现搜索，会有那些问题</h3><ol><li>节点如果宕机，节点数据丢失，后果不堪设想，可用性差</li><li>自己维护，麻烦（自己创建、管理索引），单台节点的承载请求的能力是有限的，需要人工来做负载（雨露均沾）</li></ol><h3 id="4-Elasticsearch"><a href="#4-Elasticsearch" class="headerlink" title="#4. Elasticsearch"></a>#4. Elasticsearch</h3><blockquote><p>分布式、高性能、高可用、可伸缩、易维护、ES≠搜索引擎</p></blockquote><ol><li>分布式的搜索、存储和数据分析引擎</li><li>优点：<ol><li>面向开发者友好、屏蔽了Lucene的复杂特性，集群自动发现（Cluster Discovery）</li><li>自动维护数据在多个节点上的建立</li><li>会帮我做搜索请求的负载均衡</li><li>自动维护冗余副本，保证了部分节点宕机的情况下仍然不会有任何数据丢失</li><li>ES基于Lucene提供了很多高级功能：符合查询、聚合分析、基于地理位置</li><li>对于大公司、可以构建几百台服务器的大型分布式集群、处理PB级别数据；对于小公司，开箱即用，门槛低上手简单。 </li><li>相对于传统数据库，提供了全文检索，同义词处理，相关度排名。聚合分析以及海量数据的近实时（NTR）处理，这些传统数据库完全做不到。</li></ol></li><li>应用领域<ol><li>百度（全文检索、高亮、搜索推荐）</li><li>各大网站的用户行为日志（用户点击、浏览、收藏、评论）</li><li>BI（Buniness Intelligence 商业智能），数据分析：数据挖掘统计。</li><li>GitHub： 代码托管平台，几千亿行代码</li><li>ELK：Elasticsearch （数据存储）、Logstash（日志采集）、Kibana（可视化）</li></ol></li></ol><h2 id="5-ES核心概念："><a href="#5-ES核心概念：" class="headerlink" title="5. ES核心概念："></a>5. ES核心概念：</h2><ol><li><p>Cluster（集群）：每个集群至少包含两个节点</p></li><li><p>Node：集群中的每个节点，一个节点不代表一台服务器</p></li><li><p>Field：一个数据字段，与 index 和 type 一起，可以定位一个 doc</p></li><li><p>Document：ES 最小的数据单元 JSON</p></li><li><p>Type：逻辑上的数据分类</p></li><li><p>Index：一类相同或类似的 doc ，比如一个员工索引，商品索引</p><blockquote><p>DOC &lt;&gt; row type &lt;&gt;  table index &lt;&gt; db</p></blockquote></li></ol><h2 id="6-Shard-分片"><a href="#6-Shard-分片" class="headerlink" title="6. Shard 分片"></a>6. Shard 分片</h2><ol><li><p>一个 index 包含多个shard，默认 5P，默认每一个P分配一个R，P的数量在创建索引的时候设置，如果想修改，需要重建索引。</p><blockquote><p>P: Primary Shard 可读可写</p><p>R: Replica Shard 只读</p></blockquote></li><li><p>每个 Shard 都是一个 Lucene 示例，有完整的创建索引的处理请求能力</p></li><li><p>ES 会自动在 nodes 上为我们做 shard 均衡</p></li><li><p>一个doc是不可能同时存在于多个PShard中的，但是可以存在于多个RShard中</p></li><li><p>P 和 对应的R不能同时存在于同一个节点上，所以最低的可用配置是两个节点，互为主备</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的页面分页显隐算法</title>
      <link href="/posts/7a6cb371/"/>
      <url>/posts/7a6cb371/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一天，前端同学找我，说页面的分页组件算法应该怎么写，他已经写懵了，并且找了 Element 组件的源码查看分页组件，发现Element 分页组件移植过来有些问题，而且 Element 分页组件的算法很烂。然后我就写了一个分页算法出来</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理很简单，就是通过计算开始渲染和结束渲染的盒子下标，然后除最小页码和最大页码外，此外的，均不进行渲染</p><h2 id="JavaScript-实现方式"><a href="#JavaScript-实现方式" class="headerlink" title="JavaScript 实现方式"></a>JavaScript 实现方式</h2><p>鄙人 Js 学的很烂，求轻喷。。。。😀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量：总共页面显示的盒子数</span></span><br><span class="line"><span class="keyword">var</span> SHOW_PAGE_NUM = <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 常量：当选中中间页码，前后渲染的盒子数量</span></span><br><span class="line"><span class="keyword">var</span> CENTER_AROUND_NUM = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">let</span> position = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="number">15</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// pageCount 是页码总数，position 是当前页码</span></span><br><span class="line">    process(pageCount, position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">pageCount, position</span>) </span>&#123;</span><br><span class="line">    position--;</span><br><span class="line">    <span class="keyword">let</span> pagesList = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 计算position 前可放几个显示页</span></span><br><span class="line">    <span class="keyword">let</span> beforeSize = position - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 计算position 后可放几个显示页</span></span><br><span class="line">    <span class="keyword">let</span> afterSize = pageCount - <span class="number">1</span> - <span class="number">1</span> - position;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 当 beforeSize &lt;= CENTER_AROUND_NUM 时前边页码渲染</span></span><br><span class="line"><span class="comment">     * 2. 当 afterSize &lt;= CENTER_AROUND_NUM 时后边页码渲染</span></span><br><span class="line"><span class="comment">     * 3. 其他情况 两边渲染</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始渲染的盒子下标</span></span><br><span class="line">    <span class="keyword">let</span> startPosition;</span><br><span class="line">    <span class="comment">// 最后被渲染盒子的下标</span></span><br><span class="line">    <span class="keyword">let</span> endPosition;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (pageCount &lt;= SHOW_PAGE_NUM) &#123;</span><br><span class="line">        startPosition = <span class="number">0</span>;</span><br><span class="line">        endPosition = pageCount - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beforeSize &lt;= CENTER_AROUND_NUM) &#123;</span><br><span class="line">        startPosition = <span class="number">0</span>;</span><br><span class="line">        endPosition = CENTER_AROUND_NUM * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (afterSize &lt;= CENTER_AROUND_NUM) &#123;</span><br><span class="line">        startPosition = pageCount - <span class="number">1</span> - <span class="number">1</span> - CENTER_AROUND_NUM * <span class="number">2</span>;</span><br><span class="line">        endPosition = pageCount - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startPosition = position - <span class="number">3</span>;</span><br><span class="line">        endPosition = position + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渲染盒子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pg = &#123;&#125;;</span><br><span class="line">        pg.pagePosition = i + <span class="number">1</span>;</span><br><span class="line">        pg.isShow = (i == <span class="number">0</span> || i == pageCount - <span class="number">1</span> || i &gt;= startPosition &amp;&amp; i &lt;= endPosition);</span><br><span class="line">        pagesList.push(pg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    <span class="built_in">console</span>.log(pagesList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-代码实现方式"><a href="#Java-代码实现方式" class="headerlink" title="Java 代码实现方式"></a>Java 代码实现方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHOW_PAGE_NUM = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CENTER_AROUND_NUM = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = <span class="number">1</span>;</span><br><span class="line">        process(<span class="number">15</span>, position).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Pages&gt; <span class="title">process</span><span class="params">(<span class="keyword">int</span> pageCount, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 转换为下标</span></span><br><span class="line">        position--;</span><br><span class="line"></span><br><span class="line">        List&lt;Pages&gt; pagesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 计算position 前可放几个显示页</span></span><br><span class="line">        <span class="keyword">int</span> beforeSize = position - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 计算position 后可放几个显示页</span></span><br><span class="line">        <span class="keyword">int</span> afterSize = pageCount - <span class="number">1</span> - <span class="number">1</span> - position;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 当 beforeSize &lt;= CENTER_AROUND_NUM 时前边页码渲染</span></span><br><span class="line"><span class="comment">         * 2. 当 afterSize &lt;= CENTER_AROUND_NUM 时后边页码渲染</span></span><br><span class="line"><span class="comment">         * 3. 其他情况 两边渲染</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> startPosition;</span><br><span class="line">        <span class="keyword">int</span> endPosition;</span><br><span class="line">        <span class="keyword">if</span> (pageCount &lt;= SHOW_PAGE_NUM) &#123;</span><br><span class="line">            startPosition = <span class="number">0</span>;</span><br><span class="line">            endPosition = pageCount - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beforeSize &lt;= CENTER_AROUND_NUM) &#123;</span><br><span class="line">            startPosition = <span class="number">0</span>;</span><br><span class="line">            endPosition = CENTER_AROUND_NUM * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (afterSize &lt;= CENTER_AROUND_NUM) &#123;</span><br><span class="line">            startPosition = pageCount - <span class="number">1</span> - <span class="number">1</span> - CENTER_AROUND_NUM * <span class="number">2</span>;</span><br><span class="line">            endPosition = pageCount - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startPosition = position - <span class="number">3</span>;</span><br><span class="line">            endPosition = position + <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">            Pages pg = <span class="keyword">new</span> Pages();</span><br><span class="line">            pg.pagePosition = i + <span class="number">1</span>;</span><br><span class="line">            pg.isShow = (i == <span class="number">0</span> || i == pageCount - <span class="number">1</span> || i &gt;= startPosition &amp;&amp; i &lt;= endPosition);</span><br><span class="line">            pagesList.add(pg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pagesList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pages</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Integer pagePosition;</span><br><span class="line">        <span class="keyword">public</span> Boolean isShow;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            return new StringJoiner(", ", Pages.class.getSimpleName() + "[", "]")</span><br><span class="line">                    .add(<span class="string">"pagePosition="</span> + pagePosition)</span><br><span class="line">                    .add(<span class="string">"isShow="</span> + isShow)</span><br><span class="line">                    .toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 分页 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase 集群安装</title>
      <link href="/posts/34ad406f/"/>
      <url>/posts/34ad406f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hbase-安装"><a href="#Hbase-安装" class="headerlink" title="Hbase 安装"></a>Hbase 安装</h1><p>以三台机器搭建集群环境为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase1 10.10.3.129</span><br><span class="line"></span><br><span class="line">hbase2 10.10.3.130</span><br><span class="line"></span><br><span class="line">hbase3 10.10.3.131</span><br></pre></td></tr></table></figure><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="创建相关用户"><a href="#创建相关用户" class="headerlink" title="创建相关用户"></a>创建相关用户</h3><blockquote><p>三台机器操作方式相同</p></blockquote><p>创建zookeeper、Hbase、Hadoop用户,并设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# useradd zookeeper</span><br><span class="line">[root@localhost opt]# passwd zookeeper</span><br><span class="line">[root@localhost opt]# useradd hadoop</span><br><span class="line">[root@localhost opt]# passwd hadoop</span><br><span class="line">[root@localhost opt]# useradd hbase</span><br><span class="line">[root@localhost opt]# passwd hbase</span><br></pre></td></tr></table></figure><p>将此三个用户加入到 sudoers 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="Hosts-与-免密"><a href="#Hosts-与-免密" class="headerlink" title="Hosts 与 免密"></a>Hosts 与 免密</h3><blockquote><p>三台机器操作方式相同</p></blockquote><p>编辑hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>在文件末尾增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase1 10.10.3.129</span><br><span class="line">hbase2 10.10.3.130</span><br><span class="line">hbase3 10.10.3.131</span><br></pre></td></tr></table></figure><p>编辑hostname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>填入以下内容(根据相应IP对应关系，在相应hosts上配置)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HOSTNAME</span>=<span class="string">hbase1</span></span><br></pre></td></tr></table></figure><p>免密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:F142fovQQib0Kgl/WL/USKPv8z/8Xfb0O5/dD/wA+Fo root@localhost.localdomain</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|        .        |</span><br><span class="line">|       . .       |</span><br><span class="line">|    .   o B +    |</span><br><span class="line">|     o + X @ .   |</span><br><span class="line">|      = S X = .  |</span><br><span class="line">|       o + = = . |</span><br><span class="line">|          o E.= +|</span><br><span class="line">|         ..o  oBO|</span><br><span class="line">|          oo...=/|</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ssh-copy-id hbase1</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"</span><br><span class="line">The authenticity of host 'hbase1 (10.10.3.129)' can't be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:GkgGCNlxc55obBDytcgmvK5kJXR5wHuhKejQwr/yxfg.</span><br><span class="line">ECDSA key fingerprint is MD5:1f:70:01:4a:06:a8:66:e7:88:47:bf:4c:0f:30:5b:52.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@hbase1's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'hbase1'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ssh-copy-id hbase2</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"</span><br><span class="line">The authenticity of host 'hbase2 (10.10.3.130)' can't be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:GkgGCNlxc55obBDytcgmvK5kJXR5wHuhKejQwr/yxfg.</span><br><span class="line">ECDSA key fingerprint is MD5:1f:70:01:4a:06:a8:66:e7:88:47:bf:4c:0f:30:5b:52.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@hbase2's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'hbase2'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ssh-copy-id hbase3</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"</span><br><span class="line">The authenticity of host 'hbase3 (10.10.3.131)' can't be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:GkgGCNlxc55obBDytcgmvK5kJXR5wHuhKejQwr/yxfg.</span><br><span class="line">ECDSA key fingerprint is MD5:1f:70:01:4a:06:a8:66:e7:88:47:bf:4c:0f:30:5b:52.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@hbase3's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'hbase3'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>分别切换到hadoop用户，执行上方免密操作，方式相同</p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote><p>三台机器操作方式相同</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="JDK-1-8"><a href="#JDK-1-8" class="headerlink" title="JDK 1.8"></a>JDK 1.8</h3><blockquote><p>三台机器操作方式相同</p></blockquote><p>下载 JDK1.8 安装包</p><p>放置到 <code>/opt</code> 下并解压</p><p>重命名文件夹为 <code>jdk</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br><span class="line">[root@localhost opt]# mv /opt/jdk1.8.0_251 /opt/jdk</span><br></pre></td></tr></table></figure><p>配置环境变量</p><p>编辑 <code>/etc/profile</code></p><p>在文件末尾增加两行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> jdk 相关</span></span><br><span class="line">export JAVA_HOME=/opt/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>加载新配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="重启机器"><a href="#重启机器" class="headerlink" title="重启机器"></a>重启机器</h3><blockquote><p>三台机器操作方式相同</p></blockquote><h2 id="安装-Zookeeper"><a href="#安装-Zookeeper" class="headerlink" title="安装 Zookeeper"></a>安装 Zookeeper</h2><blockquote><p>三台机器操作方式相同</p></blockquote><p>下载 Zookeeper 安装包</p><p>放置到 <code>/opt</code> 下并解压</p><p>重命名文件夹为 <code>zookeeper</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz</span><br><span class="line">[root@localhost opt]# mv /opt/apache-zookeeper-3.5.7-bin /opt/zookeeper</span><br></pre></td></tr></table></figure><p>配置环境变量</p><p>编辑 <code>/etc/profile</code></p><p>在文件末尾增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> zookeeper相关</span></span><br><span class="line">export ZOOKEEPER_HOME=/opt/zookeeper</span><br></pre></td></tr></table></figure><p>加载新配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# source /etc/profile</span><br></pre></td></tr></table></figure><p>创建数据存放路径，日志存放路径，创建zookeeper ID文件，并赋权。其中 <code>your id</code>为你的zookeeper节点ID，需保证三台不重复，且为数字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir -p /data/zookeeper</span><br><span class="line">[root@localhost opt]# mkdir -p /var/log/zookeeper</span><br><span class="line">[root@localhost opt]# echo "your id" &gt; /data/zookeeper/myid</span><br><span class="line">[root@localhost opt]# chown -R zookeeper:zookeeper /data/zookeeper</span><br><span class="line">[root@localhost opt]# chown -R zookeeper:zookeeper /var/log/zookeeper</span><br><span class="line">[root@localhost opt]# chown -R zookeeper:zookeeper /opt/zookeeper</span><br></pre></td></tr></table></figure><p>创建 zookeeper 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# cp $ZOOKEEPER_HOME/conf/zoo_sample.cfg $ZOOKEEPER_HOME/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>编辑 zookeeper 配置文件，修改 <code>dataDir</code> 参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataDir</span>=<span class="string">/data/zookeeper</span></span><br></pre></td></tr></table></figure><p>编辑 zookeeper 配置文件，增加以下参数(server.id 为你上方的 zookeeper 节点ID)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.1</span>=<span class="string">hbase1:2888:3888</span></span><br><span class="line"><span class="meta">server.2</span>=<span class="string">hbase2:2888:3888</span></span><br><span class="line"><span class="meta">server.3</span>=<span class="string">hbase3:2888:3888</span></span><br></pre></td></tr></table></figure><h2 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h2><blockquote><p>此操作三台相同，三台是相同的配置文件</p></blockquote><p>下载 Hadoop 安装包</p><p>放置到 <code>/opt</code> 下并解压</p><p>重命名文件夹为 <code>hadoop</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf hadoop-2.8.1.tar.gz</span><br><span class="line">[root@localhost opt]# mv /opt/hadoop-2.8.1 /opt/hadoop</span><br></pre></td></tr></table></figure><p>配置环境变量</p><p>编辑 <code>/etc/profile</code></p><p>在文件末尾增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hadoop 相关</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop</span><br><span class="line">export HADOOP_PREFIX=$HADOOP_HOME</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class="line">export YARN_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span><br></pre></td></tr></table></figure><p>加载新配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="编辑-Hadoop-相关配置文件"><a href="#编辑-Hadoop-相关配置文件" class="headerlink" title="编辑 Hadoop 相关配置文件"></a>编辑 Hadoop 相关配置文件</h4><h5 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim $HADOOP_HOME/etc/hadoop/slaves</span><br></pre></td></tr></table></figure><p>填入 ip 与hosts的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase1 10.10.3.129</span><br><span class="line">hbase2 10.10.3.130</span><br><span class="line">hbase3 10.10.3.131</span><br></pre></td></tr></table></figure><h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim $HADOOP_HOME/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><p>完整配置文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase1,hbase2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.hbase1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.hbase1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.hbase2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase2:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.hbase2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hbase1:8485;hbase2:8485;hbase3:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///data/hadoop/hdfs/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///data/hadoop/hdfs/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/hdfs/journalnode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.qjournal.start-segment.timeout.ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase1:2181,hbase2:2181,hbase3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim $HADOOP_HOME/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><p>完整配置文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.session-timeout.ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim $HADOOP_HOME/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>在文件头部填入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_NAMENODE_OPTS=" -Xms1024m -Xmx1024m -XX:+UseParallelGC"</span><br><span class="line">export HADOOP_DATANODE_OPTS=" -Xms1024m -Xmx1024m"</span><br><span class="line">export HADOOP_LOG_DIR=/var/log/hadoop</span><br></pre></td></tr></table></figure><h4 id="创建相关文件夹"><a href="#创建相关文件夹" class="headerlink" title="创建相关文件夹"></a>创建相关文件夹</h4><p>创建数据存放路径，日志存放路径，并赋权。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir -p /data/hadoop/hdfs</span><br><span class="line">[root@localhost opt]# mkdir -p /data/hadoop/hdfs/journalnode</span><br><span class="line">[root@localhost opt]# mkdir -p /var/log/hadoop</span><br><span class="line">[root@localhost opt]# chown -R hadoop:hadoop /data/hadoop</span><br><span class="line">[root@localhost opt]# chown -R hadoop:hadoop /var/log/hadoop</span><br><span class="line">[root@localhost opt]# chown -R hadoop:hadoop /opt/hadoop</span><br></pre></td></tr></table></figure><h2 id="安装HBase"><a href="#安装HBase" class="headerlink" title="安装HBase"></a>安装HBase</h2><blockquote><p>此操作三台相同，三台是相同的配置文件</p></blockquote><p>下载 HBase安装包</p><p>放置到 <code>/opt</code> 下并解压</p><p>重命名文件夹为 <code>hbase</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf hbase-2.3.0-bin.tar.gz</span><br><span class="line">[root@localhost opt]# mv /opt/hbase-2.3.0 /opt/hbase</span><br></pre></td></tr></table></figure><p>配置环境变量</p><p>编辑 <code>/etc/profile</code></p><p>在文件末尾增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hbase相关</span></span><br><span class="line">export HBASE_HOME=/opt/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><p>加载新配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="编辑相关配置文件"><a href="#编辑相关配置文件" class="headerlink" title="编辑相关配置文件"></a>编辑相关配置文件</h4><h5 id="hdfs-site-xml-1"><a href="#hdfs-site-xml-1" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><p>将hadoop下的hdfs-xite.xml 复制或软链接一份到  <code>$HBASE_HOME/conf</code> 下。这里建议软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# ln -s /opt/hadoop/etc/hadoop/hdfs-site.xml /opt/hbase/conf/hdfs-site.xml</span><br></pre></td></tr></table></figure><h5 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h5><p>在原文件中增加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hbase/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase1,hbase2,hbase3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="hbase-env-sh"><a href="#hbase-env-sh" class="headerlink" title="hbase-env.sh"></a>hbase-env.sh</h5><p>修改配置文件中 <code>HBASE_CLASSPATH</code> 内容，如有注释，请先取消注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_CLASSPATH=/opt/hadoop/etc/hadoop</span><br><span class="line">export HBASE_LOG_DIR=/var/log/hbase</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure><h4 id="创建相关文件夹-1"><a href="#创建相关文件夹-1" class="headerlink" title="创建相关文件夹"></a>创建相关文件夹</h4><p>创建数据存放路径，日志存放路径，并赋权。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir -p /data/hbase</span><br><span class="line">[root@localhost opt]# mkdir -p /data/hbase/zookeeper</span><br><span class="line">[root@localhost opt]# mkdir -p /var/log/hbase</span><br><span class="line">[root@localhost opt]# chown -R hbase:hbase /data/hbase</span><br><span class="line">[root@localhost opt]# chown -R hbase:hbase /var/log/hbase</span><br><span class="line">[root@localhost opt]# chown -R hbase:hbase /opt/hbase</span><br></pre></td></tr></table></figure><h2 id="初始化-Zookeeper"><a href="#初始化-Zookeeper" class="headerlink" title="初始化 Zookeeper"></a>初始化 Zookeeper</h2><blockquote><p>此操作三台相同</p><p>启动前请注意关闭防火墙</p></blockquote><p>切换到 zookeeper 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - zookeeper</span><br></pre></td></tr></table></figure><p>启动 Zookeeper 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost ~]# $ZOOKEEPER_HOME/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>然后查看Zookeeper集群状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@localhost ~]# $ZOOKEEPER_HOME/bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p>查看返回信息，如果集群中显示有两个 <code>follower</code> 和一个 <code>leader</code> ，说明集群启动成功</p><h2 id="初始化HDFS"><a href="#初始化HDFS" class="headerlink" title="初始化HDFS"></a>初始化HDFS</h2><blockquote><p>三台机器操作相同</p></blockquote><p>切换到 hadoop 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - hadoop</span><br></pre></td></tr></table></figure><h3 id="1-启动-journalnode-服务"><a href="#1-启动-journalnode-服务" class="headerlink" title="1. 启动 journalnode 服务"></a>1. 启动 journalnode 服务</h3><blockquote><p>三台机器操作相同</p></blockquote><p>启动 journalnode 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure><p>然后查看相关进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]# jps</span><br><span class="line">2410 Jps</span><br><span class="line">15231 JournalNode</span><br></pre></td></tr></table></figure><p>查看返回信息，如果显示了 <code>JournalNode</code> 进程，且查看日志没有发现相关错误信息，说明 <code>JournalNode</code> 启动成功</p><p>查看 <code>JournalNode</code>  日志信息(后边的 <code>hbase1</code> 是你的主机名称，其他两台根据实际情况更换主机名即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]# /var/log/hadoop/hadoop-hadoop-journalnode-hbase1.log</span><br></pre></td></tr></table></figure><h3 id="2-初始化-Namenode"><a href="#2-初始化-Namenode" class="headerlink" title="2. 初始化 Namenode"></a>2. 初始化 Namenode</h3><p>在第一台机器上，也就是 <code>hbase1</code> 上，执行以下代码进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化主namenode</span></span><br><span class="line">[hadoop@hbase1 ~]# hdfs namenode -format</span><br></pre></td></tr></table></figure><p>如果没有相关错误信息，且初始化成功结束，说明主 <code>namenode</code> 初始化成功</p><p>然后启动刚初始化的 <code>namenode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start namenode</span><br></pre></td></tr></table></figure><p>在第二台机器上，也就是 <code>hbase2</code> 上，执行以下代码进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化备namenode</span></span><br><span class="line">[hadoop@hbase2 ~]# hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure><p>接下来关闭第一台刚启动的 <code>namenode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs stop namenode</span><br></pre></td></tr></table></figure><p>然后初始化 <code>JournalNode</code>  中的记录，在第一台 <code>namenode</code> 上执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# hdfs namenode -initializeSharedEdits</span><br></pre></td></tr></table></figure><p>启动刚初始化好的两台 <code>namenode</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start namenode</span><br></pre></td></tr></table></figure><p>然后在两台<code>namenode</code>分别查看相关进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]$ jps</span><br><span class="line">15792 NameNode</span><br><span class="line">2648 Jps</span><br><span class="line">15231 JournalNode</span><br></pre></td></tr></table></figure><p>查看返回信息，如果显示了 <code>namenode</code>  进程，且查看日志没有发现相关错误信息，说明 <code>namenode</code>  启动成功</p><p>查看 <code>namenode</code>  日志信息(后边的 <code>hbase1</code> 是你的主机名称，其他两台根据实际情况更换主机名即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# /var/log/hadoop/hadoop-hadoop-namenode-hbase1.log</span><br></pre></td></tr></table></figure><h3 id="3-初始化-zkfc"><a href="#3-初始化-zkfc" class="headerlink" title="3. 初始化 zkfc"></a>3. 初始化 zkfc</h3><p>在第一台机器上，也就是 <code>hbase1</code> 上，执行以下代码进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化zkfc</span></span><br><span class="line">[hadoop@hbase1 ~]# hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure><p>如果没有相关错误信息，且初始化成功结束，查看 <code>zookeeper</code> 中相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看zookeeper中相关信息</span></span><br><span class="line">[hadoop@hbase1 ~]# $ZOOKEEPER_HOME/bin/zkCli.sh</span><br><span class="line">Connecting to localhost:2181</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /</span><br><span class="line">[hadoop-ha, zookeeper]</span><br></pre></td></tr></table></figure><p>可以看到多出了一个 <code>hadoop-ha</code> 目录，说明初始化正确</p><p>接下来停止两台 <code>namenode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs stop namenode</span><br></pre></td></tr></table></figure><p>然后启动两台 <code>namenode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start namenode</span><br></pre></td></tr></table></figure><p>通过浏览器访问 <code>&lt;hostname&gt;:50070</code> 可以看到两台 <code>namenode</code> 现在都处于 <code>standby</code> 状态</p><p>两台启动 <code>zkfc</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start zkfc</span><br></pre></td></tr></table></figure><p>然后在两台<code>namenode</code>分别查看相关进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]$ jps</span><br><span class="line">15792 NameNode</span><br><span class="line">15908 DFSZKFailoverController</span><br><span class="line">5339 Jps</span><br><span class="line">15231 JournalNode</span><br></pre></td></tr></table></figure><p>查看返回信息，如果显示了 <code>DFSZKFailoverController</code>  进程，且查看日志没有发现相关错误信息，说明 <code>zkfc</code> 启动成功</p><p>查看 <code>namenode</code>  日志信息(后边的 <code>hbase1</code> 是你的主机名称，其他两台根据实际情况更换主机名即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# /var/log/hadoop/hadoop-hadoop-namenode-hbase1.log</span><br></pre></td></tr></table></figure><p>通过浏览器访问 <code>&lt;hostname&gt;:50070</code> 可以看到两台 <code>namenode</code> 其中一台处于 <code>active</code> 状态，另一台处于 <code>standby</code> 状态，说明 <code>zkfc</code>  初始化工作完成</p><h3 id="4-启动-DataNode"><a href="#4-启动-DataNode" class="headerlink" title="4. 启动 DataNode"></a>4. 启动 DataNode</h3><p>在三台机器，执行以下代码进行启动 <code>datanode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 datanode</span></span><br><span class="line">[hadoop@hbase1(hbase2,hbase3) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start datanode</span><br></pre></td></tr></table></figure><p>然后在三台<code>datanode</code>分别查看相关进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]$ jps</span><br><span class="line">15792 NameNode</span><br><span class="line">15908 DFSZKFailoverController</span><br><span class="line">5339 Jps</span><br><span class="line">16014 DataNode</span><br><span class="line">15231 JournalNode</span><br></pre></td></tr></table></figure><p>查看返回信息，如果显示了 <code>DataNode</code>  进程，且查看日志没有发现相关错误信息，说明 <code>DataNode</code>  启动成功</p><p>查看 <code>DataNode</code>  日志信息(后边的 <code>hbase1</code> 是你的主机名称，其他两台根据实际情况更换主机名即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1 ~]# /var/log/hadoop/hadoop-hadoop-datanode-hbase1.log</span><br></pre></td></tr></table></figure><h2 id="初始化-HBase"><a href="#初始化-HBase" class="headerlink" title="初始化 HBase"></a>初始化 HBase</h2><blockquote><p>在首次启动 HBase 之前，请保证 hdfs 所有服务都处于开启状态，zookeeper 处于开启状态</p></blockquote><p>将 hbase 用户添加到 supergroup 组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# groupadd supergroup</span><br><span class="line">[root@localhost ~]# groupmems -g supergroup -a hbase</span><br></pre></td></tr></table></figure><p>切换到 hbase 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - hbase</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 HMaster,只在第一台执行</span></span><br><span class="line">[hbase@hbase1 ~]# $HBASE_HOME/bin/hbase-daemon.sh start master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 HRegionserver，三台都执行</span></span><br><span class="line">[hbase@hbase1(hbase2,hbase3) ~]# $HBASE_HOME/bin/hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><p>然后在三台机器分别查看相关进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hbase@hbase1 zookeeper]$ jps</span><br><span class="line">32628 HMaster</span><br><span class="line">5991 Jps</span><br><span class="line">3309 Main</span><br><span class="line">32383 HRegionServer</span><br></pre></td></tr></table></figure><p>查看返回信息，如果在第一台显示了 <code>Hmaster</code> 并且这三台都显示了 <code>HRegionServer</code>  进程，且查看日志没有发现相关错误信息，说明 <code>HRegionServer</code>  启动成功</p><p>查看 <code>HRegionServer</code>  日志信息(后边的 <code>hbase1</code> 是你的主机名称，其他两台根据实际情况更换主机名即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 HMaster 日志信息</span></span><br><span class="line">[hbase@hbase1 ~]# tail -f /var/log/hbase/hbase-hbase-master-hbase1.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 HRegionserver 日志信息</span></span><br><span class="line">[hbase@hbase1(hbase2,hbase3) ~]# tail -f /var/log/hbase/hbase-hbase-regionserver-hbase1.log</span><br></pre></td></tr></table></figure><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><blockquote><p>注意：启动时必须按照启动顺序启动，否则可能会出现某些未知的启动失败的情况</p></blockquote><h3 id="Zookeeper-相关"><a href="#Zookeeper-相关" class="headerlink" title="Zookeeper 相关"></a>Zookeeper 相关</h3><p>先启动 <code>zookeeper</code> 。注意先切换到 zookeeper 用户后再进行启动！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zookeeper@hbase1(hbase2,hbase3) ~]# $ZOOKEEPER_HOME/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="Hadoop-相关"><a href="#Hadoop-相关" class="headerlink" title="Hadoop 相关"></a>Hadoop 相关</h3><p>再启动 <code>journalnode</code> 。注意先切换到 hadoop 用户后再进行启动！(hbase1,hbase2)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure><p>再启动 <code>namenode</code> 。注意先切换到 hadoop 用户后再进行启动！(hbase1,hbase2)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start namenode</span><br></pre></td></tr></table></figure><p>再启动 <code>zkfc</code> 。注意先切换到 hadoop 用户后再进行启动！(hbase1,hbase2)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start zkfc</span><br></pre></td></tr></table></figure><p>再启动 <code>datanode</code> 。注意先切换到 hadoop 用户后再进行启动！(hbase1,hbase2,hbase3)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase1(hbase2,hbase3) ~]# $HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start datanode</span><br></pre></td></tr></table></figure><h3 id="HBase-相关"><a href="#HBase-相关" class="headerlink" title="HBase 相关"></a>HBase 相关</h3><p>再启动 <code>HMaster</code> 。注意先切换到 hbase 用户后再进行启动！(hbase1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hbase@hbase1 ~]# $HBASE_HOME/bin/hbase-daemon.sh start master</span><br></pre></td></tr></table></figure><p>再启动 <code>HRegionServer</code> 。注意先切换到 hbase 用户后再进行启动！(hbase1,hbase2,hbase3)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hbase@hbase1(hbase2,hbase3) ~]# $HBASE_HOME/bin/hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><h2 id="关闭顺序"><a href="#关闭顺序" class="headerlink" title="关闭顺序"></a>关闭顺序</h2><blockquote><p>关闭顺序请参照启动顺序，反着来一边就可以</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Zookeeper相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动zookeeper集群</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ZOOKEEPER_HOME/bin/zkServer.sh start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看zookeeper集群状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ZOOKEEPER_HOME/bin/zkServer.sh status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止zookeeper集群</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ZOOKEEPER_HOME/bin/zkServer.sh stop</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Hadoop相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动journalnode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh start journalnode</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止journalnode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh stop journalnode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动namenode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start namenode</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止namenode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs stop namenode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动zkfc</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start zkfc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止zkfc</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs stop zkfc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动datanode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs start datanode</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止datanode</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/sbin/hadoop-daemon.sh --script hdfs stop datanode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> HBase相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动HMaster</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HBASE_HOME/bin/hbase-daemon.sh start master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止HMaster</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HBASE_HOME/bin/hbase-daemon.sh stop master</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动HRegionServer</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HBASE_HOME/bin/hbase-daemon.sh start regionserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止HRegionServer</span></span><br><span class="line"><span class="meta">$</span><span class="bash">HBASE_HOME/bin/hbase-daemon.sh stop regionserver</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid SQL解析工具的使用</title>
      <link href="/posts/6d9855d0/"/>
      <url>/posts/6d9855d0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在项目运行过程中，需要对标准SQL进行解析，然后对SQL进行改写，在各种查找对比后选中了Alibaba Druid来进行解析SQL（如非特制，以下均简称 Druid）</p><p>Druid官方的wiki说的还算明白，但可惜的是没有相关API文档。</p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><h2 id="1-SQL-Parser"><a href="#1-SQL-Parser" class="headerlink" title="1. SQL Parser"></a>1. SQL Parser</h2><p>如需查看原文：<a href="https://github.com/alibaba/druid/wiki/SQL-Parser" target="_blank" rel="noopener">SQL Parser</a></p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>SQL Parser是Druid的一个重要组成部分，Druid内置使用SQL Parser来实现防御SQL注入（<a href="https://github.com/alibaba/druid/wiki/%E7%AE%80%E4%BB%8B_WallFilter" target="_blank" rel="noopener">WallFilter</a>）、合并统计没有参数化的SQL(<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter" target="_blank" rel="noopener">StatFilter</a>的mergeSql)、<a href="https://github.com/alibaba/druid/wiki/SQL%E6%A0%BC%E5%BC%8F%E5%8C%96" target="_blank" rel="noopener">SQL格式化</a>、分库分表。</p><h4 id="1-1-和Antlr生成Parser的区别"><a href="#1-1-和Antlr生成Parser的区别" class="headerlink" title="1.1. 和Antlr生成Parser的区别"></a>1.1. 和Antlr生成Parser的区别</h4><p>和Antlr生成的SQL有很大不同的是，Druid SQL Parser性能非常好，可以用于生产环境直接对SQL进行分析处理。</p><h4 id="1-2-Druid-SQL-Parser的使用场景"><a href="#1-2-Druid-SQL-Parser的使用场景" class="headerlink" title="1.2. Druid SQL Parser的使用场景"></a>1.2. Druid SQL Parser的使用场景</h4><ul><li>MySql SQL全量统计</li><li>Hive/<a href="https://www.aliyun.com/product/odps" target="_blank" rel="noopener">ODPS</a> SQL执行安全审计</li><li>分库分表SQL解析引擎</li><li>数据库引擎的SQL Parser</li></ul><h3 id="2-各种语法支持"><a href="#2-各种语法支持" class="headerlink" title="2. 各种语法支持"></a>2. 各种语法支持</h3><p>Druid的sql parser是目前支持各种数据语法最完备的SQL Parser。目前对各种数据库的支持如下：</p><table><thead><tr><th>数据库</th><th>DML</th><th>DDL</th></tr></thead><tbody><tr><td><a href="https://www.aliyun.com/product/odps" target="_blank" rel="noopener">odps</a></td><td>完全支持</td><td>完全支持</td></tr><tr><td>mysql</td><td>完全支持</td><td>完全支持</td></tr><tr><td>postgresql</td><td>完全支持</td><td>完全支持</td></tr><tr><td>oracle</td><td>支持大部分</td><td>支持大部分</td></tr><tr><td>sql server</td><td>支持常用的</td><td>支持常用的ddl</td></tr><tr><td>db2</td><td>支持常用的</td><td>支持常用的ddl</td></tr><tr><td>hive</td><td>支持常用的</td><td>支持常用的ddl</td></tr></tbody></table><p>druid还缺省支持sql-92标准的语法，所以也部分支持其他数据库的sql语法。</p><h3 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h3><p>Druid的SQL Parser是手工编写，性能非常好，目标就是在生产环境运行时使用的SQL Parser，性能比antlr、javacc之类工具生成的Parser快10倍甚至100倍以上。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span>, AGE <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span> = ?</span><br></pre></td></tr></table></figure><p>这样的SQL，druid parser处理大约是600纳秒，也就是说单线程每秒可以处理1500万次以上。在1.1.3~1.1.4版本中，SQL Parser的性能有极大提升，完全可以适用于生产环境中对SQL进行处理。</p><h4 id="3-1-测试代码看这里"><a href="#3-1-测试代码看这里" class="headerlink" title="3.1. 测试代码看这里"></a>3.1. 测试代码看这里</h4><p><a href="https://github.com/alibaba/druid/blob/master/src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfTest.java" target="_blank" rel="noopener">MySqlPerfTest.java</a></p><h3 id="4-Druid-SQL-Parser的代码结构"><a href="#4-Druid-SQL-Parser的代码结构" class="headerlink" title="4. Druid SQL Parser的代码结构"></a>4. Druid SQL Parser的代码结构</h3><p>Druid SQL Parser分三个模块：</p><ul><li>Parser</li><li>AST</li><li>Visitor</li></ul><h4 id="4-1-parser"><a href="#4-1-parser" class="headerlink" title="4.1. parser"></a>4.1. parser</h4><p>parser是将输入文本转换为ast（抽象语法树），parser有包括两个部分，Parser和Lexer，其中Lexer实现词法分析，Parser实现语法分析。</p><h4 id="4-2-AST"><a href="#4-2-AST" class="headerlink" title="4.2. AST"></a>4.2. AST</h4><p>AST是Abstract Syntax Tree的缩写，也就是抽象语法树。AST是parser输出的结果。下面是获得抽象语法树的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String dbType = JdbcConstants.MYSQL; <span class="comment">// 可以是ORACLE、POSTGRESQL、SQLSERVER、ODPS等</span></span><br><span class="line">String sql = <span class="string">"select * from t"</span>;</span><br><span class="line">List&lt;SQLStatement&gt; stmtList = SQLUtils.parseStatements(sql, dbType);</span><br></pre></td></tr></table></figure><ul><li>Druid SQL AST介绍 <a href="https://github.com/alibaba/druid/wiki/Druid_SQL_AST" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/Druid_SQL_AST</a></li></ul><h4 id="4-3-Visitor"><a href="#4-3-Visitor" class="headerlink" title="4.3. Visitor"></a>4.3. Visitor</h4><p>Visitor是遍历AST的手段，是处理AST最方便的模式，Visitor是一个接口，有缺省什么都没做的实现VistorAdapter。</p><p>我们可以实现不同的Visitor来满足不同的需求，Druid内置提供了如下Visitor: </p><ul><li>OutputVisitor用来把AST输出为字符串</li><li><a href="https://github.com/alibaba/druid/wiki/%E7%AE%80%E4%BB%8B_WallFilter" target="_blank" rel="noopener">WallVisitor</a> 来分析SQL语意来防御SQL注入攻击</li><li>ParameterizedOutputVisitor用来合并未参数化的SQL进行统计</li><li><a href="https://github.com/alibaba/druid/wiki/EvalVisitor" target="_blank" rel="noopener">EvalVisitor</a> 用来对SQL表达式求值</li><li>ExportParameterVisitor用来提取SQL中的变量参数</li><li><a href="https://github.com/alibaba/druid/wiki/SchemaStatVisitor" target="_blank" rel="noopener">SchemaStatVisitor</a> 用来统计SQL中使用的表、字段、过滤条件、排序表达式、分组表达式</li><li><a href="https://github.com/alibaba/druid/wiki/SQL_Format" target="_blank" rel="noopener">SQL格式化</a> Druid内置了基于语义的SQL格式化功能</li></ul><h4 id="4-4-自定义Visitor"><a href="#4-4-自定义Visitor" class="headerlink" title="4.4. 自定义Visitor"></a>4.4. 自定义Visitor</h4><p>每种方言的Visitor都有一个缺省的VisitorAdapter，使得编写自定义的Visitor更方便。<br><a href="https://github.com/alibaba/druid/wiki/SQL_Parser_Demo_visitor" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL_Parser_Demo_visitor</a></p><h4 id="4-5-自定义visitor示例"><a href="#4-5-自定义visitor示例" class="headerlink" title="4.5 自定义visitor示例"></a>4.5 自定义visitor示例</h4><h5 id="1-实现自己的Visitor"><a href="#1-实现自己的Visitor" class="headerlink" title="1. 实现自己的Visitor"></a>1. 实现自己的Visitor</h5><h6 id="1-1-Oracle版本"><a href="#1-1-Oracle版本" class="headerlink" title="1.1 Oracle版本"></a>1.1 Oracle版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportTableAliasVisitor</span> <span class="keyword">extends</span> <span class="title">OracleASTVisitorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, SQLTableSource&gt; aliasMap = <span class="keyword">new</span> HashMap&lt;String, SQLTableSource&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visit</span><span class="params">(OracleSelectTableReference x)</span> </span>&#123;</span><br><span class="line">        String alias = x.getAlias();</span><br><span class="line">        aliasMap.put(alias, x);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, SQLTableSource&gt; <span class="title">getAliasMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aliasMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2-MySql版本"><a href="#1-2-MySql版本" class="headerlink" title="1.2 MySql版本"></a>1.2 MySql版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportTableAliasVisitor</span> <span class="keyword">extends</span> <span class="title">MySqlASTVisitorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, SQLTableSource&gt; aliasMap = <span class="keyword">new</span> HashMap&lt;String, SQLTableSource&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visit</span><span class="params">(SQLExprTableSource x)</span> </span>&#123;</span><br><span class="line">        String alias = x.getAlias();</span><br><span class="line">        aliasMap.put(alias, x);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, SQLTableSource&gt; <span class="title">getAliasMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aliasMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-3-POSTGRESQL版本"><a href="#1-3-POSTGRESQL版本" class="headerlink" title="1.3 POSTGRESQL版本"></a>1.3 POSTGRESQL版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportTableAliasVisitor</span> <span class="keyword">extends</span> <span class="title">PGASTVisitorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, SQLTableSource&gt; aliasMap = <span class="keyword">new</span> HashMap&lt;String, SQLTableSource&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visit</span><span class="params">(SQLExprTableSource x)</span> </span>&#123;</span><br><span class="line">        String alias = x.getAlias();</span><br><span class="line">        aliasMap.put(alias, x);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, SQLTableSource&gt; <span class="title">getAliasMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aliasMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用Visitor"><a href="#2-使用Visitor" class="headerlink" title="2. 使用Visitor"></a>2. 使用Visitor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">finnal String dbType = JdbcConstants.ORACLE; <span class="comment">// JdbcConstants.MYSQL或者JdbcConstants.POSTGRESQL</span></span><br><span class="line">String sql = <span class="string">"select * from mytable a where a.id = 3"</span>;</span><br><span class="line">List&lt;SQLStatement&gt; stmtList = SQLUtils.parseStatements(sql, dbType);</span><br><span class="line"></span><br><span class="line">ExportTableAliasVisitor visitor = <span class="keyword">new</span> ExportTableAliasVisitor();</span><br><span class="line"><span class="keyword">for</span> (SQLStatement stmt : stmtList) &#123;</span><br><span class="line">    stmt.accept(visitor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SQLTableSource tableSource = visitor.getAliasMap().get(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(tableSource);</span><br></pre></td></tr></table></figure><h4 id="4-6-方言"><a href="#4-6-方言" class="headerlink" title="4.6. 方言"></a>4.6. 方言</h4><p>SQL-92、SQL-99等都是标准SQL，mysql/oracle/pg/sqlserver/odps等都是方言，也就是dialect。parser/ast/visitor都需要针对不同的方言进行特别处理。</p><h3 id="5-SchemaRepository"><a href="#5-SchemaRepository" class="headerlink" title="5. SchemaRepository"></a>5. SchemaRepository</h3><p>Druid SQL Parser内置了一个SchemaRepository，在内存中缓存SQL Schema信息，用于SQL语义解析中的ColumnResolve等操作。<br><a href="https://github.com/alibaba/druid/wiki/SQL_Schema_Repository" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL_Schema_Repository</a></p><h3 id="6-SQL翻译"><a href="#6-SQL翻译" class="headerlink" title="6. SQL翻译"></a>6. SQL翻译</h3><p>可以基于Druid SQL Parser之上构造Oracle SQL到其他数据的SQL翻译。比如Aliyun提供的Oracle到MySql的<a href="https://rainbow-expert.aliyun.com/sqltransform.htm" target="_blank" rel="noopener">SQL翻译功能</a>，就是基于Druid基础上实现的。<a href="https://rainbow-expert.aliyun.com/sqltransform.htm" target="_blank" rel="noopener">https://rainbow-expert.aliyun.com/sqltransform.htm</a></p><h2 id="2-SQL-Formatter"><a href="#2-SQL-Formatter" class="headerlink" title="2. SQL Formatter"></a>2. SQL Formatter</h2><p>Druid SQL Parser提供了格式化代码的工具类。这个是基于语义分析做的SQL格式化功能，比其他的SQL格式化做的更智能，效果更好。</p><h3 id="格式化的工具类API"><a href="#格式化的工具类API" class="headerlink" title="格式化的工具类API"></a>格式化的工具类API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLUtils</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">(String sq, String dbType)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">(String sq, String dbType, FormatOption option)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中dbType支持mysql/postgresql/odps/oracle/db2/sqlserver</li><li>option缺省有SQLUtils.DEFAULT_FORMAT_OPTION（大写）、SQLUtils.DEFAULT_LCASE_FORMAT_OPTION（小写）两种可以选择，也可按需要定制化。</li></ul><h3 id="MySQL-格式化"><a href="#MySQL-格式化" class="headerlink" title="MySQL 格式化"></a>MySQL 格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.sql.SQLUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.JdbcConstants;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"update t set name = 'x' where id &lt; 100 limit 10"</span>;</span><br><span class="line">String result = SQLUtils.format(sql, JdbcConstants.MYSQL);</span><br><span class="line">System.out.println(result); <span class="comment">// 缺省大写格式</span></span><br><span class="line"></span><br><span class="line">String result_lcase = SQLUtils.format(sql</span><br><span class="line">                         , JdbcConstants.MYSQL</span><br><span class="line">                         , SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);</span><br><span class="line">System.out.println(result_lcase); <span class="comment">// 小写格式</span></span><br></pre></td></tr></table></figure><p>输出格式化后的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是缺省的大写格式</span></span><br><span class="line"><span class="keyword">UPDATE</span> t</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'x'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是小写格式</span></span><br><span class="line"><span class="keyword">update</span> t</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'x'</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="3-SQL-Schema-Repository"><a href="#3-SQL-Schema-Repository" class="headerlink" title="3. SQL Schema Repository"></a>3. SQL Schema Repository</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Druid SQL Parser内置了一个SchemaRepository，在内存中缓存SQL Schema信息，用于SQL语义解析中的ColumnResolve等操作。</p><h3 id="2-如何使用SchemaRepository"><a href="#2-如何使用SchemaRepository" class="headerlink" title="2. 如何使用SchemaRepository"></a>2. 如何使用SchemaRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.sql.repository.SchemaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SchemaRepository是和数据库类型相关的，构造时需要传入dbType</span></span><br><span class="line"><span class="keyword">final</span> String dbType = JdbcConstants.MYSQL;</span><br><span class="line">SchemaRepository repository = <span class="keyword">new</span> SchemaRepository(dbType);</span><br><span class="line"></span><br><span class="line">repository.console(<span class="string">"use sc00;"</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"CREATE TABLE `test1` (\n"</span> +</span><br><span class="line">        <span class="string">"  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_tinyint` tinyint(4) DEFAULT '1' COMMENT 'tinyint',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_smallint` smallint(6) DEFAULT 0 COMMENT 'smallint',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_mediumint` mediumint(9) DEFAULT NULL COMMENT 'mediumint',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_int` int(11) DEFAULT NULL COMMENT 'int',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_bigint` bigint(20) DEFAULT NULL COMMENT 'bigint',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_decimal` decimal(10,3) DEFAULT NULL COMMENT 'decimal',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_date` date DEFAULT '0000-00-00' COMMENT 'date',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_datetime` datetime DEFAULT '0000-00-00 00:00:00' COMMENT 'datetime',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_timestamp` timestamp NULL DEFAULT NULL COMMENT 'timestamp'  ON UPDATE CURRENT_TIMESTAMP ,\n"</span> +</span><br><span class="line">        <span class="string">"  `c_time` time DEFAULT NULL COMMENT 'time',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_char` char(10) DEFAULT NULL COMMENT 'char',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_varchar` varchar(10) DEFAULT 'hello' COMMENT 'varchar',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_blob` blob COMMENT 'blob',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_text` text COMMENT 'text',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_mediumtext` mediumtext COMMENT 'mediumtext',\n"</span> +</span><br><span class="line">        <span class="string">"  `c_longblob` longblob COMMENT 'longblob',\n"</span> +</span><br><span class="line">        <span class="string">"  PRIMARY KEY (`id`,`c_tinyint`),\n"</span> +</span><br><span class="line">        <span class="string">"  UNIQUE KEY `uk_a` (`c_varchar`,`c_mediumint`),\n"</span> +</span><br><span class="line">        <span class="string">"  KEY `k_c` (`c_tinyint`,`c_int`),\n"</span> +</span><br><span class="line">        <span class="string">"  KEY `k_d` (`c_char`,`c_bigint`)\n"</span> +</span><br><span class="line">        <span class="string">") ENGINE=InnoDB AUTO_INCREMENT=1769503 DEFAULT CHARSET=utf8mb4 COMMENT='10000000'"</span>;</span><br><span class="line"></span><br><span class="line">repository.console(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在如下的代码中可以知道repository中已经存在表test1</span></span><br><span class="line">MySqlCreateTableStatement createTableStmt = (MySqlCreateTableStatement) repository.findTable(<span class="string">"test1"</span>).getStatement();</span><br><span class="line">assertEquals(<span class="number">21</span>, createTableStmt.getTableElementList().size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过执行命令"show columns from test1"可以获得mysql console风格的输出</span></span><br><span class="line">assertEquals(<span class="string">"+--------------+---------------+------+-----+---------------------+-----------------------------+\n"</span> +</span><br><span class="line">        <span class="string">"| Field        | Type          | Null | Key | Default             | Extra                       |\n"</span> +</span><br><span class="line">        <span class="string">"+--------------+---------------+------+-----+---------------------+-----------------------------+\n"</span> +</span><br><span class="line">        <span class="string">"| id           | bigint(20)    | NO   | PRI | NULL                | auto_increment              |\n"</span> +</span><br><span class="line">        <span class="string">"| c_tinyint    | tinyint(4)    | YES  | PRI | 1                   |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_smallint   | smallint(6)   | YES  |     | 0                   |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_mediumint  | mediumint(9)  | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_int        | int(11)       | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_bigint     | bigint(20)    | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_decimal    | decimal(10,3) | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_date       | date          | YES  |     | 0000-00-00          |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_datetime   | datetime      | YES  |     | 0000-00-00 00:00:00 |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_timestamp  | timestamp     | YES  |     | NULL                | on update CURRENT_TIMESTAMP |\n"</span> +</span><br><span class="line">        <span class="string">"| c_time       | time          | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_char       | char(10)      | YES  | MUL | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_varchar    | varchar(10)   | YES  | MUL | hello               |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_blob       | blob          | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_text       | text          | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_mediumtext | mediumtext    | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_longblob   | longblob      | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"+--------------+---------------+------+-----+---------------------+-----------------------------+\n"</span>, </span><br><span class="line">repository.console(<span class="string">"show columns from test1"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行alter语句，修改repository中内容</span></span><br><span class="line">repository.console(<span class="string">"alter table test1 drop column c_decimal;"</span>);</span><br><span class="line">assertEquals(<span class="number">20</span>, createTableStmt.getTableElementList().size());</span><br><span class="line"></span><br><span class="line">assertEquals(<span class="string">"+--------------+--------------+------+-----+---------------------+-----------------------------+\n"</span> +</span><br><span class="line">        <span class="string">"| Field        | Type         | Null | Key | Default             | Extra                       |\n"</span> +</span><br><span class="line">        <span class="string">"+--------------+--------------+------+-----+---------------------+-----------------------------+\n"</span> +</span><br><span class="line">        <span class="string">"| id           | bigint(20)   | NO   | PRI | NULL                | auto_increment              |\n"</span> +</span><br><span class="line">        <span class="string">"| c_tinyint    | tinyint(4)   | YES  | PRI | 1                   |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_smallint   | smallint(6)  | YES  |     | 0                   |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_mediumint  | mediumint(9) | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_int        | int(11)      | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_bigint     | bigint(20)   | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_date       | date         | YES  |     | 0000-00-00          |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_datetime   | datetime     | YES  |     | 0000-00-00 00:00:00 |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_timestamp  | timestamp    | YES  |     | NULL                | on update CURRENT_TIMESTAMP |\n"</span> +</span><br><span class="line">        <span class="string">"| c_time       | time         | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_char       | char(10)     | YES  | MUL | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_varchar    | varchar(10)  | YES  | MUL | hello               |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_blob       | blob         | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_text       | text         | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_mediumtext | mediumtext   | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"| c_longblob   | longblob     | YES  |     | NULL                |                             |\n"</span> +</span><br><span class="line">        <span class="string">"+--------------+--------------+------+-----+---------------------+-----------------------------+\n"</span>, </span><br><span class="line">repository.console(<span class="string">"show columns from test1"</span>));</span><br></pre></td></tr></table></figure><h3 id="3-Column-Resolve"><a href="#3-Column-Resolve" class="headerlink" title="3. Column Resolve"></a>3. Column Resolve</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String dbType = JdbcConstants.MYSQL;</span><br><span class="line"></span><br><span class="line">SchemaRepository repository = <span class="keyword">new</span> SchemaRepository(dbType);</span><br><span class="line"></span><br><span class="line">repository.console(<span class="string">"create table t_emp(emp_id bigint, name varchar(20));"</span>);</span><br><span class="line">repository.console(<span class="string">"create table t_org(org_id bigint, name varchar(20));"</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"SELECT emp_id, a.name AS emp_name, org_id, b.name AS org_name\n"</span> +</span><br><span class="line">        <span class="string">"FROM t_emp a\n"</span> +</span><br><span class="line">        <span class="string">"\tINNER JOIN t_org b ON a.emp_id = b.org_id"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;SQLStatement&gt; stmtList = SQLUtils.parseStatements(sql, dbType);</span><br><span class="line">assertEquals(<span class="number">1</span>, stmtList.size());</span><br><span class="line"></span><br><span class="line">SQLSelectStatement stmt = (SQLSelectStatement) stmtList.get(<span class="number">0</span>);</span><br><span class="line">SQLSelectQueryBlock queryBlock = stmt.getSelect().getQueryBlock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写不敏感</span></span><br><span class="line">assertNotNull(queryBlock.findTableSource(<span class="string">"A"</span>));</span><br><span class="line">assertSame(queryBlock.findTableSource(<span class="string">"a"</span>), queryBlock.findTableSource(<span class="string">"A"</span>));</span><br><span class="line"></span><br><span class="line">assertNull(queryBlock.findTableSourceWithColumn(<span class="string">"emp_id"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用repository做column resolve</span></span><br><span class="line">repository.resolve(stmt);</span><br><span class="line"></span><br><span class="line">assertNotNull(queryBlock.findTableSourceWithColumn(<span class="string">"emp_id"</span>));</span><br><span class="line"></span><br><span class="line">SQLExprTableSource tableSource = (SQLExprTableSource) queryBlock.findTableSourceWithColumn(<span class="string">"emp_id"</span>);</span><br><span class="line">assertNotNull(tableSource.getSchemaObject());</span><br><span class="line"></span><br><span class="line">SQLCreateTableStatement createTableStmt = (SQLCreateTableStatement) tableSource.getSchemaObject().getStatement();</span><br><span class="line">assertNotNull(createTableStmt);</span><br><span class="line"></span><br><span class="line">SQLSelectItem selectItem = queryBlock.findSelectItem(<span class="string">"org_name"</span>);</span><br><span class="line">assertNotNull(selectItem);</span><br><span class="line">SQLPropertyExpr selectItemExpr = (SQLPropertyExpr) selectItem.getExpr();</span><br><span class="line">SQLColumnDefinition column = selectItemExpr.getResolvedColumn();</span><br><span class="line">assertNotNull(column);</span><br><span class="line">assertEquals(<span class="string">"name"</span>, column.getName().toString());</span><br><span class="line">assertEquals(<span class="string">"t_org"</span>, (((SQLCreateTableStatement)column.getParent()).getName().toString()));</span><br><span class="line"></span><br><span class="line">assertSame(queryBlock.findTableSource(<span class="string">"B"</span>), selectItemExpr.getResolvedTableSource());</span><br></pre></td></tr></table></figure><h2 id="4-SQL-Parser-Parameterize"><a href="#4-SQL-Parser-Parameterize" class="headerlink" title="4. SQL Parser Parameterize"></a>4. SQL Parser Parameterize</h2><h3 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h3><p>如果要对SQL做各种统计，通常需要对SQL进行参数化再做统计。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 原始SQL</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">// 参数化<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span> = ?</span><br></pre></td></tr></table></figure><h3 id="2-SQL参数化"><a href="#2-SQL参数化" class="headerlink" title="2. SQL参数化"></a>2. SQL参数化</h3><h4 id="2-1-SQL参数化API"><a href="#2-1-SQL参数化API" class="headerlink" title="2.1 SQL参数化API"></a>2.1 SQL参数化API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterizedOutputVisitorUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parameterize</span><span class="params">(String sql, String dbType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-SQL参数化DEMO"><a href="#2-2-SQL参数化DEMO" class="headerlink" title="2.2 SQL参数化DEMO"></a>2.2 SQL参数化DEMO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.sql.visitor.ParameterizedOutputVisitorUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String dbType = JdbcConstants.MYSQL;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from t where id = 1 or id = 2 or id = 3"</span>;</span><br><span class="line">String psql = ParameterizedOutputVisitorUtils.parameterize(sql, dbType);</span><br><span class="line">assertEquals(<span class="string">"SELECT *\n"</span> +</span><br><span class="line">        <span class="string">"FROM t\n"</span> +</span><br><span class="line">        <span class="string">"WHERE id = ?"</span>, psql);</span><br></pre></td></tr></table></figure><h4 id="3-获取具体参数化后的常量值"><a href="#3-获取具体参数化后的常量值" class="headerlink" title="3. 获取具体参数化后的常量值"></a>3. 获取具体参数化后的常量值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String dbType = JdbcConstants.MYSQL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数化SQL是输出的参数保存在这个List中</span></span><br><span class="line">List&lt;Object&gt; outParameters = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from t where id = 101 and age = 102 or name = 'wenshao'"</span>;</span><br><span class="line">String psql = ParameterizedOutputVisitorUtils.parameterize(sql, dbType, outParameters);</span><br><span class="line">assertEquals(<span class="string">"SELECT *\n"</span> +</span><br><span class="line">        <span class="string">"FROM t\n"</span> +</span><br><span class="line">        <span class="string">"WHERE id = ?\n"</span> +</span><br><span class="line">        <span class="string">"\tAND age = ?\n"</span> +</span><br><span class="line">        <span class="string">"\tOR name = ?"</span>, psql);</span><br><span class="line"></span><br><span class="line">assertEquals(<span class="number">3</span>, outParameters.size());</span><br><span class="line">assertEquals(<span class="number">101</span>, outParameters.get(<span class="number">0</span>));</span><br><span class="line">assertEquals(<span class="number">102</span>, outParameters.get(<span class="number">1</span>));</span><br><span class="line">assertEquals(<span class="string">"wenshao"</span>, outParameters.get(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="5-Druid-SQL-AST"><a href="#5-Druid-SQL-AST" class="headerlink" title="5. Druid SQL AST"></a>5. Druid SQL AST</h2><h3 id="1-什么是AST"><a href="#1-什么是AST" class="headerlink" title="1. 什么是AST"></a>1. 什么是AST</h3><p>AST是abstract syntax tree的缩写，也就是抽象语法树。和所有的Parser一样，Druid Parser会生成一个抽象语法树。</p><h3 id="2-在Druid-SQL-Parser中有哪些AST节点类型"><a href="#2-在Druid-SQL-Parser中有哪些AST节点类型" class="headerlink" title="2. 在Druid SQL Parser中有哪些AST节点类型"></a>2. 在Druid SQL Parser中有哪些AST节点类型</h3><p>在Druid中，AST节点类型主要包括SQLObject、SQLExpr、SQLStatement三种抽象类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql.ast;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SQLExpr</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SQLStatement</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SQLTableSource</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSelect</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSelectQueryBlock</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-常用的SQLExpr有哪些"><a href="#2-1-常用的SQLExpr有哪些" class="headerlink" title="2.1. 常用的SQLExpr有哪些"></a>2.1. 常用的SQLExpr有哪些</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql.ast.expr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQLName是一种的SQLExpr的Expr，包括SQLIdentifierExpr、SQLPropertyExpr等</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQLName</span> <span class="keyword">extends</span> <span class="title">SQLExpr</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 ID = 3 这里的ID是一个SQLIdentifierExpr</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLIdentifierExpr</span> <span class="keyword">implements</span> <span class="title">SQLExpr</span>, <span class="title">SQLName</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 A.ID = 3 这里的A.ID是一个SQLPropertyExpr</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLPropertyExpr</span> <span class="keyword">implements</span> <span class="title">SQLExpr</span>, <span class="title">SQLName</span> </span>&#123;</span><br><span class="line">    SQLExpr owner;</span><br><span class="line">    String name;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 ID = 3 这是一个SQLBinaryOpExpr</span></span><br><span class="line"><span class="comment">// left是ID (SQLIdentifierExpr)</span></span><br><span class="line"><span class="comment">// right是3 (SQLIntegerExpr)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLBinaryOpExpr</span> <span class="keyword">implements</span> <span class="title">SQLExpr</span> </span>&#123;</span><br><span class="line">    SQLExpr left;</span><br><span class="line">    SQLExpr right;</span><br><span class="line">    SQLBinaryOperator operator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 select * from where id = ?，这里的?是一个SQLVariantRefExpr，name是'?'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLVariantRefExpr</span> <span class="keyword">extends</span> <span class="title">SQLExprImpl</span> </span>&#123; </span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 ID = 3 这里的3是一个SQLIntegerExpr</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLIntegerExpr</span> <span class="keyword">extends</span> <span class="title">SQLNumericLiteralExpr</span> <span class="keyword">implements</span> <span class="title">SQLValuableExpr</span> </span>&#123; </span><br><span class="line">    Number number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有实现了SQLValuableExpr接口的SQLExpr都可以直接调用这个方法求值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 NAME = 'jobs' 这里的'jobs'是一个SQLCharExpr</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLCharExpr</span> <span class="keyword">extends</span> <span class="title">SQLTextLiteralExpr</span> <span class="keyword">implements</span> <span class="title">SQLValuableExpr</span></span>&#123;</span><br><span class="line">    String text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-常用的SQLStatemment"><a href="#2-2-常用的SQLStatemment" class="headerlink" title="2.2. 常用的SQLStatemment"></a>2.2. 常用的SQLStatemment</h4><p>最常用的Statement当然是SELECT/UPDATE/DELETE/INSERT，他们分别是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql.ast.statement;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSelectStatement</span> <span class="keyword">implements</span> <span class="title">SQLStatement</span> </span>&#123;</span><br><span class="line">    SQLSelect select;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLUpdateStatement</span> <span class="keyword">implements</span> <span class="title">SQLStatement</span> </span>&#123;</span><br><span class="line">    SQLExprTableSource tableSource;</span><br><span class="line">     List&lt;SQLUpdateSetItem&gt; items;</span><br><span class="line">     SQLExpr where;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLDeleteStatement</span> <span class="keyword">implements</span> <span class="title">SQLStatement</span> </span>&#123;</span><br><span class="line">    SQLTableSource tableSource; </span><br><span class="line">    SQLExpr where;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLInsertStatement</span> <span class="keyword">implements</span> <span class="title">SQLStatement</span> </span>&#123;</span><br><span class="line">    SQLExprTableSource tableSource;</span><br><span class="line">    List&lt;SQLExpr&gt; columns;</span><br><span class="line">    SQLSelect query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-SQLTableSource"><a href="#2-3-SQLTableSource" class="headerlink" title="2.3. SQLTableSource"></a>2.3. SQLTableSource</h4><p>常见的SQLTableSource包括SQLExprTableSource、SQLJoinTableSource、SQLSubqueryTableSource、SQLWithSubqueryClause.Entry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLTableSourceImpl</span> <span class="keyword">extends</span> <span class="title">SQLObjectImpl</span> <span class="keyword">implements</span> <span class="title">SQLTableSource</span> </span>&#123; </span><br><span class="line">    String alias;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 select * from emp where i = 3，这里的from emp是一个SQLExprTableSource</span></span><br><span class="line"><span class="comment">// 其中expr是一个name=emp的SQLIdentifierExpr</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLExprTableSource</span> <span class="keyword">extends</span> <span class="title">SQLTableSourceImpl</span> </span>&#123;</span><br><span class="line">    SQLExpr expr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 select * from emp e inner join org o on e.org_id = o.id</span></span><br><span class="line"><span class="comment">// 其中left 'emp e' 是一个SQLExprTableSource，right 'org o'也是一个SQLExprTableSource</span></span><br><span class="line"><span class="comment">// condition 'e.org_id = o.id'是一个SQLBinaryOpExpr</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLJoinTableSource</span> <span class="keyword">extends</span> <span class="title">SQLTableSourceImpl</span> </span>&#123;</span><br><span class="line">    SQLTableSource left;</span><br><span class="line">    SQLTableSource right;</span><br><span class="line">    JoinType joinType; <span class="comment">// INNER_JOIN/CROSS_JOIN/LEFT_OUTER_JOIN/RIGHT_OUTER_JOIN/...</span></span><br><span class="line">    SQLExpr condition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如 select * from (select * from temp) a，这里第一层from(...)是一个SQLSubqueryTableSource</span></span><br><span class="line">SQLSubqueryTableSource extends SQLTableSourceImpl &#123;</span><br><span class="line">    SQLSelect select;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">例如</span></span><br><span class="line"><span class="comment">WITH RECURSIVE ancestors AS (</span></span><br><span class="line"><span class="comment">    SELECT *</span></span><br><span class="line"><span class="comment">    FROM org</span></span><br><span class="line"><span class="comment">    UNION</span></span><br><span class="line"><span class="comment">    SELECT f.*</span></span><br><span class="line"><span class="comment">    FROM org f, ancestors a</span></span><br><span class="line"><span class="comment">    WHERE f.id = a.parent_id</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">SELECT *</span></span><br><span class="line"><span class="comment">FROM ancestors;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里的ancestors AS (...) 是一个SQLWithSubqueryClause.Entry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLWithSubqueryClause</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">SQLTableSourceImpl</span> </span>&#123; </span><br><span class="line">         SQLSelect subQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-SQLSelect-amp-SQLSelectQuery"><a href="#2-4-SQLSelect-amp-SQLSelectQuery" class="headerlink" title="2.4. SQLSelect &amp; SQLSelectQuery"></a>2.4. SQLSelect &amp; SQLSelectQuery</h4><p>SQLSelectStatement包含一个SQLSelect，SQLSelect包含一个SQLSelectQuery，都是组成的关系。SQLSelectQuery有主要的两个派生类，分别是SQLSelectQueryBlock和SQLUnionQuery。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSelect</span> <span class="keyword">extends</span> <span class="title">SQLObjectImpl</span> </span>&#123; </span><br><span class="line">    SQLWithSubqueryClause withSubQuery;</span><br><span class="line">    SQLSelectQuery query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SQLSelectQuery</span> <span class="keyword">extends</span> <span class="title">SQLObject</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSelectQueryBlock</span> <span class="keyword">implements</span> <span class="title">SQLSelectQuery</span> </span>&#123;</span><br><span class="line">    List&lt;SQLSelectItem&gt; selectList;</span><br><span class="line">    SQLTableSource from;</span><br><span class="line">    SQLExprTableSource into;</span><br><span class="line">    SQLExpr where;</span><br><span class="line">    SQLSelectGroupByClause groupBy;</span><br><span class="line">    SQLOrderBy orderBy;</span><br><span class="line">    SQLLimit limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLUnionQuery</span> <span class="keyword">implements</span> <span class="title">SQLSelectQuery</span> </span>&#123;</span><br><span class="line">    SQLSelectQuery left;</span><br><span class="line">    SQLSelectQuery right;</span><br><span class="line">    SQLUnionOperator operator; <span class="comment">// UNION/UNION_ALL/MINUS/INTERSECT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-SQLCreateTableStatement"><a href="#2-5-SQLCreateTableStatement" class="headerlink" title="2.5. SQLCreateTableStatement"></a>2.5. SQLCreateTableStatement</h4><p>建表语句包含了一系列方法，用于方便各种操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLCreateTableStatement</span> <span class="keyword">extends</span> <span class="title">SQLStatementImpl</span> <span class="keyword">implements</span> <span class="title">SQLDDLStatement</span>, <span class="title">SQLCreateStatement</span> </span>&#123;</span><br><span class="line">    SQLExprTableSource tableSource;</span><br><span class="line">    List&lt;SQLTableElement&gt; tableElementList;</span><br><span class="line">    Select select;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略大小写的查找SQLCreateTableStatement中的SQLColumnDefinition</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLColumnDefinition <span class="title">findColumn</span><span class="params">(String columName)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略大小写的查找SQLCreateTableStatement中的column关联的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SQLTableElement <span class="title">findIndex</span><span class="params">(String columnName)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否外键依赖另外一个表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReferenced</span><span class="params">(String tableName)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-怎样产生AST"><a href="#3-怎样产生AST" class="headerlink" title="3. 怎样产生AST"></a>3. 怎样产生AST</h3><h4 id="3-1-通过SQLUtils产生List-lt-SQLStatement-gt"><a href="#3-1-通过SQLUtils产生List-lt-SQLStatement-gt" class="headerlink" title="3.1. 通过SQLUtils产生List&lt;SQLStatement&gt;"></a>3.1. 通过SQLUtils产生List&lt;SQLStatement&gt;</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.JdbcConstants;</span><br><span class="line"></span><br><span class="line">String dbType = JdbcConstants.MYSQL;</span><br><span class="line">List&lt;SQLStatement&gt; statementList = SQLUtils.parseStatements(sql, dbType);</span><br></pre></td></tr></table></figure><h4 id="3-2-通过SQLUtils产生SQLExpr"><a href="#3-2-通过SQLUtils产生SQLExpr" class="headerlink" title="3.2. 通过SQLUtils产生SQLExpr"></a>3.2. 通过SQLUtils产生SQLExpr</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String dbType = JdbcConstants.MYSQL;</span><br><span class="line">SQLExpr expr = SQLUtils.toSQLExpr(<span class="string">"id=3"</span>, dbType);</span><br></pre></td></tr></table></figure><h3 id="4-怎样打印AST节点"><a href="#4-怎样打印AST节点" class="headerlink" title="4. 怎样打印AST节点"></a>4. 怎样打印AST节点</h3><h4 id="4-1-通过SQLUtils工具类打印节点"><a href="#4-1-通过SQLUtils工具类打印节点" class="headerlink" title="4.1. 通过SQLUtils工具类打印节点"></a>4.1. 通过SQLUtils工具类打印节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.druid.sql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以将SQLExpr/SQLStatement打印为String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">toSQLString</span><span class="params">(SQLObject sqlObj, String dbType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以将一个&amp;lt;SQLStatement&amp;gt;打印为String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">toSQLString</span><span class="params">(List&lt;SQLStatement&gt; statementList, String dbType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-如何自定义遍历AST节点"><a href="#5-如何自定义遍历AST节点" class="headerlink" title="5. 如何自定义遍历AST节点"></a>5. 如何自定义遍历AST节点</h3><p>所有的AST节点都支持Visitor模式，需要自定义遍历逻辑，可以实现相应的ASTVisitorAdapter派生类，比如 <a href="https://github.com/alibaba/druid/wiki/SQL_Parser_Demo_visitor" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL_Parser_Demo_visitor</a></p><h3 id="6-相关阅读"><a href="#6-相关阅读" class="headerlink" title="6. 相关阅读"></a>6. 相关阅读</h3><ul><li><a href="https://github.com/alibaba/druid/wiki/SQL-Parser" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL-Parser</a></li><li><a href="https://github.com/alibaba/druid/wiki/SQL_Schema_Repository" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL_Schema_Repository</a></li><li><a href="https://github.com/alibaba/druid/wiki/SQL_RemoveCondition_demo" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/SQL_RemoveCondition_demo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 入门</title>
      <link href="/posts/a097aeed/"/>
      <url>/posts/a097aeed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用kafka，Hbase等大数据组件时，发现很多开源项目都用到了Zookeeper。所以在这里简单研究一下Zookeeper</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Zookeeper-是什么"><a href="#Zookeeper-是什么" class="headerlink" title="Zookeeper 是什么"></a>Zookeeper 是什么</h2><p>Zookeeper是一个分布式协调框架，实现同步服务，配置维护和命名服务等分布式应用。是一个高性能的分布式数据一致性解决方案</p><h2 id="Zookeeper-能干什么"><a href="#Zookeeper-能干什么" class="headerlink" title="Zookeeper 能干什么"></a>Zookeeper 能干什么</h2><p>可以在分布式系统中共享配置，协调锁资源，提供命名服务</p><ol><li>分布式锁：利用Zookeeper的临时顺序节点，可以轻松实现分布式锁</li><li>服务注册与发现： 利用Znode和Watcher，可以实现分布式服务的注册与发现。如：Dubbo</li><li>共享配置与状态信息：如Redis的分布式Codis，利用Zookeeper存放数据路由表和codis-proxy节点的元信息，同时codis-config发起的命令都会通过Zookeeper同步到各个存活的codis-proxy。</li></ol><h3 id="Zookeeper-的数据模型"><a href="#Zookeeper-的数据模型" class="headerlink" title="Zookeeper 的数据模型"></a>Zookeeper 的数据模型</h3><p>Zookeeper的数据模型类似于数据结构中的树，也类似于Linux文件系统中的目录</p><p>树由多个节点构成，Zookeeper的数据存储同样基于节点。在 Zookeeper 中，这样的节点被称作为 Znode</p><p>Zookeeper的引用方式是路径引用，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tree1/node1</span><br><span class="line">/tree2/node2</span><br></pre></td></tr></table></figure><p>这种层级结构可以让每一个Znode节点拥有唯一的路径，可以对不同信息做出清晰的隔离</p><h3 id="Znode-里有什么？"><a href="#Znode-里有什么？" class="headerlink" title="Znode 里有什么？"></a>Znode 里有什么？</h3><p>Znode包含了数据，子节点引用，访问权限等数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|         data           |  ACL  |</span><br><span class="line">---------------------------------</span><br><span class="line">|child (znode1,znode2...)|  stat |</span><br><span class="line"></span><br><span class="line">data 负责存储Znode存储的数据信息</span><br><span class="line">ACL  记录Znode的访问权限，谁可以访问本节点</span><br><span class="line">stat 包含Znode的各种元数据，如：事务ID、版本号、时间戳、大小 等</span><br><span class="line">child当前节点的子节点引用，类似于二叉树的左右孩子</span><br></pre></td></tr></table></figure><p>需要注意的是Zookeeper是为了读多写少的场景所设计，Znode并非是用来存储大规模业务数据，而是用于存储少量的状态与配置信息，每个节点的数据最大不能超过 1MB！</p><h2 id="Zookeeper-运行原理是什么"><a href="#Zookeeper-运行原理是什么" class="headerlink" title="Zookeeper 运行原理是什么"></a>Zookeeper 运行原理是什么</h2><h3 id="什么是Watch？"><a href="#什么是Watch？" class="headerlink" title="什么是Watch？"></a>什么是Watch？</h3><p>可以理解为注册在特定Znode上的触发器，当这个Znode发生改变，也就是调用了create,delete,setData方法的时候，将会触发Znode上注册的对应事件，请求Watch的客户端将会收到异步通知</p><h4 id="Watch的交互过程"><a href="#Watch的交互过程" class="headerlink" title="Watch的交互过程"></a>Watch的交互过程</h4><p>这里借用程序猿小灰博文中的图：</p><ol><li>客户端调用getData方法，watch参数为 true 。服务端收到请求，返回节点数据，并且在对应的哈希表中插入被Watch的Znode路径。以及Watcher列表。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200804235728.jpeg" alt=""></p><ol start="2"><li>当被watch的Znode已删除，服务端会查找哈希表，找到该Znode对应的所有Watcher，异步通知客户端，并且删除hash表中对应的 K-V</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200804235659.jpeg" alt=""></p><h3 id="Zookeeper-的一致性"><a href="#Zookeeper-的一致性" class="headerlink" title="Zookeeper 的一致性"></a>Zookeeper 的一致性</h3><p>如果Zookeeper自身挂掉了，它作为分布式的协调服务，应该怎么办？</p><p>为了防止Zookeeper单机挂掉的情况，Zookeeper维护了一个集群</p><p>这里还是借用小灰的图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200804235334.png" alt=""></p><p>Zookeeper服务的集群是一主多从的结构。</p><p>在更新数据时，首先更新到主节点（服务器，非Znode），再同步到从节点。</p><p>在读取数据时，直接读取任意从节点</p><p>为了保证主从节点的数据一致性，Zookeeper采用了自己的ZAB协议。类似于一致性算法Paxos与Raft</p><p>ZAB协议是：Zookeeper Atomic Broadcast。 有效解决Zookeeper的集群崩溃恢复，以及主从同步数据的问题。</p><h4 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h4><p>ZAB协议定义了三种节点状态</p><ul><li>Looking：选举状态</li><li>Following：从节点所处的状态</li><li>Leading： Leader节点所处的状态</li></ul><h4 id="最大ZXID"><a href="#最大ZXID" class="headerlink" title="最大ZXID"></a>最大ZXID</h4><p>最大ZXID也就是节点本地的最新事务编号，包含epoch与计数两部分。epoch是纪元的意思，相当于Raft算法选主时候的term</p><h4 id="Zookeeper集群崩溃恢复"><a href="#Zookeeper集群崩溃恢复" class="headerlink" title="Zookeeper集群崩溃恢复"></a>Zookeeper集群崩溃恢复</h4><p>假如Zookeeper当前主节点挂掉了，集群会进行崩溃恢复。ZAB的崩溃恢复分为三个阶段：</p><ol><li>Leader election</li></ol><p>选举阶段，此时集群中的节点处于Looking状态。他们会各自向其他节点发起投票，投票当中包含自己的服务器ID和最新事务ID（ZXID）</p><p>接下来，节点会用自身的ZXID和从其他节点接受到的ZXID做比较，如果发现其他结点的ZXID比自己大，也就是数据比自己新，那么就重新发起投票，投票给目前已知最大的ZXID所属节点</p><p>每次投票后，服务器会统计投票数量，判断是否有某个节点获得半数以上的投票。如果存在这样的节点，该节点将会成为准Leader，状态变为Leading。其他节点随之变为Following。</p><ol start="2"><li>Discovery</li></ol><p>发现阶段，用于在从节点中发现最新的ZXID与事务日志。这是为了防止因为某些意外情况，比如网络原因在上一阶段产生多个Leader的情况。</p><p>所以在此阶段，Leader接收所有Follower发来各自的最新epoch值。Leader从中选出最大的epoch，基于此值+1，生成新的epoch分发给各个Follower</p><p>各个Follow二收到全新的epoch后，返回ACK给Leader，带上各自最大的ZXID和历史事务日志。Leader选出最大的ZXID，并更新自身历史日志。</p><ol start="3"><li>Synchronization</li></ol><p>同步阶段，把Leader刚才收集到的最新历史事务日志，同步给集群中所有的Follower。只有当半数Follower同步成功，这个准Leader才能成为正式Leader</p><p>故障恢复结束</p><h4 id="ZAB如何写入数据？"><a href="#ZAB如何写入数据？" class="headerlink" title="ZAB如何写入数据？"></a>ZAB如何写入数据？</h4><p>在写入过程中，涉及到ZAB协议的Broadcast阶段</p><p>Broadcast是Zookeeper常规情况下更新数据的时候，由Leader广播到所有的Follower。其过程如下：</p><ol><li><p>客户端发出写入数据请求给任意Follower</p></li><li><p>Follower把写入数据请求转发给Leader</p></li><li><p>Leader采用二阶段提交方式，先发送Propose广播给Follower。</p></li><li><p>Follower接到Propose消息，写入日志成功后，返回ACK消息给leader</p></li><li><p>leader接到半数以上ACK消息，返回成功给客户端，并且广播Commit请求给Follower</p></li></ol><p>ZAB协议并非强一致性，也不是弱一致性，而是处于两者之间的单调一致性。它依靠事务ID和版本号，保证了数据的更新和读取是有序的。</p><h2 id="Zookeeper-怎么使用"><a href="#Zookeeper-怎么使用" class="headerlink" title="Zookeeper 怎么使用"></a>Zookeeper 怎么使用</h2><p>Zookeeper 为开发者们提供了一些简单的API，甚至提供了触发器机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create 创建节点</span><br><span class="line">delete 删除节点</span><br><span class="line">exist  判断节点是否存在（读操作）</span><br><span class="line">getData 获得一个节点的数据（读操作）</span><br><span class="line">setData 设置一个节点的数据</span><br><span class="line">getChildren 获取节点下的所有子节点（读操作）</span><br></pre></td></tr></table></figure><p>Zookeeper客户端在请求读操作的时候，可以选择是否设置Watch</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>从官方网站下载zookeeper的最新安装包：<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">链接</a></p><h4 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h4><p>单机版很简单，直接解压zookeeper的压缩包，进入conf目录下，复制一份zoo_sample.cfg文件到conf目录下命名为zoo.cfg,根据自己的需要修改配置即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/tmp/zookeeper</span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br></pre></td></tr></table></figure><p>然后运行bin目录下的zkServer.sh即可启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon bin]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/apache-zookeeper-3.5.7-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>集群搭建也很简单，只需要在上述的zoo.cfg文件中加入一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.zk1</span>=<span class="string">xxx.xxx.x.xx:2888:3888</span></span><br><span class="line"><span class="meta">server.zk2</span>=<span class="string">xxx.xxx.x.xx:2888:3888</span></span><br><span class="line"><span class="meta">server.zk3</span>=<span class="string">xxx.xxx.x.xx:2888:3888</span></span><br></pre></td></tr></table></figure><p>其中2888为通信端口号，3888为选举端口号</p><p>然后分别启动三台Zookeeper的服务即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 网络编程之 SSL加密连接</title>
      <link href="/posts/8662ab0e/"/>
      <url>/posts/8662ab0e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于SSL加密连接方式的一切在这里就不再赘述，这里主要分享关于在Java编程中如何对SSL进行编码</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="几个重要的类"><a href="#几个重要的类" class="headerlink" title="几个重要的类"></a>几个重要的类</h2><h3 id="KeyStore"><a href="#KeyStore" class="headerlink" title="KeyStore"></a>KeyStore</h3><p>表示密钥和证书的存储设施</p><p>主要用于存放证书，创建对象时，指定交换数字证书的加密标准</p><p>用法如下(以pkcs12为例)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream stream=<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> Filel(<span class="string">"your file path"</span>));</span><br><span class="line"><span class="keyword">char</span>[] password=<span class="string">"your password"</span>.toCharArray();</span><br><span class="line">KeyStore keyStore=KeyStore.getInstance(<span class="string">"PKCS12"</span>);</span><br><span class="line">keyStore.load(stream, password);</span><br><span class="line">stream.close();</span><br></pre></td></tr></table></figure><h3 id="KeyManager"><a href="#KeyManager" class="headerlink" title="KeyManager"></a>KeyManager</h3><p>选择证书来证明自己的身份</p><p>这是用于 JSSE 密钥管理器的基接口。</p><p>KeyManager 负责管理用于验证到同位体的本地 SSLSocket 的密钥内容。如果没有密钥内容可以使用，则套接字将不能提供验证证书。</p><p>通过使用 KeyManagerFactory，或实现 KeyManager 子类之一来创建 KeyManager。</p><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 keyStore、password 可以参考上方代码</span></span><br><span class="line">KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(<span class="string">"PKCS12"</span>);</span><br><span class="line">keyManagerFactory.init(keyStore,password);</span><br><span class="line">KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();</span><br></pre></td></tr></table></figure><h3 id="TrustManager"><a href="#TrustManager" class="headerlink" title="TrustManager"></a>TrustManager</h3><p>决定是否信任对方的证书</p><p>这是用于 JSSE 信任管理器的基接口。</p><p>TrustManager 负责管理做出信任决定时使用的的信任材料，也负责决定是否接受同位体提供的证书。</p><p>通过使用 TrustManagerFactory，或实现 TrustManager 子类之一创建 TrustManager。</p><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 keyStore 可以参考上方代码</span></span><br><span class="line">TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(<span class="string">"PKCS12"</span>);</span><br><span class="line">trustManagerFactory.init(keyStore);</span><br><span class="line">TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();</span><br></pre></td></tr></table></figure><h3 id="SSLContext"><a href="#SSLContext" class="headerlink" title="SSLContext"></a>SSLContext</h3><p>此类的实例表示安全套接字协议的实现，它充当用于安全套接字工厂或 SSLEngine 的工厂。用可选的一组密钥和信任管理器及安全随机字节源初始化此类。</p><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSLContext context=SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">context.init(keyManagers, trustManagers, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="SSLEngine"><a href="#SSLEngine" class="headerlink" title="SSLEngine"></a>SSLEngine</h3><p>数据发送前wrap打包加密，数据接收时unwrap解包解密，这样一个tcp数据包通过SSLEngine的过程。如下图所示（来自JDK源码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                app data</span><br><span class="line">             |           ^</span><br><span class="line">             |     |     |</span><br><span class="line">             v     |     |</span><br><span class="line">        +----+-----|-----+----+</span><br><span class="line">        |          |          |</span><br><span class="line">        |       SSL|Engine    |</span><br><span class="line">wrap()  |          |          |  unwrap()</span><br><span class="line">        | OUTBOUND | INBOUND  |</span><br><span class="line">        |          |          |</span><br><span class="line">        +----+-----|-----+----+</span><br><span class="line">             |     |     ^</span><br><span class="line">             |     |     |</span><br><span class="line">             v           |</span><br><span class="line">                net data</span><br></pre></td></tr></table></figure><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此context为上文提到的SSLContext</span></span><br><span class="line">SSLEngine engine = context.createSSLEngine();</span><br></pre></td></tr></table></figure><h2 id="证书互相转换"><a href="#证书互相转换" class="headerlink" title="证书互相转换"></a>证书互相转换</h2><h3 id="pem格式证书转为pkcs12格式"><a href="#pem格式证书转为pkcs12格式" class="headerlink" title="pem格式证书转为pkcs12格式"></a>pem格式证书转为pkcs12格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in client.pem -out client.p12</span><br></pre></td></tr></table></figure><h3 id="pem格式证书导出x509格式"><a href="#pem格式证书导出x509格式" class="headerlink" title="pem格式证书导出x509格式"></a>pem格式证书导出x509格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -outform der -in client.pem -out client.crt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java 编程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 报文解读</title>
      <link href="/posts/c88df007/"/>
      <url>/posts/c88df007/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于工作和学习的需要，需要对 MongoDB 的报文进行分析和解读，故通过 Wireshark 进行 MongoDB 的抓包进行分析和学习</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在抓包过程中，我们发现 MongoDB 在3.6之后引入了新的数据交换格式，与之前不同，但总体报文解析逻辑是相同的</p><p>话不多说，先上MongoDB数据包的正确打开方式</p><h2 id="配置MongoDB协议解码器"><a href="#配置MongoDB协议解码器" class="headerlink" title="配置MongoDB协议解码器"></a>配置MongoDB协议解码器</h2><ol><li><p>配置需要解码的端口号和协议<br><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145752.png" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145814.png" alt="配置端口和协议"></p></li><li><p>过滤掉除MongoDB外的其他报文<br><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145842.png" alt="配置过滤规则"></p></li><li><p>打开一个已经解码好的报文<br><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145858.png" alt="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145858.png"><br><img src= "/img/loading.gif" data-lazy-src="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145926.png" alt="https://lemongo97-blog-img.oss-cn-beijing.aliyuncs.com/20200402145926.png"></p></li></ol><p>这样，我们就可以很直观的看到数据包中都传递了那些数据</p><p>对于 MongoDB 的协议来说，OpCode是一个很重要的东西，根据OpCode，MongoDB区分了不同版本的报文结构。我们在Wireshark中看到的报文结构，都是经过完全解码后的数据。</p><p>官方文档中也有对协议内容的一个大致说明：<a href="https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/" target="_blank" rel="noopener">官方的协议说明</a></p><p>在报文中有固定的一些字段，如下：</p><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">messageLength</td><td align="left">The total size of the message in bytes. This total includes the 4 bytes that holds the message length.</td></tr><tr><td align="center">requestID</td><td align="left">A client or database-generated identifier that uniquely identifies this message. For the case of client-generated messages (e.g. OP_QUERY and OP_GET_MORE), it will be returned in the responseTo field of the OP_REPLY message. Clients can use the requestID and the responseTo fields to associate query responses with the originating query.</td></tr><tr><td align="center">responseTo</td><td align="left">In the case of a message from the database, this will be the requestID taken from the OP_QUERY or OP_GET_MORE messages from the client. Clients can use the requestID and the responseTo fields to associate query responses with the originating query.</td></tr><tr><td align="center">opCode</td><td align="left">Type of message. See Request Opcodes for details.</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MsgHeader</span> &#123;</span></span><br><span class="line">    int32   messageLength; <span class="comment">// total message size, including this</span></span><br><span class="line">    int32   requestID;     <span class="comment">// identifier for this message</span></span><br><span class="line">    int32   responseTo;    <span class="comment">// requestID from the original request</span></span><br><span class="line">                           <span class="comment">//   (used in responses from db)</span></span><br><span class="line">    int32   opCode;        <span class="comment">// request type - see table below for details</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>messageLength：代表了MongoDB一次消息通讯中的消息总长度，位置在消息头部。</p><p>requestId：一般为请求发起方的消息包ID，此ID是自增长的，MongoDB会根据这个Id来返回这个ID对应的数据包</p><p>responseTo：一般为MongoDB返回的消息包ID，这个ID为请求包的requestId</p><p>opCode：代表了数据包中的消息类型，具体的OpCode的对应关系如下</p><p>OpCode编号与其含义对应如下：</p><blockquote><p>NOTE:<br>Starting with MongoDB 2.6 and maxWireVersion 3, MongoDB drivers use the database commands insert, update, and delete instead of OP_INSERT, OP_UPDATE, and OP_DELETE for acknowledged writes. Most drivers continue to use opcodes for unacknowledged writes.<br>In version 4.2, MongoDB removes the deprecated internal OP_COMMAND and OP_COMMANDREPLY protocol.</p></blockquote><table><thead><tr><th align="center">Opcode Name</th><th align="center">Value</th><th align="left">Comment</th></tr></thead><tbody><tr><td align="center">OP_REPLY</td><td align="center">1</td><td align="left">Reply to a client request. responseTo is set.</td></tr><tr><td align="center">OP_UPDATE</td><td align="center">2001</td><td align="left">Update document.</td></tr><tr><td align="center">OP_INSERT</td><td align="center">2002</td><td align="left">Insert new document.</td></tr><tr><td align="center">RESERVED</td><td align="center">2003</td><td align="left">Formerly used for OP_GET_BY_OID.</td></tr><tr><td align="center">OP_QUERY</td><td align="center">2004</td><td align="left">Query a collection.</td></tr><tr><td align="center">OP_GET_MORE</td><td align="center">2005</td><td align="left">Get more data from a query. See Cursors.</td></tr><tr><td align="center">OP_DELETE</td><td align="center">2006</td><td align="left">Delete documents.</td></tr><tr><td align="center">OP_KILL_CURSORS</td><td align="center">2007</td><td align="left">Notify database that the client has finished with the cursor.</td></tr><tr><td align="center">OP_MSG</td><td align="center">2013</td><td align="left">Send a message using the format introduced in MongoDB 3.6.</td></tr></tbody></table><h2 id="具体类型的-OP-CODE-格式解析"><a href="#具体类型的-OP-CODE-格式解析" class="headerlink" title="具体类型的 OP_CODE 格式解析"></a>具体类型的 OP_CODE 格式解析</h2><h3 id="OP-INSERT"><a href="#OP-INSERT" class="headerlink" title="OP_INSERT"></a>OP_INSERT</h3><p>OP_INSERT消息用于将一个或多个文档插入到集合中。OP_INSERT消息的格式为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    MsgHeader header;             <span class="comment">// standard message header</span></span><br><span class="line">    int32     flags;              <span class="comment">// bit vector - see below</span></span><br><span class="line">    cstring   fullCollectionName; <span class="comment">// "dbname.collectionname"</span></span><br><span class="line">    document* documents;          <span class="comment">// one or more documents to insert into the collection</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">flags</td><td align="left">位向量，用于指定操作标志。如果为0，则数据库不会因为某条数据插入失败而停止插入。1-31为数据库保留</td></tr><tr><td align="center">fullCollectionName</td><td align="left">完整的集合名称，也被称为命名空间，一般格式为: &lt;数据库.集合名&gt;</td></tr><tr><td align="center">documents</td><td align="left">一个或多个要插入集合的文档。如果有多个，则依次将它们依次写入socket。</td></tr></tbody></table><p>OP_INSERT消息无响应。</p><h3 id="OP-DELETE"><a href="#OP-DELETE" class="headerlink" title="OP_DELETE"></a>OP_DELETE</h3><p>OP_DELETE消息用于从集合中删除一个或多个文档。OP_DELETE消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    MsgHeader header;             <span class="comment">// standard message header</span></span><br><span class="line">    int32     ZERO;               <span class="comment">// 0 - reserved for future use</span></span><br><span class="line">    cstring   fullCollectionName; <span class="comment">// "dbname.collectionname"</span></span><br><span class="line">    int32     flags;              <span class="comment">// bit vector - see below for details.</span></span><br><span class="line">    document  selector;           <span class="comment">// query object.  See below for details.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">ZERO</td><td align="left">整数值0。暂未使用，官方称保留以备将来使用</td></tr><tr><td align="center">numberOfCursorIDs</td><td align="left">消息中的游标ID的数量</td></tr><tr><td align="center">cursorIDs</td><td align="left">要删除的游标ID的“数组”。如果有多个，则依次将它们依次写入套接字</td></tr></tbody></table><p>如果游标被读取直到用尽（直到OP_QUERY 或OP_GET_MORE返回零作为游标ID），就没有必要终止游标</p><h3 id="OP-UPDATE"><a href="#OP-UPDATE" class="headerlink" title="OP_UPDATE"></a>OP_UPDATE</h3><p>OP_UPDATE消息用于更新集合中的文档。OP_UPDATE消息的格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OP_UPDATE</span> &#123;</span></span><br><span class="line">    MsgHeader header;             <span class="comment">// standard message header</span></span><br><span class="line">    int32     ZERO;               <span class="comment">// 0 - reserved for future use</span></span><br><span class="line">    cstring   fullCollectionName; <span class="comment">// "dbname.collectionname"</span></span><br><span class="line">    int32     flags;              <span class="comment">// bit vector. see below</span></span><br><span class="line">    document  selector;           <span class="comment">// the query to select the document</span></span><br><span class="line">    document  update;             <span class="comment">// specification of the update to perform</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">ZERO</td><td align="left">整数值0。暂未使用，官方称保留以备将来使用</td></tr><tr><td align="center">fullCollectionName</td><td align="left">完整的集合名称，也被称为命名空间，一般格式为: &lt;数据库.集合名&gt;</td></tr><tr><td align="center">flags</td><td align="left">位向量，用于指定操作标志。0：对应于Upsert。如果设置，则如果找不到匹配的文档，数据库将把提供的对象插入集合中。1：对应于MultiUpdate。如果设置，数据库将更新集合中的所有匹配对象。否则，仅更新第一个匹配的文档。2- 31保留。必须设置为0。</td></tr><tr><td align="center">selector</td><td align="left">BSON文档，指定用于选择要更新的文档的查询。</td></tr><tr><td align="center">update</td><td align="left">BSON文档，指定要执行的更新</td></tr></tbody></table><p>OP_UPDATE消息无响应。</p><h3 id="OP-QUERY"><a href="#OP-QUERY" class="headerlink" title="OP_QUERY"></a>OP_QUERY</h3><p>OP_QUERY消息用于在数据库中查询集合中的文档。OP_QUERY消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OP_QUERY</span> &#123;</span></span><br><span class="line">    MsgHeader header;                 <span class="comment">// standard message header</span></span><br><span class="line">    int32     flags;                  <span class="comment">// bit vector of query options.  See below for details.</span></span><br><span class="line">    cstring   fullCollectionName ;    <span class="comment">// "dbname.collectionname"</span></span><br><span class="line">    int32     numberToSkip;           <span class="comment">// number of documents to skip</span></span><br><span class="line">    int32     numberToReturn;         <span class="comment">// number of documents to return</span></span><br><span class="line">                                      <span class="comment">//  in the first OP_REPLY batch</span></span><br><span class="line">    document  query;                  <span class="comment">// query object.  See below for details.</span></span><br><span class="line">  [ document  returnFieldsSelector; ] <span class="comment">// Optional. Selector indicating the fields</span></span><br><span class="line">                                      <span class="comment">//  to return.  See below for details.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">flags</td><td align="left">位向量，用于指定操作标志。</td></tr><tr><td align="center">fullCollectionName</td><td align="left">完整的集合名称，也被称为命名空间，一般格式为: &lt;数据库.集合名&gt;</td></tr><tr><td align="center">numberToSkip</td><td align="left">设置要跳过的文档数-从结果数据集中的第一个文档开始-返回查询结果时。</td></tr><tr><td align="center">numberToReturn</td><td align="left">将第一个OP_REPLY消息中的文档数限制为查询。但是，cursorID如果结果多于，数据库仍将建立游标并将其返回给客户端numberToReturn。如果客户端驱动程序提供了“限制”功能（例如SQL LIMIT关键字），则由客户端驱动程序来确保将不超过指定数量的文档返回给调用应用程序。如果numberToReturn为0，则数据库将使用默认的返回大小。如果数字为负，则数据库将返回该数字并关闭游标。无法获取该查询的其他结果。如果numberToReturn为， 1则服务器会将其视为-1（自动关闭光标）。</td></tr><tr><td align="center">query</td><td align="left">代表查询的BSON文档。该查询将包含一个或多个元素，所有这些元素都必须匹配才能使文档包含在结果集中。可能的因素包括 $query，$orderby，$hint，和$explain。</td></tr><tr><td align="center">returnFieldsSelector</td><td align="left">可选BSON文档，用于限制返回文档中的字段。所述returnFieldsSelector含有一种或多种元素，其中的每一个是应返回字段的名称，以及整数值1。</td></tr></tbody></table><p>对于上方flags字段，具体描述如下：</p><ul><li>0被预定了。必须设置为0。</li><li>1对应于TailableCursor。可拖尾表示检索到最后一个数据时光标未关闭。而是，光标标记最终对象的位置。如果收到更多数据，则可以稍后从光标所在的位置继续使用它。像任何“潜在游标”一样，游标可能会在某个时候失效（CursorNotFound）–例如，如果删除了它所引用的最终对象。</li><li>2对应于SlaveOk.Allow查询副本从属。通常，这些返回错误，但名称空间“ local”除外。</li><li>3对应于OplogReplay。仅供内部复制使用-不应设置驱动程序。</li><li>4对应于NoCursorTimeout。服务器通常在闲置时间（10分钟）后使空闲游标超时，以防止过多使用内存。设置此选项可以防止这种情况。</li><li>5对应于AwaitData。与TailableCursor一起使用。如果我们在数据的末尾，请阻塞一会儿，而不要返回任何数据。超时后，我们照常返回。</li><li>6对应于排气。假设客户端将完全读取所有查询的数据，则将数据以多个“更多”包的形式完整传输。当您提取大量数据并知道要全部提取时，速度更快。注意：除非客户端关闭连接，否则不允许客户端不读取所有数据。</li><li>7对应于部分。如果某些分片发生故障，则从mongos获得部分结果（而不是引发错误）</li><li>8-31保留。必须设置为0。</li></ul><p>数据库使用OP_REPLY消息来响应 OP_QUERY消息。</p><h3 id="OP-GET-MORE"><a href="#OP-GET-MORE" class="headerlink" title="OP_GET_MORE"></a>OP_GET_MORE</h3><p>OP_GET_MORE消息用于在数据库中查询集合中的文档。OP_GET_MORE消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    MsgHeader header;             <span class="comment">// standard message header</span></span><br><span class="line">    int32     ZERO;               <span class="comment">// 0 - reserved for future use</span></span><br><span class="line">    cstring   fullCollectionName; <span class="comment">// "dbname.collectionname"</span></span><br><span class="line">    int32     numberToReturn;     <span class="comment">// number of documents to return</span></span><br><span class="line">    int64     cursorID;           <span class="comment">// cursorID from the OP_REPLY</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">ZERO</td><td align="left">整数值0。暂未使用，官方称保留以备将来使用</td></tr><tr><td align="center">fullCollectionName</td><td align="left">完整的集合名称，也被称为命名空间，一般格式为: &lt;数据库.集合名&gt;</td></tr><tr><td align="center">numberToReturn</td><td align="left">将第一个OP_REPLY消息中的文档数限制为查询。但是，cursorID如果结果多于，数据库仍将建立游标并将其返回给客户端numberToReturn。如果客户端驱动程序提供了“限制”功能（例如SQL LIMIT关键字），则由客户端驱动程序来确保将不超过指定数量的文档返回给调用应用程序。如果numberToReturn为0，则数据库将使用默认的返回大小。</td></tr><tr><td align="center">cursorID</td><td align="left">OP_REPLY中的光标标识符。这必须是来自数据库的值。</td></tr></tbody></table><p>数据库将以OP_REPLY消息响应 OP_GET_MORE消息。</p><h3 id="OP-KILL-CURSORS"><a href="#OP-KILL-CURSORS" class="headerlink" title="OP_KILL_CURSORS"></a>OP_KILL_CURSORS</h3><p>OP_KILL_CURSORS消息用于关闭数据库中的活动游标。这是确保查询结束时回收数据库资源所必需的。OP_KILL_CURSORS消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    MsgHeader header;            <span class="comment">// standard message header</span></span><br><span class="line">    int32     ZERO;              <span class="comment">// 0 - reserved for future use</span></span><br><span class="line">    int32     numberOfCursorIDs; <span class="comment">// number of cursorIDs in message</span></span><br><span class="line">    int64*    cursorIDs;         <span class="comment">// sequence of cursorIDs to close</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">ZERO</td><td align="left">整数值0。暂未使用，官方称保留以备将来使用</td></tr><tr><td align="center">numberOfCursorIDs</td><td align="left">消息中的游标ID的数量。</td></tr><tr><td align="center">cursorIDs</td><td align="left">要关闭的游标ID的“数组”。如果有多个，则依次将它们依次写入socket。</td></tr><tr><td align="center">如果游标被读取直到用尽（直到OP_QUERY 或OP_GET_MORE返回零作为游标ID），就没有必要终止游标。</td><td align="left"></td></tr></tbody></table><h3 id="OP-MSG"><a href="#OP-MSG" class="headerlink" title="OP_MSG"></a>OP_MSG</h3><blockquote><p>MongoDB版本中的新功能： 3.6</p></blockquote><p>OP_MSG是一种可扩展的消息格式，旨在包含其他操作码的功能。OP_MSG消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OP_MSG &#123;</span><br><span class="line">    MsgHeader header;          <span class="comment">// standard message header</span></span><br><span class="line">    uint32 flagBits;           <span class="comment">// message flags</span></span><br><span class="line">    Sections[] sections;       <span class="comment">// data sections</span></span><br><span class="line">    optional&lt;uint32&gt; checksum; <span class="comment">// optional CRC-32C checksum</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">header</td><td align="left">消息头，参照上方标准消息头</td></tr><tr><td align="center">flagBits</td><td align="left">包含消息标志的整数位掩码</td></tr><tr><td align="center">sections</td><td align="left">消息主体部中，如所描述的章节</td></tr><tr><td align="center">checksum</td><td align="left">可选的CRC-32C校验和，如 Checksum中所述</td></tr></tbody></table><p>具体信息参照下方描述：</p><h4 id="flagBits"><a href="#flagBits" class="headerlink" title="flagBits"></a>flagBits</h4><p>该flagBits整数是编码修改的格式和行为的标志位掩码OP_MSG。</p><p>前16位（0-15）是必需的， 如果设置了一个位置的bit，则解析器务必出错。</p><p>最后16位（16-31）是可选的，解析器务必忽略任何未知的被设置的bit。代理和其他消息转发器必须在转发消息之前清除所有未知的可选位。</p><table><thead><tr><th align="center">Bit</th><th align="center">Name</th><th align="center">Request</th><th align="center">Response</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">checksumPresent</td><td align="center">✓</td><td align="center">✓</td><td align="left">该消息以4个字节结尾，其中包含CRC-32C [1] 校验和。</td></tr><tr><td align="center">1</td><td align="center">moreToCome</td><td align="center">✓</td><td align="center">✓</td><td align="left">另一条消息将跟随此消息，而无需接收者采取进一步措施。接收器必须不发送另一消息，直到接收到一个具有moreToCome设置为0作为发送可能阻塞，引起死锁。moreToCome 设置了该位的请求将不会收到答复。答复将仅在设置了该exhaustAllowed位的情况下响应此请求。</td></tr><tr><td align="center">16</td><td align="center">exhaustAllowed</td><td align="center">✓</td><td align="center">-</td><td align="left">客户端已准备好使用该moreToCome位对该请求进行多次答复。moreToCome除非请求设置了该位，否则服务器将永远不会产生设置了位的回复。这样可以确保仅在请求者的网络层已准备好多个答复时才发送它们。</td></tr></tbody></table><p>MongoDB 3.6会忽略此标志，并将以一条消息进行响应</p><h4 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h4><p>一条OP_MSG消息包含一个或多个部分。每个部分都以一个kind指示其类型的字节开头。kind 字节之后的所有内容均构成该节的有效负载。</p><p>可用的部分如下：</p><ul><li>Kind 0: Body</li></ul><p>正文部分被编码为单个 BSON对象。BSON对象中的大小也用作部分的大小。此部分类型是标准命令请求和答复正文。</p><p>所有顶级字段都必须具有唯一的名称。</p><ul><li>Kind 1: Document Sequence</li></ul><table><thead><tr><th align="center">Type</th><th>Description</th></tr></thead><tbody><tr><td align="center">int32</td><td>section的大小.</td></tr><tr><td align="center">C String</td><td>文档序列标识符。在所有当前命令中，此字段是从body section替换的（可能是嵌套的）字段。但是不得也存在于主体部分。</td></tr><tr><td align="center">Zero or more BSON objects</td><td>零个或多个BSON对象。对象不使用分隔符来背对背排序。</td></tr></tbody></table><p>对于Zero or more BSON objects来说，每个对象仅限于maxBSONObjectSize服务器的。所有对象的组合不限于 maxBSONObjSize。<br>一旦size消耗完字节，文档序列就结束。<br>转换为语言级对象时，解析器可以选择将这些对象作为数组合并到序列标识符指定的路径处的数组中。</p><h4 id="Checksum"><a href="#Checksum" class="headerlink" title="Checksum"></a>Checksum</h4><p>每条消息可以以CRC-32C [1]校验和结尾，该校验和覆盖消息中所有字节，校验和本身除外</p><p>从MongoDB 4.2开始：</p><ul><li>mongod如果不使用TLS / SSL连接mongos，则实例，实例和 mongo外壳程序实例将与校验和交换消息。</li><li>mongod如果使用TLS / SSL连接mongos，则实例，实例和 mongo外壳程序实例将跳过校验和。</li></ul><p>如果驱动程序和较旧的二进制文件带有带有校验和的消息，则它们将忽略校验和。</p><p>checksumPresent标志位指示存在校验和。</p><h3 id="OP-REPLY"><a href="#OP-REPLY" class="headerlink" title="OP_REPLY"></a>OP_REPLY</h3><p>该OP_REPLY消息由数据库发送，以响应 OP_QUERY或OP_GET_MORE消息。OP_REPLY消息的格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    MsgHeader header;         <span class="comment">// standard message header</span></span><br><span class="line">    int32     responseFlags;  <span class="comment">// bit vector - see details below</span></span><br><span class="line">    int64     cursorID;       <span class="comment">// cursor id if client needs to do get more's</span></span><br><span class="line">    int32     startingFrom;   <span class="comment">// where in the cursor this reply is starting</span></span><br><span class="line">    int32     numberReturned; <span class="comment">// number of documents in the reply</span></span><br><span class="line">    document* documents;      <span class="comment">// documents</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Field</th><th>Description</th></tr></thead><tbody><tr><td align="center">header</td><td>消息头，参照上方标准消息头</td></tr><tr><td align="center">responseFlags</td><td>指定标志的bit向量</td></tr><tr><td align="center">cursorID</td><td>该cursorID 为 OP_REPLY的一部分。如果查询的结果集适合一个OP_REPLY消息， cursorID则将为0。cursorID必须在用于获取更多数据的任何 OP_GET_MORE消息中使用此值，并且当不再需要通过OP_KILL_CURSORS 消息将其关闭时，客户端也必须将其关闭。</td></tr><tr><td align="center">startingFrom</td><td>游标开始位置</td></tr><tr><td align="center">numberReturned</td><td>返回的文档数量.</td></tr><tr><td align="center">documents</td><td>返回的文档</td></tr></tbody></table><p>对于responseFlags的说明</p><ul><li>0对应于CursorNotFound。在getMore调用时设置，但光标ID在服务器上无效。返回结果为零。</li><li>1对应于QueryFailure。查询失败时设置。结果由一个文档组成，其中包含描述失败的“ $ err”字段。</li><li>2对应于ShardConfigStale。驱动应忽略这一点。只有mongos将看到此设置，在这种情况下，它需要从服务器更新配置。</li><li>3对应于AwaitCapable。当服务器支持AwaitData查询选项时设置。如果不是这样，则客户端应该在Tailable游标的getMore之间睡一会儿。Mongod 1.6版支持AwaitData，因此始终设置AwaitCapable。</li><li>4-31保留。忽视。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
